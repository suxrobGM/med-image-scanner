{"version":3,"file":"4353.bundle.af043e41e8aa6359f5b3.js","mappings":"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","sources":["webpack:///../../../modes/tmtv/src/initToolGroups.js","webpack:///../../../modes/tmtv/src/toolbarButtons.js","webpack:///../../../modes/tmtv/src/id.js","webpack:///../../../modes/tmtv/src/index.ts","webpack:///../../../modes/tmtv/src/utils/setCrosshairsConfiguration.js","webpack:///../../../modes/tmtv/src/utils/setFusionActiveVolume.js"],"sourcesContent":["export const toolGroupIds = {\r\n  CT: 'ctToolGroup',\r\n  PT: 'ptToolGroup',\r\n  Fusion: 'fusionToolGroup',\r\n  MIP: 'mipToolGroup',\r\n  default: 'default',\r\n};\r\n\r\nfunction _initToolGroups(\r\n  toolNames,\r\n  Enums,\r\n  toolGroupService,\r\n  commandsManager,\r\n  modeLabelConfig,\r\n  servicesManager\r\n) {\r\n  const tools = {\r\n    active: [\r\n      {\r\n        toolName: toolNames.WindowLevel,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Pan,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Zoom,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\r\n      },\r\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\r\n    ],\r\n    passive: [\r\n      { toolName: toolNames.Length },\r\n      {\r\n        toolName: toolNames.ArrowAnnotate,\r\n        configuration: {\r\n          getTextCallback: (callback, eventDetails) => {\r\n            if (modeLabelConfig) {\r\n              callback(' ');\r\n            } else {\r\n              commandsManager.runCommand('arrowTextCallback', {\r\n                callback,\r\n                eventDetails,\r\n              });\r\n            }\r\n          },\r\n          changeTextCallback: (data, eventDetails, callback) => {\r\n            if (modeLabelConfig === undefined) {\r\n              commandsManager.runCommand('arrowTextCallback', {\r\n                callback,\r\n                data,\r\n                eventDetails,\r\n              });\r\n            }\r\n          },\r\n        },\r\n      },\r\n      { toolName: toolNames.Bidirectional },\r\n      { toolName: toolNames.DragProbe },\r\n      { toolName: toolNames.Probe },\r\n      { toolName: toolNames.EllipticalROI },\r\n      { toolName: toolNames.RectangleROI },\r\n      { toolName: toolNames.StackScroll },\r\n      { toolName: toolNames.Angle },\r\n      { toolName: toolNames.CobbAngle },\r\n      { toolName: toolNames.Magnify },\r\n      {\r\n        toolName: 'CircularBrush',\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: 'FILL_INSIDE_CIRCLE',\r\n        },\r\n      },\r\n      {\r\n        toolName: 'CircularEraser',\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: 'ERASE_INSIDE_CIRCLE',\r\n        },\r\n      },\r\n      {\r\n        toolName: 'SphereBrush',\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: 'FILL_INSIDE_SPHERE',\r\n        },\r\n      },\r\n      {\r\n        toolName: 'SphereEraser',\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: 'ERASE_INSIDE_SPHERE',\r\n        },\r\n      },\r\n      {\r\n        toolName: 'ThresholdCircularBrush',\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: 'THRESHOLD_INSIDE_CIRCLE',\r\n        },\r\n      },\r\n      {\r\n        toolName: 'ThresholdSphereBrush',\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: 'THRESHOLD_INSIDE_SPHERE',\r\n        },\r\n      },\r\n      {\r\n        toolName: 'ThresholdCircularBrushDynamic',\r\n        parentTool: 'Brush',\r\n        configuration: {\r\n          activeStrategy: 'THRESHOLD_INSIDE_CIRCLE',\r\n          // preview: {\r\n          //   enabled: true,\r\n          // },\r\n          strategySpecificConfiguration: {\r\n            // to use the use the center segment index to determine\r\n            // if inside -> same segment, if outside -> eraser\r\n            // useCenterSegmentIndex: true,\r\n            THRESHOLD: {\r\n              isDynamic: true,\r\n              dynamicRadius: 3,\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\r\n    disabled: [\r\n      {\r\n        toolName: toolNames.Crosshairs,\r\n        configuration: {\r\n          disableOnPassive: true,\r\n          autoPan: {\r\n            enabled: false,\r\n            panSize: 10,\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.CT, tools);\r\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.PT, {\r\n    active: tools.active,\r\n    passive: [...tools.passive, { toolName: 'RectangleROIStartEndThreshold' }],\r\n    enabled: tools.enabled,\r\n    disabled: tools.disabled,\r\n  });\r\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.Fusion, tools);\r\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.default, tools);\r\n\r\n  const mipTools = {\r\n    active: [\r\n      {\r\n        toolName: toolNames.VolumeRotateMouseWheel,\r\n        configuration: {\r\n          rotateIncrementDegrees: 5,\r\n        },\r\n      },\r\n      {\r\n        toolName: toolNames.MipJumpToClick,\r\n        configuration: {\r\n          toolGroupId: toolGroupIds.PT,\r\n        },\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\r\n      },\r\n    ],\r\n    enabled: [\r\n      { toolName: toolNames.SegmentationDisplay },\r\n      {\r\n        toolName: toolNames.OrientationMarker,\r\n        configuration: {\r\n          orientationWidget: {\r\n            viewportCorner: 'BOTTOM_LEFT',\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  toolGroupService.createToolGroupAndAddTools(toolGroupIds.MIP, mipTools);\r\n}\r\n\r\nfunction initToolGroups(\r\n  toolNames,\r\n  Enums,\r\n  toolGroupService,\r\n  commandsManager,\r\n  modeLabelConfig,\r\n  servicesManager\r\n) {\r\n  _initToolGroups(\r\n    toolNames,\r\n    Enums,\r\n    toolGroupService,\r\n    commandsManager,\r\n    modeLabelConfig,\r\n    servicesManager\r\n  );\r\n}\r\n\r\nexport default initToolGroups;\r\n","import { ToolbarService } from '@ohif/core';\r\nimport { toolGroupIds } from './initToolGroups';\r\n\r\nconst setToolActiveToolbar = {\r\n  commandName: 'setToolActiveToolbar',\r\n  commandOptions: {\r\n    toolGroupIds: [toolGroupIds.CT, toolGroupIds.PT, toolGroupIds.Fusion],\r\n  },\r\n};\r\n\r\nconst toolbarButtons = [\r\n  {\r\n    id: 'MeasurementTools',\r\n    uiType: 'ohif.splitButton',\r\n    props: {\r\n      groupId: 'MeasurementTools',\r\n      primary: ToolbarService.createButton({\r\n        id: 'Length',\r\n        icon: 'tool-length',\r\n        label: 'Length',\r\n        tooltip: 'Length Tool',\r\n        commands: setToolActiveToolbar,\r\n        evaluate: 'evaluate.cornerstoneTool',\r\n      }),\r\n      secondary: {\r\n        icon: 'chevron-down',\r\n        tooltip: 'More Measure Tools',\r\n      },\r\n      items: [\r\n        ToolbarService.createButton({\r\n          id: 'Bidirectional',\r\n          icon: 'tool-bidirectional',\r\n          label: 'Bidirectional',\r\n          tooltip: 'Bidirectional Tool',\r\n          commands: setToolActiveToolbar,\r\n          evaluate: 'evaluate.cornerstoneTool',\r\n        }),\r\n        ToolbarService.createButton({\r\n          id: 'ArrowAnnotate',\r\n          icon: 'tool-annotate',\r\n          label: 'Arrow Annotate',\r\n          tooltip: 'Arrow Annotate Tool',\r\n          commands: setToolActiveToolbar,\r\n          evaluate: 'evaluate.cornerstoneTool',\r\n        }),\r\n        ToolbarService.createButton({\r\n          id: 'EllipticalROI',\r\n          icon: 'tool-ellipse',\r\n          label: 'Ellipse',\r\n          tooltip: 'Ellipse Tool',\r\n          commands: setToolActiveToolbar,\r\n          evaluate: 'evaluate.cornerstoneTool',\r\n        }),\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'Zoom',\r\n    uiType: 'ohif.radioGroup',\r\n    props: {\r\n      icon: 'tool-zoom',\r\n      label: 'Zoom',\r\n      commands: setToolActiveToolbar,\r\n      evaluate: 'evaluate.cornerstoneTool',\r\n    },\r\n  },\r\n  // Window Level + Presets\r\n  {\r\n    id: 'WindowLevel',\r\n    uiType: 'ohif.radioGroup',\r\n    props: {\r\n      icon: 'tool-window-level',\r\n      label: 'Window Level',\r\n      commands: setToolActiveToolbar,\r\n      evaluate: 'evaluate.cornerstoneTool',\r\n    },\r\n  },\r\n  // Crosshairs Button\r\n  {\r\n    id: 'Crosshairs',\r\n    uiType: 'ohif.radioGroup',\r\n    props: {\r\n      icon: 'tool-crosshair',\r\n      label: 'Crosshairs',\r\n      commands: setToolActiveToolbar,\r\n      evaluate: 'evaluate.cornerstoneTool',\r\n    },\r\n  },\r\n  // Pan Button\r\n  {\r\n    id: 'Pan',\r\n    uiType: 'ohif.radioGroup',\r\n    props: {\r\n      icon: 'tool-move',\r\n      label: 'Pan',\r\n      commands: setToolActiveToolbar,\r\n      evaluate: 'evaluate.cornerstoneTool',\r\n    },\r\n  },\r\n  // Rectangle ROI Start End Threshold Button\r\n  {\r\n    id: 'RectangleROIStartEndThreshold',\r\n    uiType: 'ohif.radioGroup',\r\n    props: {\r\n      icon: 'tool-create-threshold',\r\n      label: 'Rectangle ROI Threshold',\r\n      commands: setToolActiveToolbar,\r\n      evaluate: [\r\n        'evaluate.cornerstone.segmentation',\r\n        // need to put the disabled text last, since each evaluator will\r\n        // merge the result text into the final result\r\n        {\r\n          name: 'evaluate.cornerstoneTool',\r\n          disabledText: 'Select the PT Axial to enable this tool',\r\n        },\r\n      ],\r\n      options: 'tmtv.RectangleROIThresholdOptions',\r\n    },\r\n  },\r\n  {\r\n    id: 'BrushTools',\r\n    uiType: 'ohif.buttonGroup',\r\n    props: {\r\n      groupId: 'BrushTools',\r\n      items: [\r\n        {\r\n          id: 'Brush',\r\n          icon: 'icon-tool-brush',\r\n          label: 'Brush',\r\n          evaluate: {\r\n            name: 'evaluate.cornerstone.segmentation',\r\n            toolNames: ['CircularBrush', 'SphereBrush'],\r\n            disabledText: 'Create new segmentation to enable this tool.',\r\n          },\r\n          options: [\r\n            {\r\n              name: 'Radius (mm)',\r\n              id: 'brush-radius',\r\n              type: 'range',\r\n              min: 0.5,\r\n              max: 99.5,\r\n              step: 0.5,\r\n              value: 25,\r\n              commands: {\r\n                commandName: 'setBrushSize',\r\n                commandOptions: { toolNames: ['CircularBrush', 'SphereBrush'] },\r\n              },\r\n            },\r\n            {\r\n              name: 'Shape',\r\n              type: 'radio',\r\n              id: 'brush-mode',\r\n              value: 'CircularBrush',\r\n              values: [\r\n                { value: 'CircularBrush', label: 'Circle' },\r\n                { value: 'SphereBrush', label: 'Sphere' },\r\n              ],\r\n              commands: 'setToolActiveToolbar',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 'Eraser',\r\n          icon: 'icon-tool-eraser',\r\n          label: 'Eraser',\r\n          evaluate: {\r\n            name: 'evaluate.cornerstone.segmentation',\r\n            toolNames: ['CircularEraser', 'SphereEraser'],\r\n          },\r\n          options: [\r\n            {\r\n              name: 'Radius (mm)',\r\n              id: 'eraser-radius',\r\n              type: 'range',\r\n              min: 0.5,\r\n              max: 99.5,\r\n              step: 0.5,\r\n              value: 25,\r\n              commands: {\r\n                commandName: 'setBrushSize',\r\n                commandOptions: { toolNames: ['CircularEraser', 'SphereEraser'] },\r\n              },\r\n            },\r\n            {\r\n              name: 'Shape',\r\n              type: 'radio',\r\n              id: 'eraser-mode',\r\n              value: 'CircularEraser',\r\n              values: [\r\n                { value: 'CircularEraser', label: 'Circle' },\r\n                { value: 'SphereEraser', label: 'Sphere' },\r\n              ],\r\n              commands: 'setToolActiveToolbar',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 'Threshold',\r\n          icon: 'icon-tool-threshold',\r\n          label: 'Threshold Tool',\r\n          evaluate: {\r\n            name: 'evaluate.cornerstone.segmentation',\r\n            toolNames: ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\r\n          },\r\n          options: [\r\n            {\r\n              name: 'Radius (mm)',\r\n              id: 'threshold-radius',\r\n              type: 'range',\r\n              min: 0.5,\r\n              max: 99.5,\r\n              step: 0.5,\r\n              value: 25,\r\n              commands: {\r\n                commandName: 'setBrushSize',\r\n                commandOptions: {\r\n                  toolNames: [\r\n                    'ThresholdCircularBrush',\r\n                    'ThresholdSphereBrush',\r\n                    'ThresholdCircularBrushDynamic',\r\n                  ],\r\n                },\r\n              },\r\n            },\r\n\r\n            {\r\n              name: 'Threshold',\r\n              type: 'radio',\r\n              id: 'dynamic-mode',\r\n              value: 'ThresholdRange',\r\n              values: [\r\n                { value: 'ThresholdDynamic', label: 'Dynamic' },\r\n                { value: 'ThresholdRange', label: 'Range' },\r\n              ],\r\n              commands: ({ value, commandsManager }) => {\r\n                if (value === 'ThresholdDynamic') {\r\n                  commandsManager.run('setToolActive', {\r\n                    toolName: 'ThresholdCircularBrushDynamic',\r\n                  });\r\n                } else {\r\n                  commandsManager.run('setToolActive', {\r\n                    toolName: 'ThresholdCircularBrush',\r\n                  });\r\n                }\r\n              },\r\n            },\r\n            {\r\n              name: 'Shape',\r\n              type: 'radio',\r\n              id: 'eraser-mode',\r\n              value: 'ThresholdCircularBrush',\r\n              values: [\r\n                { value: 'ThresholdCircularBrush', label: 'Circle' },\r\n                { value: 'ThresholdSphereBrush', label: 'Sphere' },\r\n              ],\r\n              condition: ({ options }) =>\r\n                options.find(option => option.id === 'dynamic-mode').value === 'ThresholdRange',\r\n              commands: 'setToolActiveToolbar',\r\n            },\r\n            {\r\n              name: 'ThresholdRange',\r\n              type: 'double-range',\r\n              id: 'threshold-range',\r\n              min: 0,\r\n              max: 50,\r\n              step: 0.5,\r\n              value: [2.5, 50],\r\n              condition: ({ options }) =>\r\n                options.find(option => option.id === 'dynamic-mode').value === 'ThresholdRange',\r\n              commands: {\r\n                commandName: 'setThresholdRange',\r\n                commandOptions: {\r\n                  toolNames: ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nexport default toolbarButtons;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { hotkeys, classes } from '@ohif/core';\r\nimport toolbarButtons from './toolbarButtons.js';\r\nimport { id } from './id.js';\r\nimport initToolGroups from './initToolGroups.js';\r\nimport setCrosshairsConfiguration from './utils/setCrosshairsConfiguration.js';\r\nimport setFusionActiveVolume from './utils/setFusionActiveVolume.js';\r\nimport i18n from 'i18next';\r\n\r\nconst { MetadataProvider } = classes;\r\n\r\nconst ohif = {\r\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\r\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\r\n  measurements: '@ohif/extension-default.panelModule.measure',\r\n  thumbnailList: '@ohif/extension-default.panelModule.seriesList',\r\n};\r\n\r\nconst cs3d = {\r\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\r\n  segPanel: '@ohif/extension-cornerstone-dicom-seg.panelModule.panelSegmentation',\r\n};\r\n\r\nconst tmtv = {\r\n  hangingProtocol: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\r\n  petSUV: '@ohif/extension-tmtv.panelModule.petSUV',\r\n  toolbox: '@ohif/extension-tmtv.panelModule.tmtvBox',\r\n  export: '@ohif/extension-tmtv.panelModule.tmtvExport',\r\n};\r\n\r\nconst extensionDependencies = {\r\n  // Can derive the versions at least process.env.from npm_package_version\r\n  '@ohif/extension-default': '^3.0.0',\r\n  '@ohif/extension-cornerstone': '^3.0.0',\r\n  '@ohif/extension-cornerstone-dicom-seg': '^3.0.0',\r\n  '@ohif/extension-tmtv': '^3.0.0',\r\n};\r\n\r\nconst unsubscriptions = [];\r\nfunction modeFactory({ modeConfiguration }) {\r\n  return {\r\n    // TODO: We're using this as a route segment\r\n    // We should not be.\r\n    id,\r\n    routeName: 'tmtv',\r\n    displayName: i18n.t('Modes:Total Metabolic Tumor Volume'),\r\n    /**\r\n     * Lifecycle hooks\r\n     */\r\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }: withAppTypes) => {\r\n      const {\r\n        toolbarService,\r\n        toolGroupService,\r\n        customizationService,\r\n        hangingProtocolService,\r\n        displaySetService,\r\n      } = servicesManager.services;\r\n\r\n      const utilityModule = extensionManager.getModuleEntry(\r\n        '@ohif/extension-cornerstone.utilityModule.tools'\r\n      );\r\n\r\n      const { toolNames, Enums } = utilityModule.exports;\r\n\r\n      // Init Default and SR ToolGroups\r\n      initToolGroups(toolNames, Enums, toolGroupService, commandsManager, null, servicesManager);\r\n\r\n      const { unsubscribe } = toolGroupService.subscribe(\r\n        toolGroupService.EVENTS.VIEWPORT_ADDED,\r\n        () => {\r\n          // For fusion toolGroup we need to add the volumeIds for the crosshairs\r\n          // since in the fusion viewport we don't want both PT and CT to render MIP\r\n          // when slabThickness is modified\r\n          const { displaySetMatchDetails } = hangingProtocolService.getMatchDetails();\r\n\r\n          setCrosshairsConfiguration(\r\n            displaySetMatchDetails,\r\n            toolNames,\r\n            toolGroupService,\r\n            displaySetService\r\n          );\r\n\r\n          setFusionActiveVolume(\r\n            displaySetMatchDetails,\r\n            toolNames,\r\n            toolGroupService,\r\n            displaySetService\r\n          );\r\n        }\r\n      );\r\n\r\n      unsubscriptions.push(unsubscribe);\r\n      toolbarService.addButtons(toolbarButtons);\r\n      toolbarService.createButtonSection('primary', [\r\n        'MeasurementTools',\r\n        'Zoom',\r\n        'WindowLevel',\r\n        'Crosshairs',\r\n        'Pan',\r\n      ]);\r\n      toolbarService.createButtonSection('ROIThresholdToolbox', [\r\n        'RectangleROIStartEndThreshold',\r\n        'BrushTools',\r\n      ]);\r\n\r\n      customizationService.addModeCustomizations([\r\n        {\r\n          id: 'segmentation.panel',\r\n          segmentationPanelMode: 'expanded',\r\n          addSegment: false,\r\n          onSegmentationAdd: () => {\r\n            commandsManager.run('createNewLabelmapFromPT');\r\n          },\r\n        },\r\n      ]);\r\n\r\n      // For the hanging protocol we need to decide on the window level\r\n      // based on whether the SUV is corrected or not, hence we can't hard\r\n      // code the window level in the hanging protocol but we add a custom\r\n      // attribute to the hanging protocol that will be used to get the\r\n      // window level based on the metadata\r\n      hangingProtocolService.addCustomAttribute(\r\n        'getPTVOIRange',\r\n        'get PT VOI based on corrected or not',\r\n        props => {\r\n          const ptDisplaySet = props.find(imageSet => imageSet.Modality === 'PT');\r\n\r\n          if (!ptDisplaySet) {\r\n            return;\r\n          }\r\n\r\n          const { imageId } = ptDisplaySet.images[0];\r\n          const imageIdScalingFactor = MetadataProvider.get('scalingModule', imageId);\r\n\r\n          const isSUVAvailable = imageIdScalingFactor && imageIdScalingFactor.suvbw;\r\n\r\n          if (isSUVAvailable) {\r\n            return {\r\n              windowWidth: 5,\r\n              windowCenter: 2.5,\r\n            };\r\n          }\r\n\r\n          return;\r\n        }\r\n      );\r\n    },\r\n    onModeExit: ({ servicesManager }: withAppTypes) => {\r\n      const {\r\n        toolGroupService,\r\n        syncGroupService,\r\n        segmentationService,\r\n        cornerstoneViewportService,\r\n        uiDialogService,\r\n        uiModalService,\r\n      } = servicesManager.services;\r\n\r\n      unsubscriptions.forEach(unsubscribe => unsubscribe());\r\n      uiDialogService.dismissAll();\r\n      uiModalService.hide();\r\n      toolGroupService.destroy();\r\n      syncGroupService.destroy();\r\n      segmentationService.destroy();\r\n      cornerstoneViewportService.destroy();\r\n    },\r\n    validationTags: {\r\n      study: [],\r\n      series: [],\r\n    },\r\n    isValidMode: ({ modalities, study }) => {\r\n      const modalities_list = modalities.split('\\\\');\r\n      const invalidModalities = ['SM'];\r\n\r\n      const isValid =\r\n        modalities_list.includes('CT') &&\r\n        study.mrn !== 'M1' &&\r\n        modalities_list.includes('PT') &&\r\n        !invalidModalities.some(modality => modalities_list.includes(modality)) &&\r\n        // This is study is a 4D study with PT and CT and not a 3D study for the tmtv\r\n        // mode, until we have a better way to identify 4D studies we will use the\r\n        // StudyInstanceUID to identify the study\r\n        // Todo: when we add the 4D mode which comes with a mechanism to identify\r\n        // 4D studies we can use that\r\n        study.studyInstanceUid !== '1.3.6.1.4.1.12842.1.1.14.3.20220915.105557.468.2963630849';\r\n\r\n      // there should be both CT and PT modalities and the modality should not be SM\r\n      return {\r\n        valid: isValid,\r\n        description: 'The mode requires both PT and CT series in the study',\r\n      };\r\n    },\r\n    routes: [\r\n      {\r\n        path: 'tmtv',\r\n        /*init: ({ servicesManager, extensionManager }) => {\r\n          //defaultViewerRouteInit\r\n        },*/\r\n        layoutTemplate: () => {\r\n          return {\r\n            id: ohif.layout,\r\n            props: {\r\n              leftPanels: [ohif.thumbnailList],\r\n              leftPanelClosed: true,\r\n              rightPanels: [[tmtv.toolbox, cs3d.segPanel, tmtv.export], tmtv.petSUV],\r\n              viewports: [\r\n                {\r\n                  namespace: cs3d.viewport,\r\n                  displaySetsToDisplay: [ohif.sopClassHandler],\r\n                },\r\n              ],\r\n            },\r\n          };\r\n        },\r\n      },\r\n    ],\r\n    extensions: extensionDependencies,\r\n    hangingProtocol: tmtv.hangingProtocol,\r\n    sopClassHandlers: [ohif.sopClassHandler],\r\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\r\n    ...modeConfiguration,\r\n  };\r\n}\r\n\r\nconst mode = {\r\n  id,\r\n  modeFactory,\r\n  extensionDependencies,\r\n};\r\n\r\nexport default mode;\r\n","import { toolGroupIds } from '../initToolGroups';\r\n\r\nexport default function setCrosshairsConfiguration(\r\n  matches,\r\n  toolNames,\r\n  toolGroupService,\r\n  displaySetService\r\n) {\r\n  const matchDetails = matches.get('ctDisplaySet');\r\n\r\n  if (!matchDetails) {\r\n    return;\r\n  }\r\n\r\n  const { SeriesInstanceUID } = matchDetails;\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\r\n\r\n  const toolConfig = toolGroupService.getToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.Crosshairs\r\n  );\r\n\r\n  const crosshairsConfig = {\r\n    ...toolConfig,\r\n    filterActorUIDsToSetSlabThickness: [displaySets[0].displaySetInstanceUID],\r\n  };\r\n\r\n  toolGroupService.setToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.Crosshairs,\r\n    crosshairsConfig\r\n  );\r\n}\r\n","import { toolGroupIds } from '../initToolGroups';\r\n\r\nexport default function setFusionActiveVolume(\r\n  matches,\r\n  toolNames,\r\n  toolGroupService,\r\n  displaySetService\r\n) {\r\n  const matchDetails = matches.get('ptDisplaySet');\r\n\r\n  if (!matchDetails) {\r\n    return;\r\n  }\r\n\r\n  const { SeriesInstanceUID } = matchDetails;\r\n\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\r\n\r\n  if (!displaySets || displaySets.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const wlToolConfig = toolGroupService.getToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.WindowLevel\r\n  );\r\n\r\n  const ellipticalToolConfig = toolGroupService.getToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.EllipticalROI\r\n  );\r\n\r\n  // Todo: this should not take into account the loader id\r\n  const volumeId = `cornerstoneStreamingImageVolume:${displaySets[0].displaySetInstanceUID}`;\r\n\r\n  const windowLevelConfig = {\r\n    ...wlToolConfig,\r\n    volumeId,\r\n  };\r\n\r\n  const ellipticalROIConfig = {\r\n    ...ellipticalToolConfig,\r\n    volumeId,\r\n  };\r\n\r\n  toolGroupService.setToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.WindowLevel,\r\n    windowLevelConfig\r\n  );\r\n\r\n  toolGroupService.setToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.EllipticalROI,\r\n    ellipticalROIConfig\r\n  );\r\n}\r\n"],"names":["toolGroupIds","CT","PT","Fusion","MIP","default","toolNames","Enums","toolGroupService","commandsManager","modeLabelConfig","servicesManager","tools","active","toolName","WindowLevel","bindings","mouseButton","MouseBindings","Primary","Pan","Auxiliary","Zoom","Secondary","StackScrollMouseWheel","passive","Length","ArrowAnnotate","configuration","getTextCallback","callback","eventDetails","runCommand","changeTextCallback","data","undefined","Bidirectional","DragProbe","Probe","EllipticalROI","RectangleROI","StackScroll","Angle","CobbAngle","Magnify","parentTool","activeStrategy","strategySpecificConfiguration","THRESHOLD","isDynamic","dynamicRadius","enabled","SegmentationDisplay","disabled","Crosshairs","disableOnPassive","autoPan","panSize","createToolGroupAndAddTools","mipTools","VolumeRotateMouseWheel","rotateIncrementDegrees","MipJumpToClick","toolGroupId","OrientationMarker","orientationWidget","viewportCorner","_initToolGroups","setToolActiveToolbar","commandName","commandOptions","id","uiType","props","groupId","primary","ToolbarService","createButton","icon","label","tooltip","commands","evaluate","secondary","items","name","disabledText","options","type","min","max","step","value","values","run","condition","find","option","packageJson","MetadataProvider","classes","ohif","cs3d","tmtv","extensionDependencies","unsubscriptions","modeFactory","modeConfiguration","routeName","displayName","i18n","t","onModeEnter","extensionManager","toolbarService","customizationService","hangingProtocolService","displaySetService","services","utilityModule","getModuleEntry","exports","initToolGroups","unsubscribe","subscribe","EVENTS","VIEWPORT_ADDED","displaySetMatchDetails","getMatchDetails","matches","matchDetails","get","SeriesInstanceUID","displaySets","getDisplaySetsForSeries","crosshairsConfig","getToolConfiguration","filterActorUIDsToSetSlabThickness","displaySetInstanceUID","setToolConfiguration","setCrosshairsConfiguration","length","wlToolConfig","ellipticalToolConfig","volumeId","windowLevelConfig","ellipticalROIConfig","setFusionActiveVolume","push","addButtons","toolbarButtons","createButtonSection","addModeCustomizations","segmentationPanelMode","addSegment","onSegmentationAdd","addCustomAttribute","ptDisplaySet","imageSet","Modality","imageId","images","imageIdScalingFactor","suvbw","windowWidth","windowCenter","onModeExit","syncGroupService","segmentationService","cornerstoneViewportService","uiDialogService","uiModalService","forEach","dismissAll","hide","destroy","validationTags","study","series","isValidMode","modalities","modalities_list","split","valid","includes","mrn","some","modality","studyInstanceUid","description","routes","path","layoutTemplate","leftPanels","leftPanelClosed","rightPanels","viewports","namespace","displaySetsToDisplay","extensions","hangingProtocol","sopClassHandlers","hotkeys","defaults","hotkeyBindings"],"sourceRoot":""}