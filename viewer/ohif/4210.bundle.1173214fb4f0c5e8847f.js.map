{"version":3,"file":"4210.bundle.1173214fb4f0c5e8847f.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/types/segmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-seg';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import { utils } from '@ohif/core';\r\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\r\nimport { CONSTANTS } from '@cornerstonejs/tools';\r\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\r\n\r\nimport { SOPClassHandlerId } from './id';\r\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\r\n\r\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\r\n\r\nconst loadPromises = {};\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    Modality: 'SEG',\r\n    loading: false,\r\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isHydrated: false,\r\n    segments: {},\r\n    sopClassUids,\r\n    instance,\r\n    instances: [instance],\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    isOverlayDisplaySet: true,\r\n  };\r\n\r\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n\r\n  if (!referencedSeriesSequence) {\r\n    console.error('ReferencedSeriesSequence is missing for the SEG');\r\n    return;\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\r\n\r\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n\r\n  displaySet.getReferenceDisplaySet = () => {\r\n    const { displaySetService } = servicesManager.services;\r\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\r\n      displaySet.referencedSeriesInstanceUID\r\n    );\r\n\r\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\r\n      throw new Error('Referenced DisplaySet is missing for the SEG');\r\n    }\r\n\r\n    const referencedDisplaySet = referencedDisplaySets[0];\r\n\r\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\r\n\r\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\r\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\r\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\r\n    displaySet.referencedVolumeId = referencedVolumeId;\r\n\r\n    return referencedDisplaySet;\r\n  };\r\n\r\n  displaySet.load = async ({ headers }) =>\r\n    await _load(displaySet, servicesManager, extensionManager, headers);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nfunction _load(\r\n  segDisplaySet,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager,\r\n  headers\r\n) {\r\n  const { SOPInstanceUID } = segDisplaySet;\r\n  const { segmentationService } = servicesManager.services;\r\n\r\n  if (\r\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\r\n    loadPromises[SOPInstanceUID] &&\r\n    _segmentationExists(segDisplaySet, segmentationService)\r\n  ) {\r\n    return loadPromises[SOPInstanceUID];\r\n  }\r\n\r\n  segDisplaySet.loading = true;\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\r\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\r\n      await _loadSegments({\r\n        extensionManager,\r\n        servicesManager,\r\n        segDisplaySet,\r\n        headers,\r\n      });\r\n    }\r\n\r\n    const suppressEvents = true;\r\n    segmentationService\r\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\r\n      .then(() => {\r\n        segDisplaySet.loading = false;\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        segDisplaySet.loading = false;\r\n        reject(error);\r\n      });\r\n  });\r\n\r\n  return loadPromises[SOPInstanceUID];\r\n}\r\n\r\nasync function _loadSegments({\r\n  extensionManager,\r\n  servicesManager,\r\n  segDisplaySet,\r\n  headers,\r\n}: withAppTypes) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { segmentationService, uiNotificationService } = servicesManager.services;\r\n\r\n  const { dicomLoaderService } = utilityModule.exports;\r\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\r\n\r\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\r\n\r\n  if (!cachedReferencedVolume) {\r\n    throw new Error(\r\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\r\n    );\r\n  }\r\n\r\n  const { imageIds } = cachedReferencedVolume;\r\n\r\n  // Todo: what should be defaults here\r\n  const tolerance = 0.001;\r\n  const skipOverlapping = true;\r\n\r\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\r\n    const { percentComplete } = evt.detail;\r\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\r\n      percentComplete,\r\n    });\r\n  });\r\n\r\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\r\n    imageIds,\r\n    arrayBuffer,\r\n    metaData,\r\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\r\n  );\r\n\r\n  let usedRecommendedDisplayCIELabValue = true;\r\n  results.segMetadata.data.forEach((data, i) => {\r\n    if (i > 0) {\r\n      data.rgba = data.RecommendedDisplayCIELabValue;\r\n\r\n      if (data.rgba) {\r\n        data.rgba = dicomlabToRGB(data.rgba);\r\n      } else {\r\n        usedRecommendedDisplayCIELabValue = false;\r\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\r\n      }\r\n    }\r\n  });\r\n\r\n  if (results.overlappingSegments) {\r\n    uiNotificationService.show({\r\n      title: 'Overlapping Segments',\r\n      message:\r\n        'Unsupported overlapping segments detected, segmentation rendering results may be incorrect.',\r\n      type: 'warning',\r\n    });\r\n  }\r\n\r\n  if (!usedRecommendedDisplayCIELabValue) {\r\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\r\n    uiNotificationService.show({\r\n      title: 'DICOM SEG import',\r\n      message:\r\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\r\n      type: 'warning',\r\n      duration: 5000,\r\n    });\r\n  }\r\n\r\n  Object.assign(segDisplaySet, results);\r\n}\r\n\r\nfunction _segmentationExists(segDisplaySet, segmentationService: AppTypes.SegmentationService) {\r\n  // This should be abstracted with the CornerstoneCacheService\r\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\r\n}\r\n\r\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-seg',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import dcmjs from 'dcmjs';\r\n\r\n/**\r\n * Converts a CIELAB color to an RGB color using the dcmjs library.\r\n * @param cielab - The CIELAB color to convert.\r\n * @returns The RGB color as an array of three integers between 0 and 255.\r\n */\r\nfunction dicomlabToRGB(cielab: number[]): number[] {\r\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\r\n\r\n  return rgb;\r\n}\r\n\r\nexport { dicomlabToRGB };\r\n","import { Types } from '@ohif/core';\r\n\r\nconst segProtocol: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/seg',\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  name: 'Segmentations',\r\n  // Just apply this one when specifically listed\r\n  protocolMatchingRules: [],\r\n  toolGroupIds: ['default'],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: 0,\r\n  // Default viewport is used to define the viewport when\r\n  // additional viewports are added using the layout tool\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'segDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  displaySetSelectors: {\r\n    segDisplaySetId: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'SEG',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      name: 'Segmentations',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: { allowUnmatchedView: true },\r\n          displaySets: [\r\n            {\r\n              id: 'segDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: segProtocol.id,\r\n      protocol: segProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\nexport { segProtocol };\r\n","export enum SegmentationPanelMode {\r\n  Expanded = 'expanded',\r\n  Dropdown = 'dropdown',\r\n}\r\n","import React from 'react';\r\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\r\n\r\nfunction callInputDialog(uiDialogService, label, callback) {\r\n  const dialogId = 'enter-segment-label';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.label, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Segment',\r\n        value: { label },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          return (\r\n            <Input\r\n              label=\"Enter the segment label\"\r\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              className=\"border-primary-main bg-black\"\r\n              type=\"text\"\r\n              value={value.label}\r\n              onChange={event => {\r\n                event.persist();\r\n                setValue(value => ({ ...value, label: event.target.value }));\r\n              }}\r\n              onKeyPress={event => {\r\n                if (event.key === 'Enter') {\r\n                  onSubmitHandler({ value, action: { id: 'save' } });\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default callInputDialog;\r\n","import React from 'react';\r\nimport { Dialog } from '@ohif/ui';\r\nimport { ChromePicker } from 'react-color';\r\n\r\nimport './colorPickerDialog.css';\r\n\r\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\r\n  const dialogId = 'pick-color';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.rgbaColor, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Segment Color',\r\n        value: { rgbaColor },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\r\n          { id: 'save', text: 'Save', type: 'secondary' },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          const handleChange = color => {\r\n            setValue({ rgbaColor: color.rgb });\r\n          };\r\n\r\n          return (\r\n            <ChromePicker\r\n              color={value.rgbaColor}\r\n              onChange={handleChange}\r\n              presetColors={[]}\r\n              width={300}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default callColorPickerDialog;\r\n","import { createReportAsync } from '@ohif/extension-default';\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { SegmentationGroupTable, SegmentationGroupTableExpanded } from '@ohif/ui';\r\nimport { SegmentationPanelMode } from '../types/segmentation';\r\nimport callInputDialog from './callInputDialog';\r\nimport callColorPickerDialog from './colorPickerDialog';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst components = {\r\n  [SegmentationPanelMode.Expanded]: SegmentationGroupTableExpanded,\r\n  [SegmentationPanelMode.Dropdown]: SegmentationGroupTable,\r\n};\r\n\r\nexport default function PanelSegmentation({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n  configuration,\r\n}: withAppTypes) {\r\n  const {\r\n    segmentationService,\r\n    viewportGridService,\r\n    uiDialogService,\r\n    displaySetService,\r\n    cornerstoneViewportService,\r\n  } = servicesManager.services;\r\n\r\n  const { t } = useTranslation('PanelSegmentation');\r\n\r\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\r\n  const [addSegmentationClassName, setAddSegmentationClassName] = useState('');\r\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\r\n    segmentationService.getConfiguration()\r\n  );\r\n\r\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\r\n\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n    const subscriptions = [];\r\n\r\n    [added, updated, removed].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        const segmentations = segmentationService.getSegmentations();\r\n        setSegmentations(segmentations);\r\n        setSegmentationConfiguration(segmentationService.getConfiguration());\r\n      });\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // temporary measure to not allow add segmentation when the selected viewport\r\n  // is stack viewport\r\n  useEffect(() => {\r\n    const handleActiveViewportChange = viewportId => {\r\n      const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\r\n        viewportId || viewportGridService.getActiveViewportId()\r\n      );\r\n\r\n      if (!displaySetUIDs) {\r\n        return;\r\n      }\r\n\r\n      const isReconstructable =\r\n        displaySetUIDs?.some(displaySetUID => {\r\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetUID);\r\n          return displaySet?.isReconstructable;\r\n        }) || false;\r\n\r\n      if (isReconstructable) {\r\n        setAddSegmentationClassName('');\r\n      } else {\r\n        setAddSegmentationClassName('ohif-disabled');\r\n      }\r\n    };\r\n\r\n    // Handle initial state\r\n    handleActiveViewportChange();\r\n\r\n    const changedGrid = viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED;\r\n    const ready = viewportGridService.EVENTS.VIEWPORTS_READY;\r\n\r\n    const subsGrid = [];\r\n    [ready, changedGrid].forEach(evt => {\r\n      const { unsubscribe } = viewportGridService.subscribe(evt, ({ viewportId }) => {\r\n        handleActiveViewportChange(viewportId);\r\n      });\r\n\r\n      subsGrid.push(unsubscribe);\r\n    });\r\n\r\n    const changedData = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\r\n\r\n    const subsData = [];\r\n    [changedData].forEach(evt => {\r\n      const { unsubscribe } = cornerstoneViewportService.subscribe(evt, () => {\r\n        handleActiveViewportChange();\r\n      });\r\n\r\n      subsData.push(unsubscribe);\r\n    });\r\n\r\n    // Clean up\r\n    return () => {\r\n      subsGrid.forEach(unsub => unsub());\r\n      subsData.forEach(unsub => unsub());\r\n    };\r\n  }, []);\r\n\r\n  const getToolGroupIds = segmentationId => {\r\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\r\n\r\n    return toolGroupIds;\r\n  };\r\n\r\n  const onSegmentationAdd = async () => {\r\n    commandsManager.runCommand('createEmptySegmentationForViewport', {\r\n      viewportId: viewportGridService.getActiveViewportId(),\r\n    });\r\n  };\r\n\r\n  const onSegmentationClick = (segmentationId: string) => {\r\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\r\n  };\r\n\r\n  const onSegmentationDelete = (segmentationId: string) => {\r\n    segmentationService.remove(segmentationId);\r\n  };\r\n\r\n  const onSegmentAdd = segmentationId => {\r\n    segmentationService.addSegment(segmentationId);\r\n  };\r\n\r\n  const onSegmentClick = (segmentationId, segmentIndex) => {\r\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\r\n\r\n    const toolGroupIds = getToolGroupIds(segmentationId);\r\n\r\n    toolGroupIds.forEach(toolGroupId => {\r\n      // const toolGroupId =\r\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\r\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\r\n    });\r\n  };\r\n\r\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n    const segment = segmentation.segments[segmentIndex];\r\n    const { label } = segment;\r\n\r\n    callInputDialog(uiDialogService, label, (label, actionId) => {\r\n      if (label === '') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\r\n    });\r\n  };\r\n\r\n  const onSegmentationEdit = segmentationId => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const { label } = segmentation;\r\n\r\n    callInputDialog(uiDialogService, label, (label, actionId) => {\r\n      if (label === '') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.addOrUpdateSegmentation(\r\n        {\r\n          id: segmentationId,\r\n          label,\r\n        },\r\n        false, // suppress event\r\n        true // notYetUpdatedAtSource\r\n      );\r\n    });\r\n  };\r\n\r\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n    const segment = segmentation.segments[segmentIndex];\r\n    const { color, opacity } = segment;\r\n\r\n    const rgbaColor = {\r\n      r: color[0],\r\n      g: color[1],\r\n      b: color[2],\r\n      a: opacity / 255.0,\r\n    };\r\n\r\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\r\n      if (actionId === 'cancel') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\r\n        newRgbaColor.r,\r\n        newRgbaColor.g,\r\n        newRgbaColor.b,\r\n        newRgbaColor.a * 255.0,\r\n      ]);\r\n    });\r\n  };\r\n\r\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\r\n    segmentationService.removeSegment(segmentationId, segmentIndex);\r\n  };\r\n\r\n  // segment hide\r\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const segmentInfo = segmentation.segments[segmentIndex];\r\n    const isVisible = !segmentInfo.isVisible;\r\n    const toolGroupIds = getToolGroupIds(segmentationId);\r\n\r\n    // Todo: right now we apply the visibility to all tool groups\r\n    toolGroupIds.forEach(toolGroupId => {\r\n      segmentationService.setSegmentVisibility(\r\n        segmentationId,\r\n        segmentIndex,\r\n        isVisible,\r\n        toolGroupId\r\n      );\r\n    });\r\n  };\r\n\r\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\r\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\r\n  };\r\n\r\n  const onToggleSegmentationVisibility = segmentationId => {\r\n    segmentationService.toggleSegmentationVisibility(segmentationId);\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const isVisible = segmentation.isVisible;\r\n    const segments = segmentation.segments;\r\n\r\n    const toolGroupIds = getToolGroupIds(segmentationId);\r\n\r\n    toolGroupIds.forEach(toolGroupId => {\r\n      segments.forEach((segment, segmentIndex) => {\r\n        segmentationService.setSegmentVisibility(\r\n          segmentationId,\r\n          segmentIndex,\r\n          isVisible,\r\n          toolGroupId\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  const _setSegmentationConfiguration = useCallback(\r\n    (segmentationId, key, value) => {\r\n      segmentationService.setConfiguration({\r\n        segmentationId,\r\n        [key]: value,\r\n      });\r\n    },\r\n    [segmentationService]\r\n  );\r\n\r\n  const onSegmentationDownload = segmentationId => {\r\n    commandsManager.runCommand('downloadSegmentation', {\r\n      segmentationId,\r\n    });\r\n  };\r\n\r\n  const storeSegmentation = async segmentationId => {\r\n    const datasources = extensionManager.getActiveDataSource();\r\n\r\n    const displaySetInstanceUIDs = await createReportAsync({\r\n      servicesManager,\r\n      getReport: () =>\r\n        commandsManager.runCommand('storeSegmentation', {\r\n          segmentationId,\r\n          dataSource: datasources[0],\r\n        }),\r\n      reportType: 'Segmentation',\r\n    });\r\n\r\n    // Show the exported report in the active viewport as read only (similar to SR)\r\n    if (displaySetInstanceUIDs) {\r\n      // clear the segmentation that we exported, similar to the storeMeasurement\r\n      // where we remove the measurements and prompt again the user if they would like\r\n      // to re-read the measurements in a SR read only viewport\r\n      segmentationService.remove(segmentationId);\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: viewportGridService.getActiveViewportId(),\r\n        displaySetInstanceUIDs,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onSegmentationDownloadRTSS = segmentationId => {\r\n    commandsManager.runCommand('downloadRTSS', {\r\n      segmentationId,\r\n    });\r\n  };\r\n\r\n  const SegmentationGroupTableComponent =\r\n    components[configuration?.segmentationPanelMode] || SegmentationGroupTable;\r\n  const allowAddSegment = configuration?.addSegment;\r\n  const onSegmentationAddWrapper =\r\n    configuration?.onSegmentationAdd && typeof configuration?.onSegmentationAdd === 'function'\r\n      ? configuration?.onSegmentationAdd\r\n      : onSegmentationAdd;\r\n\r\n  return (\r\n    <SegmentationGroupTableComponent\r\n      title={t('Segmentations')}\r\n      segmentations={segmentations}\r\n      disableEditing={configuration.disableEditing}\r\n      activeSegmentationId={selectedSegmentationId || ''}\r\n      onSegmentationAdd={onSegmentationAddWrapper}\r\n      addSegmentationClassName={addSegmentationClassName}\r\n      showAddSegment={allowAddSegment}\r\n      onSegmentationClick={onSegmentationClick}\r\n      onSegmentationDelete={onSegmentationDelete}\r\n      onSegmentationDownload={onSegmentationDownload}\r\n      onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\r\n      storeSegmentation={storeSegmentation}\r\n      onSegmentationEdit={onSegmentationEdit}\r\n      onSegmentClick={onSegmentClick}\r\n      onSegmentEdit={onSegmentEdit}\r\n      onSegmentAdd={onSegmentAdd}\r\n      onSegmentColorClick={onSegmentColorClick}\r\n      onSegmentDelete={onSegmentDelete}\r\n      onToggleSegmentVisibility={onToggleSegmentVisibility}\r\n      onToggleSegmentLock={onToggleSegmentLock}\r\n      onToggleSegmentationVisibility={onToggleSegmentationVisibility}\r\n      showDeleteSegment={true}\r\n      segmentationConfig={{ initialConfig: segmentationConfiguration }}\r\n      setRenderOutline={value =>\r\n        _setSegmentationConfiguration(selectedSegmentationId, 'renderOutline', value)\r\n      }\r\n      setOutlineOpacityActive={value =>\r\n        _setSegmentationConfiguration(selectedSegmentationId, 'outlineOpacity', value)\r\n      }\r\n      setRenderFill={value =>\r\n        _setSegmentationConfiguration(selectedSegmentationId, 'renderFill', value)\r\n      }\r\n      setRenderInactiveSegmentations={value =>\r\n        _setSegmentationConfiguration(selectedSegmentationId, 'renderInactiveSegmentations', value)\r\n      }\r\n      setOutlineWidthActive={value =>\r\n        _setSegmentationConfiguration(selectedSegmentationId, 'outlineWidthActive', value)\r\n      }\r\n      setFillAlpha={value =>\r\n        _setSegmentationConfiguration(selectedSegmentationId, 'fillAlpha', value)\r\n      }\r\n      setFillAlphaInactive={value =>\r\n        _setSegmentationConfiguration(selectedSegmentationId, 'fillAlphaInactive', value)\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nPanelSegmentation.propTypes = {\r\n  commandsManager: PropTypes.shape({\r\n    runCommand: PropTypes.func.isRequired,\r\n  }),\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      segmentationService: PropTypes.shape({\r\n        getSegmentation: PropTypes.func.isRequired,\r\n        getSegmentations: PropTypes.func.isRequired,\r\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nimport { useAppConfig } from '@state';\r\nimport { Toolbox } from '@ohif/ui';\r\nimport PanelSegmentation from './panels/PanelSegmentation';\r\n\r\nconst getPanelModule = ({\r\n  commandsManager,\r\n  servicesManager,\r\n  extensionManager,\r\n  configuration,\r\n  title,\r\n}: withAppTypes) => {\r\n  const { customizationService } = servicesManager.services;\r\n\r\n  const wrappedPanelSegmentation = configuration => {\r\n    const [appConfig] = useAppConfig();\r\n\r\n    return (\r\n      <PanelSegmentation\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n        configuration={{\r\n          ...configuration,\r\n          disableEditing: appConfig.disableEditing,\r\n          ...customizationService.get('segmentation.panel'),\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedPanelSegmentationWithTools = configuration => {\r\n    const [appConfig] = useAppConfig();\r\n\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          buttonSectionId=\"segmentationToolbox\"\r\n          title=\"Segmentation Tools\"\r\n          configuration={{\r\n            ...configuration,\r\n          }}\r\n        />\r\n        <PanelSegmentation\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          configuration={{\r\n            ...configuration,\r\n            disableEditing: appConfig.disableEditing,\r\n            ...customizationService.get('segmentation.panel'),\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'panelSegmentation',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation',\r\n      component: wrappedPanelSegmentation,\r\n    },\r\n    {\r\n      name: 'panelSegmentationWithTools',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation',\r\n      component: wrappedPanelSegmentationWithTools,\r\n    },\r\n  ];\r\n};\r\n\r\nexport default getPanelModule;\r\n","import { Enums, cache } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Updates the viewports in preparation for rendering segmentations.\r\n * Evaluates each viewport to determine which need modifications,\r\n * then for those viewports, changes them to a volume type and ensures\r\n * they are ready for segmentation rendering.\r\n *\r\n * @param {Object} params - Parameters for the function.\r\n * @param params.viewportId - ID of the viewport to be updated.\r\n * @param params.loadFn - Function to load the segmentation data.\r\n * @param params.servicesManager - The services manager.\r\n * @param params.displaySet -  the display set.\r\n * @param params.initialSliceIndex - The initial slice index.\r\n *\r\n * @returns Returns true upon successful update of viewports for segmentation rendering.\r\n */\r\nasync function updateViewportsForSegmentationRendering({\r\n  viewportId,\r\n  loadFn,\r\n  servicesManager,\r\n  displaySet,\r\n  initialSliceIndex = null,\r\n}: {\r\n  viewportId: string;\r\n  loadFn: () => Promise<string>;\r\n  servicesManager: AppTypes.ServicesManager;\r\n  displaySet?: any;\r\n  initialSliceIndex?: number;\r\n}) {\r\n  const { cornerstoneViewportService, segmentationService, viewportGridService } =\r\n    servicesManager.services;\r\n\r\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n  const targetViewportId = viewport.viewportOptions.viewportId;\r\n\r\n  const referencedDisplaySetInstanceUID =\r\n    displaySet?.referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\r\n\r\n  const updatedViewports = getUpdatedViewportsForSegmentation({\r\n    viewportId,\r\n    servicesManager,\r\n    displaySet,\r\n  });\r\n\r\n  // create Segmentation callback which needs to be waited until\r\n  // the volume is created (if coming from stack)\r\n  const createSegmentationForVolume = async () => {\r\n    const segmentationId = await loadFn();\r\n    segmentationService.hydrateSegmentation(segmentationId);\r\n  };\r\n\r\n  // the reference volume that is used to draw the segmentation. so check if the\r\n  // volume exists in the cache (the target Viewport is already a volume viewport)\r\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\r\n    volumeId.includes(referencedDisplaySetInstanceUID)\r\n  );\r\n\r\n  updatedViewports.forEach(async viewport => {\r\n    viewport.viewportOptions = {\r\n      ...viewport.viewportOptions,\r\n      viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\r\n      needsRerendering: true,\r\n    };\r\n    const viewportId = viewport.viewportId;\r\n\r\n    // maintain the prehydration slice on the target viewport only\r\n    if (viewportId === targetViewportId) {\r\n      viewport.viewportOptions.initialImageOptions = {\r\n        index: initialSliceIndex,\r\n        useOnce: true,\r\n      };\r\n    }\r\n\r\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const prevCamera = csViewport.getCamera();\r\n\r\n    // only run the createSegmentationForVolume for the targetViewportId\r\n    // since the rest will get handled by cornerstoneViewportService\r\n    if ((volumeExists || displaySet.Modality === 'RTSTRUCT') && viewportId === targetViewportId) {\r\n      await createSegmentationForVolume();\r\n      return;\r\n    }\r\n\r\n    const createNewSegmentationWhenVolumeMounts = async evt => {\r\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\r\n        ac.uid.includes(referencedDisplaySetInstanceUID)\r\n      );\r\n\r\n      // Note: make sure to re-grab the viewport since it might have changed\r\n      // during the time it took for the volume to be mounted, for instance\r\n      // the stack viewport has been changed to a volume viewport\r\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      volumeViewport.setCamera(prevCamera);\r\n\r\n      volumeViewport.element.removeEventListener(\r\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n        createNewSegmentationWhenVolumeMounts\r\n      );\r\n\r\n      if (!isTheActiveViewportVolumeMounted) {\r\n        // it means it is one of those other updated viewports so just update the camera\r\n        return;\r\n      }\r\n\r\n      if (viewportId === targetViewportId) {\r\n        await createSegmentationForVolume();\r\n      }\r\n    };\r\n\r\n    csViewport.element.addEventListener(\r\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n      createNewSegmentationWhenVolumeMounts\r\n    );\r\n  });\r\n\r\n  // Set the displaySets for the viewports that require to be updated\r\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n\r\n  return true;\r\n}\r\n\r\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\r\n  const { viewports, activeViewportId } = viewportGridService.getState();\r\n  const targetViewportId = viewportId || activeViewportId;\r\n\r\n  const viewport = viewports.get(targetViewportId);\r\n\r\n  return viewport;\r\n};\r\n\r\n/**\r\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\r\n * This function evaluates viewports based on their compatibility with the provided segmentation's\r\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\r\n *\r\n * @param {Object} params - Parameters for the function.\r\n * @param params.viewportId - the ID of the viewport to be updated.\r\n * @param params.servicesManager - The services manager\r\n * @param params.displaySet -  the display set.\r\n *\r\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\r\n */\r\nfunction getUpdatedViewportsForSegmentation({\r\n  viewportId,\r\n  servicesManager,\r\n  displaySet,\r\n}: withAppTypes) {\r\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\r\n    servicesManager.services;\r\n\r\n  const { viewports, isHangingProtocolLayout } = viewportGridService.getState();\r\n\r\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n  const targetViewportId = viewport.viewportOptions.viewportId;\r\n\r\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\r\n\r\n  const referenceDisplaySetInstanceUID =\r\n    displaySet?.referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\r\n\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\r\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\r\n\r\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n    targetViewportId,\r\n    referenceDisplaySetInstanceUID,\r\n    isHangingProtocolLayout\r\n  );\r\n\r\n  viewports.forEach((viewport, viewportId) => {\r\n    if (\r\n      targetViewportId === viewportId ||\r\n      updatedViewports.find(v => v.viewportId === viewportId)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\r\n      viewport.displaySetInstanceUIDs,\r\n      segmentationFrameOfReferenceUID\r\n    );\r\n\r\n    if (shouldDisplaySeg) {\r\n      updatedViewports.push({\r\n        viewportId,\r\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\r\n        viewportOptions: {\r\n          viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\r\n          needsRerendering: true,\r\n        },\r\n      });\r\n    }\r\n  });\r\n\r\n  return updatedViewports.filter(v => v.viewportOptions?.viewportType !== 'volume3d');\r\n}\r\n\r\nexport {\r\n  updateViewportsForSegmentationRendering,\r\n  getUpdatedViewportsForSegmentation,\r\n  getTargetViewport,\r\n};\r\n","import dcmjs from 'dcmjs';\r\nimport { createReportDialogPrompt } from '@ohif/extension-default';\r\nimport { Types } from '@ohif/core';\r\nimport { cache, metaData } from '@cornerstonejs/core';\r\nimport {\r\n  segmentation as cornerstoneToolsSegmentation,\r\n  Enums as cornerstoneToolsEnums,\r\n  utilities,\r\n} from '@cornerstonejs/tools';\r\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\r\nimport { classes, DicomMetadataStore } from '@ohif/core';\r\n\r\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\r\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\r\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\r\n\r\nimport {\r\n  updateViewportsForSegmentationRendering,\r\n  getUpdatedViewportsForSegmentation,\r\n  getTargetViewport,\r\n} from './utils/hydrationUtils';\r\nconst { segmentation: segmentationUtils } = utilities;\r\n\r\nconst { datasetToBlob } = dcmjs.data;\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\r\n  },\r\n} = adaptersSEG;\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    RTSS: { generateRTSSFromSegmentations },\r\n  },\r\n} = adaptersRT;\r\n\r\nconst { downloadDICOMData } = helpers;\r\n\r\nconst commandsModule = ({\r\n  servicesManager,\r\n  extensionManager,\r\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\r\n  const {\r\n    uiNotificationService,\r\n    segmentationService,\r\n    uiDialogService,\r\n    displaySetService,\r\n    viewportGridService,\r\n    toolGroupService,\r\n    cornerstoneViewportService,\r\n  } = servicesManager.services;\r\n\r\n  const actions = {\r\n    /**\r\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\r\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\r\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.viewportId - the ID of the viewport to be updated.\r\n     * @param params.servicesManager - The services manager\r\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\r\n     *\r\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\r\n     */\r\n    getUpdatedViewportsForSegmentation,\r\n    /**\r\n     * Creates an empty segmentation for a specified viewport.\r\n     * It first checks if the display set associated with the viewport is reconstructable.\r\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\r\n     * for the display set after handling the necessary steps for making the viewport\r\n     * a volume viewport first\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.viewportId - the target viewport ID.\r\n     *\r\n     */\r\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\r\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n      // Todo: add support for multiple display sets\r\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      if (!displaySet.isReconstructable) {\r\n        uiNotificationService.show({\r\n          title: 'Segmentation',\r\n          message: 'Segmentation is not supported for non-reconstructible displaysets yet',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n\r\n      updateViewportsForSegmentationRendering({\r\n        viewportId,\r\n        servicesManager,\r\n        displaySet,\r\n        loadFn: async () => {\r\n          const currentSegmentations = segmentationService.getSegmentations();\r\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\r\n            displaySetInstanceUID,\r\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\r\n          );\r\n\r\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\r\n\r\n          await segmentationService.addSegmentationRepresentationToToolGroup(\r\n            toolGroupId,\r\n            segmentationId\r\n          );\r\n\r\n          // Add only one segment for now\r\n          segmentationService.addSegment(segmentationId, {\r\n            toolGroupId,\r\n            segmentIndex: 1,\r\n            properties: {\r\n              label: 'Segment 1',\r\n            },\r\n          });\r\n\r\n          return segmentationId;\r\n        },\r\n      });\r\n    },\r\n    /**\r\n     * Loads segmentations for a specified viewport.\r\n     * The function prepares the viewport for rendering, then loads the segmentation details.\r\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentations - Array of segmentations to be loaded.\r\n     * @param params.viewportId - the target viewport ID.\r\n     *\r\n     */\r\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\r\n      updateViewportsForSegmentationRendering({\r\n        viewportId,\r\n        servicesManager,\r\n        loadFn: async () => {\r\n          // Todo: handle adding more than one segmentation\r\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\r\n\r\n          const segmentation = segmentations[0];\r\n          const segmentationId = segmentation.id;\r\n          const label = segmentation.label;\r\n          const segments = segmentation.segments;\r\n\r\n          delete segmentation.segments;\r\n\r\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\r\n            segmentationId,\r\n            label,\r\n          });\r\n\r\n          if (segmentation.scalarData) {\r\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\r\n            labelmapVolume.scalarData.set(segmentation.scalarData);\r\n          }\r\n\r\n          segmentationService.addOrUpdateSegmentation(segmentation);\r\n\r\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\r\n          await segmentationService.addSegmentationRepresentationToToolGroup(\r\n            toolGroupId,\r\n            segmentationId\r\n          );\r\n\r\n          segments.forEach(segment => {\r\n            if (segment === null) {\r\n              return;\r\n            }\r\n            segmentationService.addSegment(segmentationId, {\r\n              segmentIndex: segment.segmentIndex,\r\n              toolGroupId,\r\n              properties: {\r\n                color: segment.color,\r\n                label: segment.label,\r\n                opacity: segment.opacity,\r\n                isLocked: segment.isLocked,\r\n                visibility: segment.isVisible,\r\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\r\n              },\r\n            });\r\n          });\r\n\r\n          if (segmentation.centroidsIJK) {\r\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\r\n          }\r\n\r\n          return segmentationId;\r\n        },\r\n      });\r\n    },\r\n    /**\r\n     * Loads segmentation display sets for a specified viewport.\r\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\r\n     * it chooses the appropriate service function to create\r\n     * the segmentation for the display set.\r\n     * The function then prepares the viewport for rendering segmentation.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\r\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\r\n     *\r\n     */\r\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\r\n      // Todo: handle adding more than one segmentation\r\n      const displaySet = displaySets[0];\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n        displaySet.referencedDisplaySetInstanceUID\r\n      );\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      const initialSliceIndex = viewport.getSliceIndex();\r\n\r\n      updateViewportsForSegmentationRendering({\r\n        viewportId,\r\n        servicesManager,\r\n        displaySet,\r\n        loadFn: async () => {\r\n          const segDisplaySet = displaySet;\r\n          const suppressEvents = false;\r\n          const serviceFunction =\r\n            segDisplaySet.Modality === 'SEG'\r\n              ? 'createSegmentationForSEGDisplaySet'\r\n              : 'createSegmentationForRTDisplaySet';\r\n\r\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\r\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\r\n          const segmentation = segmentationService.getSegmentation(segmentationId);\r\n          segmentation.description = `S${referencedDisplaySet.SeriesNumber}: ${referencedDisplaySet.SeriesDescription}`;\r\n          return segmentationId;\r\n        },\r\n        initialSliceIndex,\r\n      });\r\n    },\r\n    /**\r\n     * Generates a segmentation from a given segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * its referenced volume, extracts label maps from the\r\n     * segmentation volume, and produces segmentation data\r\n     * alongside associated metadata.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be generated.\r\n     * @param params.options - Optional configuration for the generation process.\r\n     *\r\n     * @returns Returns the generated segmentation data.\r\n     */\r\n    generateSegmentation: ({ segmentationId, options = {} }) => {\r\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\r\n\r\n      const { referencedVolumeId } = segmentation.representationData.LABELMAP;\r\n\r\n      const segmentationVolume = cache.getVolume(segmentationId);\r\n      const referencedVolume = cache.getVolume(referencedVolumeId);\r\n      const referencedImages = referencedVolume.getCornerstoneImages();\r\n\r\n      const labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\r\n\r\n      // Generate fake metadata as an example\r\n      labelmapObj.metadata = [];\r\n\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      segmentationInOHIF.segments.forEach(segment => {\r\n        // segmentation service already has a color for each segment\r\n        if (!segment) {\r\n          return;\r\n        }\r\n        const segmentIndex = segment.segmentIndex;\r\n        const { label, color } = segment;\r\n\r\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\r\n          color.slice(0, 3).map(value => value / 255)\r\n        ).map(value => Math.round(value));\r\n\r\n        const segmentMetadata = {\r\n          SegmentNumber: segmentIndex.toString(),\r\n          SegmentLabel: label,\r\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\r\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\r\n          RecommendedDisplayCIELabValue,\r\n          SegmentedPropertyCategoryCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n          SegmentedPropertyTypeCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n        };\r\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\r\n      });\r\n\r\n      const generatedSegmentation = generateSegmentation(\r\n        referencedImages,\r\n        labelmapObj,\r\n        metaData,\r\n        options\r\n      );\r\n\r\n      return generatedSegmentation;\r\n    },\r\n    /**\r\n     * Downloads a segmentation based on the provided segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * uses it to generate the corresponding DICOM dataset, which\r\n     * is then downloaded with an appropriate filename.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\r\n     *\r\n     */\r\n    downloadSegmentation: ({ segmentationId }) => {\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      const generatedSegmentation = actions.generateSegmentation({\r\n        segmentationId,\r\n      });\r\n\r\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\r\n    },\r\n    /**\r\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\r\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\r\n     * and in its absence, defaults to 'Research Derived Series'.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be stored.\r\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\r\n     *\r\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\r\n     * otherwise throws an error.\r\n     */\r\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\r\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\r\n        extensionManager,\r\n      });\r\n\r\n      if (promptResult.action !== 1 && promptResult.value) {\r\n        return;\r\n      }\r\n\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      if (!segmentation) {\r\n        throw new Error('No segmentation found');\r\n      }\r\n\r\n      const { label } = segmentation;\r\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\r\n\r\n      const generatedData = actions.generateSegmentation({\r\n        segmentationId,\r\n        options: {\r\n          SeriesDescription,\r\n        },\r\n      });\r\n\r\n      if (!generatedData || !generatedData.dataset) {\r\n        throw new Error('Error during segmentation generation');\r\n      }\r\n\r\n      const { dataset: naturalizedReport } = generatedData;\r\n\r\n      await dataSource.store.dicom(naturalizedReport);\r\n\r\n      // The \"Mode\" route listens for DicomMetadataStore changes\r\n      // When a new instance is added, it listens and\r\n      // automatically calls makeDisplaySets\r\n\r\n      // add the information for where we stored it to the instance as well\r\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\r\n\r\n      DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n      return naturalizedReport;\r\n    },\r\n    /**\r\n     * Converts segmentations into RTSS for download.\r\n     * This sample function retrieves all segentations and passes to\r\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\r\n     * converts dataset to downloadable blob.\r\n     *\r\n     */\r\n    downloadRTSS: ({ segmentationId }) => {\r\n      const segmentations = segmentationService.getSegmentation(segmentationId);\r\n      const vtkUtils = {\r\n        vtkImageMarchingSquares,\r\n        vtkDataArray,\r\n        vtkImageData,\r\n      };\r\n\r\n      const RTSS = generateRTSSFromSegmentations(\r\n        segmentations,\r\n        classes.MetadataProvider,\r\n        DicomMetadataStore,\r\n        cache,\r\n        cornerstoneToolsEnums,\r\n        vtkUtils\r\n      );\r\n\r\n      try {\r\n        const reportBlob = datasetToBlob(RTSS);\r\n\r\n        //Create a URL for the binary.\r\n        const objectUrl = URL.createObjectURL(reportBlob);\r\n        window.location.assign(objectUrl);\r\n      } catch (e) {\r\n        console.warn(e);\r\n      }\r\n    },\r\n    setBrushSize: ({ value, toolNames }) => {\r\n      const brushSize = Number(value);\r\n\r\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\r\n        if (toolNames?.length === 0) {\r\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\r\n        } else {\r\n          toolNames?.forEach(toolName => {\r\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\r\n          });\r\n        }\r\n      });\r\n    },\r\n    setThresholdRange: ({\r\n      value,\r\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\r\n    }) => {\r\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\r\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n        toolNames?.forEach(toolName => {\r\n          toolGroup.setToolConfiguration(toolName, {\r\n            strategySpecificConfiguration: {\r\n              THRESHOLD: {\r\n                threshold: value,\r\n              },\r\n            },\r\n          });\r\n        });\r\n      });\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    getUpdatedViewportsForSegmentation: {\r\n      commandFn: actions.getUpdatedViewportsForSegmentation,\r\n    },\r\n    loadSegmentationDisplaySetsForViewport: {\r\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\r\n    },\r\n    loadSegmentationsForViewport: {\r\n      commandFn: actions.loadSegmentationsForViewport,\r\n    },\r\n    createEmptySegmentationForViewport: {\r\n      commandFn: actions.createEmptySegmentationForViewport,\r\n    },\r\n    generateSegmentation: {\r\n      commandFn: actions.generateSegmentation,\r\n    },\r\n    downloadSegmentation: {\r\n      commandFn: actions.downloadSegmentation,\r\n    },\r\n    storeSegmentation: {\r\n      commandFn: actions.storeSegmentation,\r\n    },\r\n    downloadRTSS: {\r\n      commandFn: actions.downloadRTSS,\r\n    },\r\n    setBrushSize: {\r\n      commandFn: actions.setBrushSize,\r\n    },\r\n    setThresholdRange: {\r\n      commandFn: actions.setThresholdRange,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'SEGMENTATION',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import { id } from './id';\r\nimport React from 'react';\r\n\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getCommandsModule from './commandsModule';\r\nimport { getToolbarModule } from './getToolbarModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\r\n});\r\n\r\nconst OHIFCornerstoneSEGViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule,\r\n  getCommandsModule,\r\n  getToolbarModule,\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneSEGViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\r\n  },\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule,\r\n  getHangingProtocolModule,\r\n};\r\n\r\nexport default extension;\r\n","export function getToolbarModule({ servicesManager }: withAppTypes) {\r\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\r\n  return [\r\n    {\r\n      name: 'evaluate.cornerstone.segmentation',\r\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\r\n        // Todo: we need to pass in the button section Id since we are kind of\r\n        // forcing the button to have black background since initially\r\n        // it is designed for the toolbox not the toolbar on top\r\n        // we should then branch the buttonSectionId to have different styles\r\n        const segmentations = segmentationService.getSegmentations();\r\n        if (!segmentations?.length) {\r\n          return {\r\n            disabled: true,\r\n            className: '!text-common-bright !bg-black opacity-50',\r\n            disabledText: disabledText ?? 'No segmentations available',\r\n          };\r\n        }\r\n\r\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\r\n\r\n        if (!toolGroup) {\r\n          return {\r\n            disabled: true,\r\n            className: '!text-common-bright ohif-disabled',\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        const toolName = toolbarService.getToolNameForButton(button);\r\n\r\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\r\n          return {\r\n            disabled: true,\r\n            className: '!text-common-bright ohif-disabled',\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        const isPrimaryActive = toolNames\r\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\r\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\r\n\r\n        return {\r\n          disabled: false,\r\n          className: isPrimaryActive\r\n            ? '!text-black !bg-primary-light hover:bg-primary-light hover-text-black hover:cursor-pointer'\r\n            : '!text-common-bright !bg-black hover:bg-primary-light hover:cursor-pointer hover:text-black',\r\n          // Todo: isActive right now is used for nested buttons where the primary\r\n          // button needs to be fully rounded (vs partial rounded) when active\r\n          // otherwise it does not have any other use\r\n          isActive: isPrimaryActive,\r\n        };\r\n      },\r\n    },\r\n  ];\r\n}\r\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","CONSTANTS","overlappingSegments","show","title","message","type","duration","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","SegmentationPanelMode","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","components","Expanded","SegmentationGroupTableExpanded","Dropdown","SegmentationGroupTable","PanelSegmentation","commandsManager","configuration","viewportGridService","cornerstoneViewportService","t","useTranslation","selectedSegmentationId","setSelectedSegmentationId","useState","addSegmentationClassName","setAddSegmentationClassName","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","segmentations","setSegmentations","getSegmentations","useEffect","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","handleActiveViewportChange","viewportId","displaySetUIDs","getDisplaySetsUIDsForViewport","getActiveViewportId","some","displaySetUID","getDisplaySetByUID","changedGrid","ACTIVE_VIEWPORT_ID_CHANGED","ready","VIEWPORTS_READY","subsGrid","changedData","VIEWPORT_DATA_CHANGED","subsData","getToolGroupIds","segmentationId","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","useCallback","setConfiguration","SegmentationGroupTableComponent","segmentationPanelMode","allowAddSegment","addSegment","onSegmentationAddWrapper","onSegmentationAdd","runCommand","disableEditing","activeSegmentationId","showAddSegment","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","datasources","getActiveDataSource","displaySetInstanceUIDs","createReportAsync","getReport","dataSource","reportType","setDisplaySetsForViewport","onSegmentationEdit","segmentation","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","segmentIndex","setActiveSegment","jumpToSegmentCenter","onSegmentEdit","segment","setSegmentLabel","onSegmentAdd","onSegmentColorClick","opacity","r","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","onSegmentDelete","removeSegment","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onToggleSegmentationVisibility","toggleSegmentationVisibility","showDeleteSegment","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","propTypes","PropTypes","isRequired","getPanelModule","customizationService","iconName","iconLabel","component","appConfig","useAppConfig","get","Toolbox","buttonSectionId","updateViewportsForSegmentationRendering","loadFn","initialSliceIndex","viewport","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentationForVolume","hydrateSegmentation","volumeExists","Array","from","_volumeCache","volumeId","includes","needsRerendering","initialImageOptions","index","useOnce","csViewport","getCornerstoneViewport","prevCamera","getCamera","createNewSegmentationWhenVolumeMounts","isTheActiveViewportVolumeMounted","volumeActors","find","ac","uid","volumeViewport","setCamera","element","removeEventListener","VOLUME_VIEWPORT_NEW_VOLUME","setDisplaySetsForViewports","activeViewportId","getState","hangingProtocolService","isHangingProtocolLayout","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","FrameOfReferenceUID","getViewportsRequireUpdate","v","shouldRenderSegmentation","filter","segmentationUtils","utilities","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","toolGroupService","createEmptySegmentationForViewport","currentSegmentations","createSegmentationForDisplaySet","addSegmentationRepresentationToToolGroup","loadSegmentationsForViewport","scalarData","getLabelmapVolume","set","isLocked","visibility","active","activeSegmentIndex","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","getSliceIndex","serviceFunction","boundFn","bind","description","options","cornerstoneToolsSegmentation","representationData","LABELMAP","segmentationVolume","getCornerstoneImages","labelmapObj","metadata","rgb2DICOMLAB","slice","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","algorithmType","SegmentAlgorithmName","algorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","segmentationInOHIF","generatedSegmentation","dataset","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","DicomMetadataStore","addInstances","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","window","location","e","warn","setBrushSize","toolNames","brushSize","Number","setBrushSizeForToolGroup","toolName","setThresholdRange","toolGroup","getToolGroup","setToolConfiguration","strategySpecificConfiguration","THRESHOLD","threshold","definitions","commandFn","defaultContext","Component","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","toolbarService","evaluate","button","disabledText","disabled","getToolGroupForViewport","getToolNameForButton","hasTool","isPrimaryActive","getActivePrimaryMouseButtonTool","isActive","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}