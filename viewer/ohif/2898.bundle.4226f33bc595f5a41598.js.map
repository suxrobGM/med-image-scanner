{"version":3,"file":"2898.bundle.4226f33bc595f5a41598.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-pmap/src/utils/initPMAPToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-pmap/src/viewports/OHIFCornerstonePMAPViewport.tsx"],"sourcesContent":["function createPMAPToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\r\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nexport default createPMAPToolGroupAndAddTools;\r\n","import PropTypes from 'prop-types';\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport createPMAPToolGroupAndAddTools from '../utils/initPMAPToolGroup';\r\n\r\nconst PMAP_TOOLGROUP_BASE_NAME = 'PMAPToolGroup';\r\n\r\nfunction OHIFCornerstonePMAPViewport(props: withAppTypes) {\r\n  const { displaySets, viewportOptions, displaySetOptions, servicesManager, extensionManager } =\r\n    props;\r\n  const viewportId = viewportOptions.viewportId;\r\n  const { displaySetService, toolGroupService, customizationService } = servicesManager.services;\r\n  const toolGroupId = `${PMAP_TOOLGROUP_BASE_NAME}-${viewportId}`;\r\n\r\n  // PMAP viewport will always have a single display set\r\n  if (displaySets.length !== 1) {\r\n    throw new Error('PMAP viewport must have a single display set');\r\n  }\r\n\r\n  const pmapDisplaySet = displaySets[0];\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const referencedDisplaySetRef = useRef(null);\r\n  const { viewports, activeViewportId } = viewportGrid;\r\n  const referencedDisplaySet = pmapDisplaySet.getReferenceDisplaySet();\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet,\r\n    pmapDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    displaySetOptions.unshift({});\r\n    const [pmapDisplaySetOptions] = displaySetOptions;\r\n\r\n    // Make sure `options` exists\r\n    pmapDisplaySetOptions.options = pmapDisplaySetOptions.options ?? {};\r\n\r\n    Object.assign(pmapDisplaySetOptions.options, {\r\n      colormap: {\r\n        name: 'rainbow',\r\n        opacity: [\r\n          { value: 0, opacity: 0.5 },\r\n          { value: 1, opacity: 1 },\r\n        ],\r\n      },\r\n    });\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        // Referenced + PMAP displaySets must be passed as parameter in this order\r\n        displaySets={[referencedDisplaySet, pmapDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: 'volume',\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n        }}\r\n        displaySetOptions={[{}, pmapDisplaySetOptions]}\r\n      ></Component>\r\n    );\r\n  }, [\r\n    extensionManager,\r\n    displaySetOptions,\r\n    props,\r\n    pmapDisplaySet,\r\n    toolGroupId,\r\n    viewportOptions.orientation,\r\n    viewportOptions.viewportId,\r\n  ]);\r\n\r\n  // Cleanup the PMAP viewport when the viewport is destroyed\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, [activeViewportId, displaySetService, viewportGridService, viewports]);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    // This creates a custom tool group which has the lifetime of this view only\r\n    toolGroup = createPMAPToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\r\n\r\n    return () => toolGroupService.destroyToolGroup(toolGroupId);\r\n  }, [customizationService, toolGroupId, toolGroupService]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {getCornerstoneViewport()}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstonePMAPViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, pmapDisplaySet) {\r\n  const { SharedFunctionalGroupsSequence } = pmapDisplaySet.instance;\r\n\r\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\r\n    ? SharedFunctionalGroupsSequence[0]\r\n    : SharedFunctionalGroupsSequence;\r\n\r\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\r\n\r\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\r\n    ? PixelMeasuresSequence[0]\r\n    : PixelMeasuresSequence;\r\n\r\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness || SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstonePMAPViewport;\r\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","OHIFCornerstonePMAPViewport","props","displaySets","viewportOptions","displaySetOptions","servicesManager","extensionManager","viewportId","displaySetService","toolGroupService","services","length","Error","pmapDisplaySet","viewportGrid","viewportGridService","useViewportGrid","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","getCornerstoneViewport","useCallback","component","Component","getModuleEntry","unshift","pmapDisplaySetOptions","options","Object","assign","colormap","name","opacity","value","React","_extends","viewportType","orientation","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","includes","displaySetInstanceUID","setDisplaySetsForViewport","unsubscribe","toolGroup","getToolGroup","createPMAPToolGroupAndAddTools","destroyToolGroup","className","propTypes","PropTypes","isRequired","dataSource","children"],"sourceRoot":""}