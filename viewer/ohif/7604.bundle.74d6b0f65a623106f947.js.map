{"version":3,"file":"7604.bundle.74d6b0f65a623106f947.js","mappings":"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","sources":["webpack:///../../../node_modules/dicomweb-client/src/message.js","webpack:///../../../node_modules/dicomweb-client/src/api.js","webpack:///../../../node_modules/dicomweb-client/src/version.js","webpack:///../../../node_modules/dicomweb-client/src/dicomweb-client.js"],"sourcesContent":["/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should\n                   be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted\n                   (defaults to length of array)\n * @returns {String}\n */\nfunction uint8ArrayToString(arr, offset = 0, limit) {\n  const itemLimit = limit || arr.length - offset;\n  let str = '';\n  for (let i = offset; i < offset + itemLimit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n  return str;\n}\n\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\nfunction stringToUint8Array(str) {\n  const arr = new Uint8Array(str.length);\n  for (let i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n  return arr;\n}\n\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\nfunction identifyBoundary(header) {\n  const parts = header.split('\\r\\n');\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === '--') {\n      return parts[i];\n    }\n  }\n\n  return null;\n}\n\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {Number} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\nfunction containsToken(message, token, offset = 0) {\n  if (offset + token.length > message.length) {\n    return false;\n  }\n\n  let index = offset;\n  for (let i = 0; i < token.length; i++) {\n    if (token[i] !== message[index]) {\n      return false;\n    }\n\n    index += 1;\n  }\n  return true;\n}\n\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {String} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\nfunction findToken(message, token, offset = 0, maxSearchLength) {\n  let searchLength = message.length;\n  if (maxSearchLength) {\n    searchLength = Math.min(offset + maxSearchLength, message.length);\n  }\n\n  for (let i = offset; i < searchLength; i++) {\n    // If the first value of the message matches\n    // the first value of the token, check if\n    // this is the full token.\n    if (message[i] === token[0]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Create a random GUID\n *\n * @return {string}\n */\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * @typedef {Object} MultipartEncodedData\n * @property {ArrayBuffer} data The encoded Multipart Data\n * @property {String} boundary The boundary used to divide pieces of the encoded data\n */\n\n/**\n * Encode one or more DICOM datasets into a single body so it can be\n * sent using the Multipart Content-Type.\n *\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the\n                          multipart body, passed as ArrayBuffers.\n * @param {String} [boundary] Optional string to define a boundary between each part\n                              of the multipart body. If this is not specified, a random\n                              GUID will be generated.\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This\n                                  contains both the data itself, and the boundary string\n                                  used to divide it.\n */\nfunction multipartEncode(\n  datasets,\n  boundary = guid(),\n  contentType = 'application/dicom',\n) {\n  const contentTypeString = `Content-Type: ${contentType}`;\n  const header = `\\r\\n--${boundary}\\r\\n${contentTypeString}\\r\\n\\r\\n`;\n  const footer = `\\r\\n--${boundary}--`;\n  const headerArray = stringToUint8Array(header);\n  const footerArray = stringToUint8Array(footer);\n  const headerLength = headerArray.length;\n  const footerLength = footerArray.length;\n\n  let length = 0;\n\n  // Calculate the total length for the final array\n  const contentArrays = datasets.map(datasetBuffer => {\n    const contentArray = new Uint8Array(datasetBuffer);\n    const contentLength = contentArray.length;\n\n    length += headerLength + contentLength + footerLength;\n\n    return contentArray;\n  });\n\n  // Allocate the array\n  const multipartArray = new Uint8Array(length);\n\n  // Set the initial header\n  multipartArray.set(headerArray, 0);\n\n  // Write each dataset into the multipart array\n  let position = 0;\n  contentArrays.forEach(contentArray => {\n    multipartArray.set(headerArray, position);\n    multipartArray.set(contentArray, position + headerLength);\n\n    position += headerLength + contentArray.length;\n  });\n\n  multipartArray.set(footerArray, position);\n\n  return {\n    data: multipartArray.buffer,\n    boundary,\n  };\n}\n\n/**\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n *\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n * @returns {Array} The content\n */\nfunction multipartDecode(response) {\n  // Use the raw data if it is provided in an appropriate format\n  const message = ArrayBuffer.isView(response) ? response : new Uint8Array(response);\n\n  /* Set a maximum length to search for the header boundaries, otherwise\n       findToken can run for a long time\n    */\n  const maxSearchLength = 1000;\n\n  // First look for the multipart mime header\n  const separator = stringToUint8Array('\\r\\n\\r\\n');\n  const headerIndex = findToken(message, separator, 0, maxSearchLength);\n  if (headerIndex === -1) {\n    throw new Error('Response message has no multipart mime header');\n  }\n\n  const header = uint8ArrayToString(message, 0, headerIndex);\n  const boundaryString = identifyBoundary(header);\n  if (!boundaryString) {\n    throw new Error('Header of response message does not specify boundary');\n  }\n\n  const boundary = stringToUint8Array(boundaryString);\n  const boundaryLength = boundary.length;\n  const components = [];\n\n  let offset = boundaryLength;\n\n  // Loop until we cannot find any more boundaries\n  let boundaryIndex;\n\n  while (boundaryIndex !== -1) {\n    // Search for the next boundary in the message, starting\n    // from the current offset position\n    boundaryIndex = findToken(message, boundary, offset);\n\n    // If no further boundaries are found, stop here.\n    if (boundaryIndex === -1) {\n      break;\n    }\n\n    const headerTokenIndex = findToken(\n      message,\n      separator,\n      offset,\n      maxSearchLength,\n    );\n    if (headerTokenIndex === -1) {\n      throw new Error('Response message part has no mime header');\n    }\n    offset = headerTokenIndex + separator.length;\n\n    // Extract data from response message, excluding \"\\r\\n\"\n    const spacingLength = 2;\n    const data = response.slice(offset, boundaryIndex - spacingLength);\n\n    // Add the data to the array of results\n    components.push(data);\n\n    // Move the offset to the end of the current section,\n    // plus the identified boundary\n    offset = boundaryIndex + boundaryLength;\n  }\n\n  return components;\n}\n\nexport {\n  containsToken,\n  findToken,\n  identifyBoundary,\n  uint8ArrayToString,\n  stringToUint8Array,\n  multipartEncode,\n  multipartDecode,\n  guid,\n};\n","import { multipartEncode, multipartDecode } from './message.js';\n\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj !== null;\n}\n\nfunction isEmptyObject(obj) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nfunction areValidRequestHooks(requestHooks) {\n  const isValid =\n    Array.isArray(requestHooks) &&\n    requestHooks.every(\n      requestHook =>\n        typeof requestHook === 'function' && requestHook.length === 2,\n    );\n\n  if (!isValid) {\n    console.warn(\n      'Request hooks should have the following signature: ' +\n        'function requestHook(request, metadata) { return request; }',\n    );\n  }\n\n  return isValid;\n}\n\nconst getFirstResult = result => result[0];\n\nconst MEDIATYPES = {\n  DICOM: 'application/dicom',\n  DICOM_JSON: 'application/dicom+json',\n  OCTET_STREAM: 'application/octet-stream',\n  PDF: 'application/pdf',\n  JPEG: 'image/jpeg',\n  PNG: 'image/png',\n};\n\n/**\n * debugLog is a function that can be called with console.log arguments, and will\n * be conditionally displayed, only when debug logging is enabled.\n */\nlet debugLog = () => {};\n\n/**\n * @typedef { import(\"../types/types\").InstanceMetadata } InstanceMetadata\n */\n\n/**\n * A callback with the request instance and metadata information\n * of the currently request being executed that should necessarily\n * return the given request optionally modified.\n * @typedef {function} RequestHook\n * @param {XMLHttpRequest} request - The original XMLHttpRequest instance.\n * @param {object} metadata - The metadata used by the request.\n */\n\n/**\n * Class for interacting with DICOMweb RESTful services.\n */\nclass DICOMwebClient {\n  /**\n   * @constructor\n   * @param {Object} options\n   * @param {String} options.url - URL of the DICOMweb RESTful Service endpoint\n   * @param {String=} options.qidoURLPrefix - URL path prefix for QIDO-RS\n   * @param {String=} options.wadoURLPrefix - URL path prefix for WADO-RS\n   * @param {String=} options.stowURLPrefix - URL path prefix for STOW-RS\n   * @param {String=} options.username - Username\n   * @param {String=} options.password - Password\n   * @param {Object=} options.headers - HTTP headers\n   * @param {Array.<RequestHook>=} options.requestHooks - Request hooks.\n   * @param {Object=} options.verbose - print to console request warnings and errors, default true\n   * @param {Object=} options.debug - print to the console debug level information/status updates.\n   * @param {boolean|String} options.singlepart - retrieve singlepart for the named types.\n   * The available types are:  bulkdata, video, image.  true means all.\n   */\n  constructor(options) {\n    this.baseURL = options.url;\n    if (!this.baseURL) {\n      console.error('no DICOMweb base url provided - calls that require a URL will fail');\n    }\n\n    if ('username' in options) {\n      this.username = options.username;\n      if (!('password' in options)) {\n        console.error(\n          'no password provided to authenticate with DICOMweb service',\n        );\n      }\n      this.password = options.password;\n    }\n\n    if ('qidoURLPrefix' in options) {\n      debugLog(`use URL prefix for QIDO-RS: ${options.qidoURLPrefix}`);\n      this.qidoURL = `${this.baseURL}/${options.qidoURLPrefix}`;\n    } else {\n      this.qidoURL = this.baseURL;\n    }\n\n    if ('wadoURLPrefix' in options) {\n      debugLog(`use URL prefix for WADO-RS: ${options.wadoURLPrefix}`);\n      this.wadoURL = `${this.baseURL}/${options.wadoURLPrefix}`;\n    } else {\n      this.wadoURL = this.baseURL;\n    }\n\n    if ('stowURLPrefix' in options) {\n      debugLog(`use URL prefix for STOW-RS: ${options.stowURLPrefix}`);\n      this.stowURL = `${this.baseURL}/${options.stowURLPrefix}`;\n    } else {\n      this.stowURL = this.baseURL;\n    }\n\n    if (options.singlepart) {\n      debugLog('use singlepart', options.singlepart);\n      this.singlepart = options.singlepart === true ? 'bulkdata,video,image' : options.singlepart;\n    } else {\n      this.singlepart = '';\n    }\n\n    if ('requestHooks' in options) {\n      this.requestHooks = options.requestHooks;\n    }\n\n    // Headers to pass to requests.\n    this.headers = options.headers || {};\n\n    // Optional error interceptor callback to handle any failed request.\n    this.errorInterceptor = options.errorInterceptor || (() => undefined);\n\n    // Verbose - print to console request warnings and errors, default true\n    this.verbose = options.verbose !== false;\n\n    this.setDebug(options.debug);\n \n\n  }\n\n  /**\n   * Allows setting the debug log information. \n   * Note this is different from verbose in that verbose is whether to include warning/error information, defaulting to true\n   * \n   * @param {boolean} debugLevel \n   * @param {function} debugLogFunction to call with the debug output arguments. \n   */\n  setDebug(debugLevel = false, debugLogFunction = null) {\n    this.debugLevel = !!debugLevel;\n    debugLog = debugLogFunction || debugLevel ? console.log : () => {};\n  }\n\n  /**\n   * Gets debug flag\n   * \n   * @returns true if debug logging is enabled\n   */\n  getDebug() {\n    return this.debugLevel;\n  }\n \n  /**\n   * Sets verbose flag.\n   *\n   * @param {Boolean} verbose\n   */\n  setVerbose(verbose) {\n    this.verbose = verbose;\n  }\n\n  /**\n   * Gets verbose flag.\n   *\n   * @return {Boolean} verbose\n   */\n  getVerbose() {\n    return this.verbose;\n  }\n\n  static _parseQueryParameters(params = {}) {\n    let queryString = '?';\n    Object.keys(params).forEach((key, index) => {\n      if (index !== 0) {\n        queryString += '&';\n      }\n      queryString += `${key}=${encodeURIComponent(params[key])}`;\n    });\n    return queryString;\n  }\n\n  /**\n   * Performs an HTTP request.\n   *\n   * @param {String} url\n   * @param {String} method\n   * @param {Object} headers\n   * @param {Object} options\n   * @param {Array.<RequestHook>} options.requestHooks - Request hooks.\n   * @param {XMLHttpRequest} [options.request] - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\n   * @return {*}\n   * @private\n   */\n  _httpRequest(url, method, headers = {}, options = {}) {\n    const { errorInterceptor, requestHooks } = this;\n\n    return new Promise((resolve, reject) => {\n      let request = options.request ? options.request : new XMLHttpRequest();\n\n      request.open(method, url, true);\n      if ('responseType' in options) {\n        request.responseType = options.responseType;\n      }\n\n      if (typeof headers === 'object') {\n        Object.keys(headers).forEach(key => {\n          request.setRequestHeader(key, headers[key]);\n        });\n      }\n\n      // now add custom headers from the user\n      // (e.g. access tokens)\n      const userHeaders = this.headers;\n      Object.keys(userHeaders).forEach(key => {\n        request.setRequestHeader(key, userHeaders[key]);\n      });\n\n      // Event triggered when upload starts\n      request.onloadstart = function onloadstart() {\n        debugLog('upload started: ', url)\n      };\n\n      // Event triggered when upload ends\n      request.onloadend = function onloadend() {\n        debugLog('upload finished')\n      };\n\n      // Handle response message\n      request.onreadystatechange = () => {\n        if (request.readyState === 4) {\n          if (request.status === 200) {\n            const contentType = request.getResponseHeader('Content-Type');\n            // Automatically distinguishes between multipart and singlepart in an array buffer, and\n            // converts them into a consistent type.\n            if (contentType && contentType.indexOf('multipart') !== -1) {\n              resolve(multipartDecode(request.response));\n            } else if (request.responseType === 'arraybuffer') {\n              resolve([request.response]);\n            } else {\n              resolve(request.response);\n            }\n          } else if (request.status === 202) {\n            if (this.verbose) {\n              console.warn('some resources already existed: ', request);\n            }\n            resolve(request.response);\n          } else if (request.status === 204) {\n            if (this.verbose) {\n              console.warn('empty response for request: ', request);\n            }\n            resolve([]);\n          } else {\n            const error = new Error('request failed');\n            error.request = request;\n            error.response = request.response;\n            error.status = request.status;\n            if (this.verbose) {\n              console.error('request failed: ', request);\n              console.error(error);\n              console.error(error.response);\n            }\n\n            errorInterceptor(error);\n\n            reject(error);\n          }\n        }\n      };\n\n      // Event triggered while download progresses\n      if ('progressCallback' in options) {\n        if (typeof options.progressCallback === 'function') {\n          request.onprogress = options.progressCallback;\n        }\n      }\n\n      if (requestHooks && areValidRequestHooks(requestHooks)) {\n        const combinedHeaders = Object.assign({}, headers, this.headers);\n        const metadata = { method, url, headers: combinedHeaders };\n        const pipeRequestHooks = functions => args =>\n          functions.reduce((props, fn) => fn(props, metadata), args);\n        const pipedRequest = pipeRequestHooks(requestHooks);\n        request = pipedRequest(request);\n      }\n\n      // Add withCredentials to request if needed\n      if ('withCredentials' in options) {\n        if (options.withCredentials) {\n          request.withCredentials = true;\n        }\n      }\n\n      if ('data' in options) {\n        request.send(options.data);\n      } else {\n        request.send();\n      }\n    });\n  }\n\n  /**\n   * Performs an HTTP GET request.\n   *\n   * @param {String} url\n   * @param {Object} headers\n   * @param {Object} responseType\n   * @param {Function} progressCallback\n   * @return {*}\n   * @private\n   */\n  _httpGet(url, headers, responseType, progressCallback, withCredentials) {\n    return this._httpRequest(url, 'get', headers, {\n      responseType,\n      progressCallback,\n      withCredentials,\n    });\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with application/json\n   * media type.\n   *\n   * @param {String} url\n   * @param {Object} params\n   * @param {Function} progressCallback\n   * @return {*}\n   * @private\n   */\n  _httpGetApplicationJson(url, params = {}, progressCallback, withCredentials) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n    const headers = { Accept: MEDIATYPES.DICOM_JSON };\n    const responseType = 'json';\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      responseType,\n      progressCallback,\n      withCredentials,\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with application/pdf\n   * media type.\n   *\n   * @param {String} url\n   * @param {Object} params\n   * @param {Function} progressCallback\n   * @return {*}\n   * @private\n   */\n  _httpGetApplicationPdf(url, params = {}, progressCallback, withCredentials) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n    const headers = { Accept: MEDIATYPES.PDF };\n    const responseType = 'json';\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      responseType,\n      progressCallback,\n      withCredentials,\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with an image\n   media type.\n   *\n   * @param {String} url\n   * @param {Object[]} mediaTypes\n   * @param {Object} params\n   * @param {Function} progressCallback\n   * @return {*}\n   * @private\n   */\n  _httpGetImage(\n    url,\n    mediaTypes,\n    params = {},\n    progressCallback,\n    withCredentials,\n  ) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n\n    const supportedMediaTypes = [\n      'image/',\n      'image/*',\n      'image/jpeg',\n      'image/jp2',\n      'image/gif',\n      'image/png',\n    ];\n\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n    const headers = { Accept: acceptHeaderFieldValue };\n    const responseType = 'arraybuffer';\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      responseType,\n      progressCallback,\n      withCredentials,\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with a text\n   media type.\n   *\n   * @param {String} url\n   * @param {Object[]} mediaTypes\n   * @param {Object} params\n   * @param {Function} progressCallback\n   * @return {*}\n   * @private\n   */\n  _httpGetText(\n    url,\n    mediaTypes,\n    params = {},\n    progressCallback,\n    withCredentials,\n  ) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n\n    const supportedMediaTypes = [\n      'text/',\n      'text/*',\n      'text/html',\n      'text/plain',\n      'text/rtf',\n      'text/xml',\n    ];\n\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n    const headers = { Accept: acceptHeaderFieldValue };\n    const responseType = 'arraybuffer';\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      responseType,\n      progressCallback,\n      withCredentials,\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with a video\n   media type.\n   *\n   * @param {String} url\n   * @param {Object[]} mediaTypes\n   * @param {Object} params\n   * @param {Function} progressCallback\n   * @return {*}\n   * @private\n   */\n  _httpGetVideo(\n    url,\n    mediaTypes,\n    params = {},\n    progressCallback,\n    withCredentials,\n  ) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n\n    const supportedMediaTypes = [\n      'video/',\n      'video/*',\n      'video/mpeg',\n      'video/mp4',\n      'video/H265',\n    ];\n\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n    const headers = { Accept: acceptHeaderFieldValue };\n    const responseType = 'arraybuffer';\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      responseType,\n      progressCallback,\n      withCredentials,\n    );\n  }\n\n  /**\n   * Asserts that a given media type is valid.\n   *\n   * @params {String} mediaType media type\n   */\n  static _assertMediaTypeIsValid(mediaType) {\n    if (!mediaType) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n\n    const sepIndex = mediaType.indexOf('/');\n    if (sepIndex === -1) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n\n    const mediaTypeType = mediaType.slice(0, sepIndex);\n    const types = ['application', 'image', 'text', 'video'];\n    if (!types.includes(mediaTypeType)) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n\n    if (mediaType.slice(sepIndex + 1).includes('/')) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message with an image media type.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Array} byteRange - Start and end of byte range\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Boolean} rendered - Whether resource should be requested using rendered media types\n   * @param {Function} progressCallback\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartImage(\n    url,\n    mediaTypes,\n    byteRange,\n    params,\n    rendered = false,\n    progressCallback,\n    withCredentials,\n  ) {\n    const headers = {};\n    let supportedMediaTypes;\n    if (rendered) {\n      supportedMediaTypes = [\n        'image/jpeg',\n        'image/gif',\n        'image/png',\n        'image/jp2',\n      ];\n    } else {\n      supportedMediaTypes = {\n        '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\n        '1.2.840.10008.1.2.4.50': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.51': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.57': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.70': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.90': ['image/jp2'],\n        '1.2.840.10008.1.2.4.91': ['image/jp2'],\n        '1.2.840.10008.1.2.4.92': ['image/jpx'],\n        '1.2.840.10008.1.2.4.93': ['image/jpx'],\n      };\n\n      if (byteRange) {\n        headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n      }\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message with a video media type.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Array} byteRange - Start and end of byte range\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Boolean} rendered - Whether resource should be requested using rendered media types\n   * @param {Function} progressCallback\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartVideo(\n    url,\n    mediaTypes,\n    byteRange,\n    params,\n    rendered = false,\n    progressCallback,\n    withCredentials,\n  ) {\n    const headers = {};\n    let supportedMediaTypes;\n    if (rendered) {\n      supportedMediaTypes = [\n        'video/',\n        'video/*',\n        'video/mpeg2',\n        'video/mp4',\n        'video/H265',\n      ];\n    } else {\n      supportedMediaTypes = {\n        '1.2.840.10008.1.2.4.100': ['video/mpeg2'],\n        '1.2.840.10008.1.2.4.101': ['video/mpeg2'],\n        '1.2.840.10008.1.2.4.102': ['video/mp4'],\n        '1.2.840.10008.1.2.4.103': ['video/mp4'],\n        '1.2.840.10008.1.2.4.104': ['video/mp4'],\n        '1.2.840.10008.1.2.4.105': ['video/mp4'],\n        '1.2.840.10008.1.2.4.106': ['video/mp4'],\n      };\n\n      if (byteRange) {\n        headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n      }\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message\n   * with a application/dicom media type.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Function} progressCallback\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartApplicationDicom(\n    url,\n    mediaTypes,\n    params,\n    progressCallback,\n    withCredentials,\n  ) {\n    const headers = {};\n    const defaultMediaType = 'application/dicom';\n    const supportedMediaTypes = {\n      '1.2.840.10008.1.2.1': [defaultMediaType],\n      '1.2.840.10008.1.2.5': [defaultMediaType],\n      '1.2.840.10008.1.2.4.50': [defaultMediaType],\n      '1.2.840.10008.1.2.4.51': [defaultMediaType],\n      '1.2.840.10008.1.2.4.57': [defaultMediaType],\n      '1.2.840.10008.1.2.4.70': [defaultMediaType],\n      '1.2.840.10008.1.2.4.80': [defaultMediaType],\n      '1.2.840.10008.1.2.4.81': [defaultMediaType],\n      '1.2.840.10008.1.2.4.90': [defaultMediaType],\n      '1.2.840.10008.1.2.4.91': [defaultMediaType],\n      '1.2.840.10008.1.2.4.92': [defaultMediaType],\n      '1.2.840.10008.1.2.4.93': [defaultMediaType],\n      '1.2.840.10008.1.2.4.100': [defaultMediaType],\n      '1.2.840.10008.1.2.4.101': [defaultMediaType],\n      '1.2.840.10008.1.2.4.102': [defaultMediaType],\n      '1.2.840.10008.1.2.4.103': [defaultMediaType],\n      '1.2.840.10008.1.2.4.104': [defaultMediaType],\n      '1.2.840.10008.1.2.4.105': [defaultMediaType],\n      '1.2.840.10008.1.2.4.106': [defaultMediaType],\n    };\n\n    let acceptableMediaTypes = mediaTypes;\n    if (!mediaTypes) {\n      acceptableMediaTypes = [{ mediaType: defaultMediaType }];\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      acceptableMediaTypes,\n      supportedMediaTypes,\n    );\n\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message\n   * with a application/octet-stream, OR any of the equivalencies for that (eg\n   * application/pdf etc)\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Array} byteRange start and end of byte range\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Function} progressCallback\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartApplicationOctetStream(\n    url,\n    mediaTypes,\n    byteRange,\n    params,\n    progressCallback,\n    withCredentials,\n  ) {\n    const headers = {};\n    const defaultMediaType = 'application/octet-stream';\n    const supportedMediaTypes = {\n      '1.2.840.10008.1.2.1': [...Object.values(MEDIATYPES)],\n    };\n\n    let acceptableMediaTypes = mediaTypes;\n    if (!mediaTypes) {\n      acceptableMediaTypes = [{ mediaType: defaultMediaType }];\n    }\n\n    if (byteRange) {\n      headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      acceptableMediaTypes,\n      supportedMediaTypes,\n    );\n\n    return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\n  }\n\n  /**\n   * Performs an HTTP POST request.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object} headers - HTTP header fields\n   * @param {Array} data - Data that should be stored\n   * @param {Function} progressCallback\n   * @param {Function} progressCallback\n   * @param {XMLHttpRequest} request - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\n   * @private\n   * @returns {Promise} Response\n   */\n  _httpPost(url, headers, data, progressCallback, withCredentials, request) {\n    return this._httpRequest(url, 'post', headers, {\n      data,\n      progressCallback,\n      withCredentials,\n      request,\n    });\n  }\n\n  /**\n   * Performs an HTTP POST request with content-type application/dicom+json.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object} headers - HTTP header fields\n   * @param {Array} data - Data that should be stored\n   * @param {Function} progressCallback\n   * @private\n   * @returns {Promise} Response\n   */\n  _httpPostApplicationJson(url, data, progressCallback, withCredentials) {\n    const headers = { 'Content-Type': MEDIATYPES.DICOM_JSON };\n    return this._httpPost(\n      url,\n      headers,\n      data,\n      progressCallback,\n      withCredentials,\n    );\n  }\n\n  /**\n   * Parses media type and extracts its type and subtype.\n   *\n   * @param {String} mediaType - HTTP media type (e.g. image/jpeg)\n   * @private\n   * @returns {String[]} Media type and subtype\n   */\n  static _parseMediaType(mediaType) {\n    DICOMwebClient._assertMediaTypeIsValid(mediaType);\n\n    return mediaType.split('/');\n  }\n\n  /**\n   * Builds an accept header field value for HTTP GET request messages.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types\n   * @param {Object[]} supportedMediaTypes - Supported media types\n   * @return {*}\n   * @private\n   */\n  static _buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes) {\n    if (!Array.isArray(mediaTypes)) {\n      throw new Error('Acceptable media types must be provided as an Array');\n    }\n\n    const fieldValueParts = mediaTypes.map(item => {\n      const { mediaType } = item;\n\n      DICOMwebClient._assertMediaTypeIsValid(mediaType);\n      if (!supportedMediaTypes.includes(mediaType)) {\n        throw new Error(\n          `Media type ${mediaType} is not supported for requested resource`,\n        );\n      }\n\n      return mediaType;\n    });\n\n    return fieldValueParts.join(', ');\n  }\n\n  /**\n   * Builds an accept header field value for HTTP GET multipart request\n   * messages.  Will throw an exception if no media types are found which are acceptable,\n   * but will only log a verbose level message when types are specified which are\n   * not acceptable.  This allows requesting several types with having to know\n   * whether they are all acceptable or not.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types\n   * @param {Object[]} supportedMediaTypes - Supported media types\n   * @private\n   */\n  static _buildMultipartAcceptHeaderFieldValue(\n    mediaTypes,\n    supportedMediaTypes,\n  ) {\n    if (!Array.isArray(mediaTypes)) {\n      throw new Error('Acceptable media types must be provided as an Array');\n    }\n\n    if (!Array.isArray(supportedMediaTypes) && !isObject(supportedMediaTypes)) {\n      throw new Error(\n        'Supported media types must be provided as an Array or an Object',\n      );\n    }\n\n    const fieldValueParts = [];\n\n    mediaTypes.forEach(item => {\n      const { transferSyntaxUID, mediaType } = item;\n      DICOMwebClient._assertMediaTypeIsValid(mediaType);\n      let fieldValue = `multipart/related; type=\"${mediaType}\"`;\n\n      if (isObject(supportedMediaTypes)) {\n        // SupportedMediaTypes is a lookup table that maps Transfer Syntax UID\n        // to one or more Media Types\n        if (\n          !Object.values(supportedMediaTypes)\n            .flat(1)\n            .includes(mediaType)\n        ) {\n          if (!mediaType.endsWith('/*') || !mediaType.endsWith('/')) {\n            debugLog(\n              `Media type ${mediaType} is not supported for requested resource`,\n            );\n            return;\n          }\n        }\n\n        if (transferSyntaxUID) {\n          if (transferSyntaxUID !== '*') {\n            if (!Object.keys(supportedMediaTypes).includes(transferSyntaxUID)) {\n              throw new Error(\n                `Transfer syntax ${transferSyntaxUID} is not supported for requested resource`,\n              );\n            }\n\n            const expectedMediaTypes = supportedMediaTypes[transferSyntaxUID];\n\n            if (!expectedMediaTypes.includes(mediaType)) {\n              const actualType = DICOMwebClient._parseMediaType(mediaType)[0];\n              expectedMediaTypes.map(expectedMediaType => {\n                const expectedType = DICOMwebClient._parseMediaType(\n                  expectedMediaType,\n                )[0];\n                const haveSameType = actualType === expectedType;\n\n                if (\n                  haveSameType &&\n                  (mediaType.endsWith('/*') || mediaType.endsWith('/'))\n                ) {\n                  return;\n                }\n\n                throw new Error(\n                  `Transfer syntax ${transferSyntaxUID} is not supported for requested resource`,\n                );\n              });\n            }\n          }\n\n          fieldValue += `; transfer-syntax=${transferSyntaxUID}`;\n        }\n      } else if (\n        Array.isArray(supportedMediaTypes) &&\n        !supportedMediaTypes.includes(mediaType)\n      ) {\n        if( this.verbose ) {\n          console.warn(\n            `Media type ${mediaType} is not supported for requested resource`,\n          );\n        }\n        return;\n      }\n\n      fieldValueParts.push(fieldValue);\n    });\n\n    if( !fieldValueParts.length ) {\n      throw new Error(`No acceptable media types found among ${JSON.stringify(mediaTypes)}`);\n    }\n\n    return fieldValueParts.join(', ');\n  }\n\n  /**\n   * Builds a range header field value for HTTP GET request messages.\n   *\n   * @param {Array} byteRange - Start and end of byte range\n   * @returns {String} Range header field value\n   * @private\n   */\n  static _buildRangeHeaderFieldValue(byteRange = []) {\n    if (byteRange.length === 1) {\n      return `bytes=${byteRange[0]}-`;\n    }\n    if (byteRange.length === 2) {\n      return `bytes=${byteRange[0]}-${byteRange[1]}`;\n    }\n\n    return 'bytes=0-';\n  }\n\n  /**\n   * Gets types that are shared among acceptable media types.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @private\n   * @returns {String[]} Types that are shared among acceptable media types\n   */\n  static _getSharedMediaTypes(mediaTypes) {\n    const types = new Set();\n\n    if (!mediaTypes || !mediaTypes.length) {\n      return types;\n    }\n\n    mediaTypes.forEach(item => {\n      const { mediaType } = item;\n      const type = DICOMwebClient._parseMediaType(mediaType)[0];\n      types.add(`${type}/`);\n    });\n\n    return Array.from(types);\n  }\n\n  /**\n   * Gets common base type of acceptable media types and asserts that only\n   one type is specified. For example, ``(\"image/jpeg\", \"image/jp2\")``\n   will pass, but ``(\"image/jpeg\", \"video/mpeg2\")`` will raise an\n   exception.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @private\n   * @returns {String[]} Common media type, eg `image/` for the above example.\n   */\n  static _getCommonMediaType(mediaTypes) {\n    if (!mediaTypes || !mediaTypes.length) {\n      throw new Error('No acceptable media types provided');\n    }\n\n    const sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\n    if (sharedMediaTypes.length === 0) {\n      throw new Error('No common acceptable media type could be identified.');\n    } else if (sharedMediaTypes.length > 1) {\n      throw new Error('Acceptable media types must have the same type.');\n    }\n\n    return sharedMediaTypes[0];\n  }\n\n  /**\n   * Searches for DICOM studies.\n   *\n   * @param {Object} options\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @return {Object[]} Study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n   */\n  searchForStudies(options = {}) {\n    debugLog('search for studies');\n    let withCredentials = false;\n    let url = `${this.qidoURL}/studies`;\n    if ('queryParams' in options) {\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\n  }\n\n  /**\n   * Retrieves metadata for a DICOM study.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\n                      belonging to the study\n   */\n  retrieveStudyMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of study metadata',\n      );\n    }\n    debugLog(`retrieve metadata of study ${options.studyInstanceUID}`);\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/metadata`;\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\n  }\n\n  /**\n   * Searches for DICOM series.\n   *\n   * @param {Object} options\n   * @param {Object} [options.studyInstanceUID] - Study Instance UID\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @returns {Object[]} Series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n   */\n  searchForSeries(options = {}) {\n    let url = this.qidoURL;\n    if ('studyInstanceUID' in options) {\n      debugLog(`search series of study ${options.studyInstanceUID}`);\n      url += `/studies/${options.studyInstanceUID}`;\n    }\n    url += '/series';\n    if ('queryParams' in options) {\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\n  }\n\n  /**\n   * Retrieves metadata for a DICOM series.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\n                      belonging to the series\n   */\n  retrieveSeriesMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of series metadata',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of series metadata',\n      );\n    }\n\n    debugLog(`retrieve metadata of series ${options.seriesInstanceUID}`);\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/metadata`;\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\n  }\n\n  /**\n   * Searches for DICOM Instances.\n   *\n   * @param {Object} options\n   * @param {String} [options.studyInstanceUID] - Study Instance UID\n   * @param {String} [options.seriesInstanceUID] - Series Instance UID\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @returns {Object[]} Instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n   */\n  searchForInstances(options = {}) {\n    let url = this.qidoURL;\n    let withCredentials = false;\n    if ('studyInstanceUID' in options) {\n      url += `/studies/${options.studyInstanceUID}`;\n      if ('seriesInstanceUID' in options) {\n        debugLog(\n          `search for instances of series ${options.seriesInstanceUID}`,\n        );\n        url += `/series/${options.seriesInstanceUID}`;\n      } else {\n        debugLog(\n          `search for instances of study ${options.studyInstanceUID}`,\n        );\n      }\n    } else {\n      debugLog('search for instances');\n    }\n    url += '/instances';\n    if ('queryParams' in options) {\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\n  }\n\n  /** Returns a WADO-URI URL for an instance\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @returns {String} WADO-URI URL\n   */\n  buildInstanceWadoURIUrl(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required.');\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required.');\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required.');\n    }\n\n    const contentType = options.contentType || MEDIATYPES.DICOM;\n    const transferSyntax = options.transferSyntax || '*';\n    const params = [];\n\n    params.push('requestType=WADO');\n    params.push(`studyUID=${options.studyInstanceUID}`);\n    params.push(`seriesUID=${options.seriesInstanceUID}`);\n    params.push(`objectUID=${options.sopInstanceUID}`);\n    params.push(`contentType=${contentType}`);\n    params.push(`transferSyntax=${transferSyntax}`);\n\n    const paramString = params.join('&');\n\n    return `${this.wadoURL}?${paramString}`;\n  }\n\n  /**\n   * Retrieves metadata for a DICOM Instance.\n   *\n   * @param {Object} options object\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @returns {Promise<InstanceMetadata>} metadata elements in DICOM JSON format\n   */\n  retrieveInstanceMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of instance metadata',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of instance metadata',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of instance metadata',\n      );\n    }\n    debugLog(`retrieve metadata of instance ${options.sopInstanceUID}`);\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/metadata`;\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\n  }\n\n  /**\n   * Retrieves frames for a DICOM Instance.\n   * @param {Object} options options object\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\n   * @returns {Array} frame items as byte arrays of the pixel data element\n   */\n  retrieveInstanceFrames(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of instance frames',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of instance frames',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of instance frames',\n      );\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error(\n        'frame numbers are required for retrieval of instance frames',\n      );\n    }\n    debugLog(\n      `retrieve frames ${options.frameNumbers.toString()} of instance ${\n        options.sopInstanceUID\n      }`,\n    );\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\n      options.seriesInstanceUID\n    }/instances/${\n      options.sopInstanceUID\n    }/frames/${options.frameNumbers.toString()}`;\n\n    const { mediaTypes } = options;\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n\n    let progressCallback = false;\n    if ('progressCallback' in options) {\n      progressCallback = options.progressCallback;\n    }\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationOctetStream(\n        url,\n        false,\n        false,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    const sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\n    if (sharedMediaTypes.length > 1) {\n      /**\n       * Enable request of frames that are stored either compressed\n       * (image/* media type) or uncompressed (application/octet-stream\n       * media type).\n       */\n      const supportedMediaTypes = {\n        '1.2.840.10008.1.2.1': ['application/octet-stream'],\n        '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\n        '1.2.840.10008.1.2.4.50': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.51': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.57': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.70': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.90': ['image/jp2'],\n        '1.2.840.10008.1.2.4.91': ['image/jp2'],\n        '1.2.840.10008.1.2.4.92': ['image/jpx'],\n        '1.2.840.10008.1.2.4.93': ['image/jpx'],\n        '1.2.840.10008.1.2.4.201': ['image/jhc'],\n        '1.2.840.10008.1.2.4.202': ['image/jhc'],\n      };\n\n      const headers = {\n        Accept: DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n          mediaTypes,\n          supportedMediaTypes,\n        ),\n      };\n      return this._httpGet(url, headers, 'arraybuffer', progressCallback, withCredentials);\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n\n    if (commonMediaType.startsWith('application')) {\n      return this._httpGetMultipartApplicationOctetStream(\n        url,\n        mediaTypes,\n        false,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetMultipartImage(\n        url,\n        mediaTypes,\n        false,\n        false,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n    if (commonMediaType.startsWith('video')) {\n      return this._httpGetMultipartVideo(\n        url,\n        mediaTypes,\n        false,\n        false,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of frames.`,\n    );\n  }\n\n /**\n * Element in mediaTypes parameter\n * @typedef {Object} MediaType\n * @param {String} [MediaType.mediaType] - ie 'image/jpeg', 'image/png'...\n */\n\n  /**\n   * Retrieves an individual, server-side rendered DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @returns {Promise<ArrayBuffer>} Rendered DICOM Instance\n   */\n  retrieveInstanceRendered(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance',\n      );\n    }\n\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/rendered`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n\n    let progressCallback = false;\n    if ('progressCallback' in options) {\n      progressCallback = options.progressCallback;\n    }\n\n    if (!mediaTypes) {\n      const responseType = 'arraybuffer';\n      if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(\n        url,\n        headers,\n        responseType,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n    if (commonMediaType.startsWith('video')) {\n      return this._httpGetVideo(\n        url,\n        mediaTypes,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n    if (commonMediaType.startsWith('text')) {\n      return this._httpGetText(\n        url,\n        mediaTypes,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n    if (commonMediaType === MEDIATYPES.PDF) {\n      return this._httpGetApplicationPdf(\n        url,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered instance.',\n    );\n  }\n\n  /**\n   * Retrieves a thumbnail of an DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @returns {ArrayBuffer} Thumbnail\n   */\n  retrieveInstanceThumbnail(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance',\n      );\n    }\n\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/thumbnail`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n\n    let progressCallback = false;\n    if ('progressCallback' in options) {\n      progressCallback = options.progressCallback;\n    }\n\n    if (!mediaTypes) {\n      const responseType = 'arraybuffer';\n      if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(\n        url,\n        headers,\n        responseType,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered instance.',\n    );\n  }\n\n  /**\n   * Retrieves rendered frames for a DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n   */\n  retrieveInstanceFramesRendered(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error(\n        'frame numbers are required for retrieval of rendered instance frames',\n      );\n    }\n\n    debugLog(\n      `retrieve rendered frames ${options.frameNumbers.toString()} of instance ${\n        options.sopInstanceUID\n      }`,\n    );\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\n      options.seriesInstanceUID\n    }/instances/${\n      options.sopInstanceUID\n    }/frames/${options.frameNumbers.toString()}/rendered`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n    let progressCallback = false;\n    if ('progressCallback' in options) {\n      progressCallback = options.progressCallback;\n    }\n\n    if (!mediaTypes) {\n      const responseType = 'arraybuffer';\n      if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(url, headers, responseType, false, withCredentials);\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n    if (commonMediaType.startsWith('video')) {\n      return this._httpGetVideo(\n        url,\n        mediaTypes,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered frame.',\n    );\n  }\n\n  /**\n   * Retrieves thumbnail of frames for a DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n   */\n  retrieveInstanceFramesThumbnail(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error(\n        'frame numbers are required for retrieval of rendered instance frames',\n      );\n    }\n\n    console.debug(\n      `retrieve rendered frames ${options.frameNumbers.toString()} of instance ${\n        options.sopInstanceUID\n      }`,\n    );\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\n      options.seriesInstanceUID\n    }/instances/${\n      options.sopInstanceUID\n    }/frames/${options.frameNumbers.toString()}/thumbnail`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n\n    let progressCallback = false;\n    if ('progressCallback' in options) {\n      progressCallback = options.progressCallback;\n    }\n\n    if (!mediaTypes) {\n      const responseType = 'arraybuffer';\n      if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(\n        url,\n        headers,\n        responseType,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered frame.',\n    );\n  }\n\n  /**\n   * Retrieves a DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @returns {Promise<ArrayBuffer>} DICOM Part 10 file as Arraybuffer\n   */\n  retrieveInstance(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required');\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required');\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required');\n    }\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}`;\n\n    const { mediaTypes } = options;\n    const { withCredentials = false } = options;\n    const { progressCallback = false } = options;\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        false,\n        false,\n        progressCallback,\n        withCredentials,\n      ).then(getFirstResult);\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType === MEDIATYPES.DICOM) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        mediaTypes,\n        false,\n        progressCallback,\n        withCredentials,\n      ).then(getFirstResult);\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of instance.`,\n    );\n  }\n\n  /**\n   * Retrieves all DICOM Instances of a Series.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {Function} options.progressCallback\n   * @returns {Promise<ArrayBuffer[]>} DICOM Instances\n   */\n  retrieveSeries(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required');\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required');\n    }\n\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}`;\n\n    const { mediaTypes } = options;\n    let withCredentials = false;\n    if ('withCredentials' in options) {\n      if (options.withCredentials) {\n        withCredentials = options.withCredentials;\n      }\n    }\n\n    let progressCallback = false;\n    if ('progressCallback' in options) {\n      progressCallback = options.progressCallback;\n    }\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        false,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType === MEDIATYPES.DICOM) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        mediaTypes,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of series.`,\n    );\n  }\n\n  /**\n   * Retrieves all DICOM Instances of a Study.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @returns {ArrayBuffer[]} DICOM Instances\n   */\n  retrieveStudy(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required');\n    }\n\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}`;\n\n    const { mediaTypes } = options;\n    const { withCredentials = false } = options;\n    const { progressCallback = false } = options;\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        false,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType === MEDIATYPES.DICOM) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        mediaTypes,\n        false,\n        progressCallback,\n        withCredentials,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of study.`,\n    );\n  }\n\n  /**\n   * Retrieves and parses BulkData from a BulkDataURI location.\n   * Decodes the multipart encoded data and returns the resulting data\n   * as an ArrayBuffer.\n   *\n   * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\n   *\n   * @param {Object} options\n   * @param {string} options.BulkDataURI to retrieve\n   * @param {Array}  options.mediaTypes to use to fetch the URI\n   * @param {string} options.byteRange to request a sub-range (only valid on single part)\n   * @returns {Promise<Array>} Bulkdata parts\n   */\n  retrieveBulkData(options) {\n    if (!('BulkDataURI' in options)) {\n      throw new Error('BulkDataURI is required.');\n    }\n\n    const url = options.BulkDataURI;\n    const { mediaTypes, byteRange } = options;\n    const { withCredentials = false } = options;\n    const { progressCallback = false } = options;\n\n    if (this.singlepart.indexOf('bulkdata') !== -1) {\n      return this._httpGet(url, options.headers, 'arraybuffer', null, withCredentials);\n    }\n\n    if (mediaTypes) {\n      try {\n        const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n\n        if (commonMediaType==='image/') {\n          return this._httpGetMultipartImage(\n            url,\n            mediaTypes,\n            byteRange,\n            false,\n            false,\n            progressCallback,\n            withCredentials,\n          );\n        }\n      } catch(e) {\n        // No-op - this happens sometimes if trying to fetch the specific desired type but want to fallback to octet-stream\n      }\n    }\n\n    // Just use the media types provided\n    return this._httpGetMultipartApplicationOctetStream(\n      url,\n      mediaTypes,\n      byteRange,\n      false,\n      progressCallback,\n      withCredentials,\n    );\n  }\n\n  /**\n   * Stores DICOM Instances.\n   *\n   * @param {Object} options\n   * @param {ArrayBuffer[]} options.datasets - DICOM Instances in PS3.10 format\n   * @param {String} [options.studyInstanceUID] - Study Instance UID\n   * @param {XMLHttpRequest} [options.request] - if specified, the request to use, otherwise one will be created; useful for adding custom upload and abort listeners/objects\n   * @returns {Promise} Response message\n   */\n  storeInstances(options) {\n    if (!('datasets' in options)) {\n      throw new Error('datasets are required for storing');\n    }\n\n    let url = `${this.stowURL}/studies`;\n    if ('studyInstanceUID' in options) {\n      url += `/${options.studyInstanceUID}`;\n    }\n\n    const { data, boundary } = multipartEncode(options.datasets);\n    const headers = {\n      'Content-Type': `multipart/related; type=\"application/dicom\"; boundary=\"${boundary}\"`,\n    };\n    const { withCredentials = false } = options;\n    return this._httpPost(\n      url,\n      headers,\n      data,\n      options.progressCallback,\n      withCredentials,\n      options.request,\n    );\n  }\n\n  \n}\n\n\nexport { DICOMwebClient };\nexport default DICOMwebClient;\n","export default '0.5.2';\n","import { DICOMwebClient } from './api.js';\nimport {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri,\n} from './utils.js';\n\nconst api = {\n  DICOMwebClient,\n};\nconst utils = {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri,\n};\n\nexport { default as version } from './version.js';\n\nexport { api, utils };\n"],"names":["stringToUint8Array","str","arr","Uint8Array","length","i","j","charCodeAt","containsToken","message","token","offset","index","findToken","maxSearchLength","searchLength","Math","min","multipartEncode","datasets","boundary","s4","floor","random","toString","substring","guid","contentTypeString","header","footer","headerArray","footerArray","headerLength","footerLength","contentArrays","map","datasetBuffer","contentArray","contentLength","multipartArray","set","position","forEach","data","buffer","multipartDecode","response","ArrayBuffer","isView","separator","headerIndex","Error","itemLimit","String","fromCharCode","uint8ArrayToString","boundaryString","parts","split","substr","identifyBoundary","boundaryIndex","boundaryLength","components","headerTokenIndex","slice","push","isObject","obj","isEmptyObject","Object","keys","constructor","getFirstResult","result","MEDIATYPES","DICOM","DICOM_JSON","OCTET_STREAM","PDF","JPEG","PNG","debugLog","api","DICOMwebClient","options","this","baseURL","url","console","error","username","password","qidoURLPrefix","qidoURL","wadoURLPrefix","wadoURL","stowURLPrefix","stowURL","singlepart","requestHooks","headers","errorInterceptor","verbose","setDebug","debug","debugLevel","debugLogFunction","log","method","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","key","setRequestHeader","functions","userHeaders","onloadstart","onloadend","onreadystatechange","readyState","status","contentType","getResponseHeader","indexOf","warn","progressCallback","onprogress","isValid","Array","isArray","every","requestHook","areValidRequestHooks","combinedHeaders","assign","metadata","pipedRequest","args","reduce","props","fn","withCredentials","send","_httpRequest","params","urlWithQueryParams","_parseQueryParameters","Accept","_httpGet","mediaTypes","_buildAcceptHeaderFieldValue","byteRange","supportedMediaTypes","Range","_buildRangeHeaderFieldValue","_buildMultipartAcceptHeaderFieldValue","defaultMediaType","acceptableMediaTypes","mediaType","values","_httpPost","queryParams","_httpGetApplicationJson","studyInstanceUID","seriesInstanceUID","transferSyntax","sopInstanceUID","paramString","join","frameNumbers","_httpGetMultipartApplicationOctetStream","_getSharedMediaTypes","commonMediaType","_getCommonMediaType","startsWith","_httpGetMultipartImage","_httpGetMultipartVideo","_httpGetImage","_httpGetVideo","_httpGetText","_httpGetApplicationPdf","_httpGetMultipartApplicationDicom","then","BulkDataURI","e","queryString","encodeURIComponent","sepIndex","mediaTypeType","includes","_assertMediaTypeIsValid","item","fieldValueParts","transferSyntaxUID","fieldValue","flat","endsWith","expectedMediaTypes","actualType","_parseMediaType","expectedMediaType","expectedType","JSON","stringify","types","Set","type","add","from","sharedMediaTypes"],"sourceRoot":""}