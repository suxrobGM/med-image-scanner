{"version":3,"file":"1994.bundle.37b982eea804136350b1.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.ts","webpack:///../../../extensions/measurement-tracking/src/_shared/getNextSRSeriesNumber.js","webpack:///../../../extensions/measurement-tracking/src/_shared/PROMPT_RESPONSES.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptSaveReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptLabelAnnotation.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    activeViewportId: null,\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    labellingOnly: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            actions: ['setPreviousState'],\r\n          },\r\n        ],\r\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n        UPDATE_ACTIVE_VIEWPORT_ID: {\r\n          actions: assign({\r\n            activeViewportId: (_, event) => event.activeViewportId,\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'isLabelOnMeasureAndShouldKillMachine',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptLabelAnnotation: {\r\n      invoke: {\r\n        src: 'promptLabelAnnotation',\r\n        onDone: [\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'wasLabellingOnly',\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            cond: 'wasIdle',\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'wasTrackingAndIsNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'wasTrackingAndIsNewSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            cond: 'wasTracking',\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n    setPreviousState: assign((ctx, evt, meta) => {\r\n      return {\r\n        prevState: meta.state.value,\r\n      };\r\n    }),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    wasLabellingOnly: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'labellingOnly';\r\n    },\r\n    wasIdle: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'idle';\r\n    },\r\n    wasTracking: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'tracking';\r\n    },\r\n    wasTrackingAndIsNewStudy: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        ctx.trackedStudy !== evt.data.StudyInstanceUID\r\n      );\r\n    },\r\n    wasTrackingAndIsNewSeries: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        !ctx.trackedSeries.includes(evt.data.SeriesInstanceUID)\r\n      );\r\n    },\r\n\r\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration, RESPONSE };\r\n","import { ButtonEnums } from '@ohif/ui';\r\nimport i18n from 'i18next';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const appConfig = extensionManager._appConfig;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = appConfig?.disableConfirmationPrompts\r\n      ? RESPONSE.SET_STUDY_AND_SERIES\r\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: ButtonEnums.type.secondary,\r\n        text: i18n.t('Common:No'),\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: ButtonEnums.type.secondary,\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: ButtonEnums.type.primary,\r\n        text: i18n.t('Common:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'prompt-begin-tracking-yes');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = await _askShouldAddMeasurements(UIViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to add this measurement to the existing report?';\r\n    const actions = [\r\n      {\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'Cancel',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message =\r\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","import i18n from 'i18next';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }: withAppTypes, ctx, evt) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(uiViewportDialogService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\r\n    const actions = [\r\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: i18n.t('MeasurementTable:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.SET_STUDY_AND_SERIES);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message =\r\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","const MIN_SR_SERIES_NUMBER = 4700;\r\n\r\nexport default function getNextSRSeriesNumber(displaySetService) {\r\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\r\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\r\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\r\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\r\n\r\n  return maxSeriesNumber + 1;\r\n}\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nexport default RESPONSE;\r\n","import { createReportAsync, createReportDialogPrompt } from '@ohif/extension-default';\r\nimport getNextSRSeriesNumber from '../../_shared/getNextSRSeriesNumber';\r\nimport RESPONSE from '../../_shared/PROMPT_RESPONSES';\r\n\r\nasync function promptSaveReport({ servicesManager, commandsManager, extensionManager }, ctx, evt) {\r\n  const { uiDialogService, measurementService, displaySetService } = servicesManager.services;\r\n  const viewportId = evt.viewportId === undefined ? evt.data.viewportId : evt.viewportId;\r\n  const isBackupSave = evt.isBackupSave === undefined ? evt.data.isBackupSave : evt.isBackupSave;\r\n  const StudyInstanceUID = evt?.data?.StudyInstanceUID;\r\n  const SeriesInstanceUID = evt?.data?.SeriesInstanceUID;\r\n\r\n  const { trackedStudy, trackedSeries } = ctx;\r\n  let displaySetInstanceUIDs;\r\n\r\n  try {\r\n    const promptResult = await createReportDialogPrompt(uiDialogService, {\r\n      extensionManager,\r\n    });\r\n\r\n    if (promptResult.action === RESPONSE.CREATE_REPORT) {\r\n      const dataSources = extensionManager.getDataSources();\r\n      const dataSource = dataSources[0];\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements\r\n        .filter(\r\n          m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n        )\r\n        .filter(m => m.referencedImageId != null);\r\n\r\n      const SeriesDescription =\r\n        // isUndefinedOrEmpty\r\n        promptResult.value === undefined || promptResult.value === ''\r\n          ? 'Research Derived Series' // default\r\n          : promptResult.value; // provided value\r\n\r\n      const SeriesNumber = getNextSRSeriesNumber(displaySetService);\r\n\r\n      const getReport = async () => {\r\n        return commandsManager.runCommand(\r\n          'storeMeasurements',\r\n          {\r\n            measurementData: trackedMeasurements,\r\n            dataSource,\r\n            additionalFindingTypes: ['ArrowAnnotate'],\r\n            options: {\r\n              SeriesDescription,\r\n              SeriesNumber,\r\n            },\r\n          },\r\n          'CORNERSTONE_STRUCTURED_REPORT'\r\n        );\r\n      };\r\n      displaySetInstanceUIDs = await createReportAsync({\r\n        servicesManager,\r\n        getReport,\r\n      });\r\n    } else if (promptResult.action === RESPONSE.CANCEL) {\r\n      // Do nothing\r\n    }\r\n\r\n    return {\r\n      userResponse: promptResult.action,\r\n      createdDisplaySetInstanceUIDs: displaySetInstanceUIDs,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave,\r\n    };\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default promptSaveReport;\r\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nfunction promptHydrateStructuredReport({ servicesManager, extensionManager, appConfig }, ctx, evt) {\r\n  const { uiViewportDialogService, displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n  return new Promise(async function (resolve, reject) {\r\n    const promptResult = appConfig?.disableConfirmationPrompts\r\n      ? RESPONSE.HYDRATE_REPORT\r\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    // Need to do action here... So we can set state...\r\n    let StudyInstanceUID, SeriesInstanceUIDs;\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\r\n      console.warn('!! HYDRATING STRUCTURED REPORT');\r\n      const hydrationResult = hydrateStructuredReport(\r\n        { servicesManager, extensionManager, appConfig },\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to continue tracking measurements for this study?';\r\n    const actions = [\r\n      {\r\n        id: 'no-hydrate',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'yes-hydrate',\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.HYDRATE_REPORT);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport(\r\n  { servicesManager, extensionManager, appConfig }: withAppTypes,\r\n  ctx,\r\n  evt\r\n) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager, appConfig },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","function promptLabelAnnotation({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { measurementService, customizationService } = servicesManager.services;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID, measurementId } = evt;\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n  const { showLabelAnnotationPopup } = utilityModule.exports;\r\n  return new Promise(async function (resolve) {\r\n    const labelConfig = customizationService.get('measurementLabels');\r\n    const measurement = measurementService.getMeasurement(measurementId);\r\n    const value = await showLabelAnnotationPopup(\r\n      measurement,\r\n      servicesManager.services.uiDialogService,\r\n      labelConfig\r\n    );\r\n\r\n    measurementService.update(\r\n      measurementId,\r\n      {\r\n        ...value,\r\n      },\r\n      true\r\n    );\r\n\r\n    resolve({\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptLabelAnnotation;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport { machineConfiguration, defaultOptions, RESPONSE } from './measurementTrackingMachine';\r\nimport promptBeginTracking from './promptBeginTracking';\r\nimport promptTrackNewSeries from './promptTrackNewSeries';\r\nimport promptTrackNewStudy from './promptTrackNewStudy';\r\nimport promptSaveReport from './promptSaveReport';\r\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\nimport { useAppConfig } from '@state';\r\nimport promptLabelAnnotation from './promptLabelAnnotation';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }: withAppTypes, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportId, viewports } = viewportGrid;\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    customizationService,\r\n    cornerstoneViewportService,\r\n  } = servicesManager.services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        activeViewportId,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn('Could not find image index for tracked measurement, using 0');\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    jumpToSameImageInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      const trackedMeasurement = trackedMeasurements[0];\r\n      const referencedDisplaySetUID = trackedMeasurement.displaySetInstanceUID;\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n      const imageIndex = viewport.getCurrentImageIdIndex();\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportId: evt.data.viewportId,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const measurementIds = measurements.map(fm => fm.uid);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTracking.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptSaveReport: promptSaveReport.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptLabelAnnotation: promptLabelAnnotation.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n  });\r\n  machineOptions.guards = Object.assign({}, machineOptions.guards, {\r\n    isLabelOnMeasure: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.get('measurementLabels');\r\n      return labelConfig?.labelOnMeasure;\r\n    },\r\n    isLabelOnMeasureAndShouldKillMachine: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.get('measurementLabels');\r\n      return evt.data && evt.data.userResponse === RESPONSE.NO_NEVER && labelConfig?.labelOnMeasure;\r\n    },\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = Machine(machineConfiguration, machineOptions);\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\r\n    measurementTrackingMachine\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Update the state machine with the active viewport ID\r\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\r\n      activeViewportId,\r\n    });\r\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    const triggerPromptHydrateFlow = async () => {\r\n      if (viewports.size > 0) {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n\r\n        if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n          return;\r\n        }\r\n\r\n        // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n        // tracking fusion viewports yet. This should change when we do.\r\n        const { displaySetService } = servicesManager.services;\r\n        const displaySet = displaySetService.getDisplaySetByUID(\r\n          activeViewport.displaySetInstanceUIDs[0]\r\n        );\r\n\r\n        if (!displaySet) {\r\n          return;\r\n        }\r\n\r\n        // If this is an SR produced by our SR SOPClassHandler,\r\n        // and it hasn't been loaded yet, do that now so we\r\n        // can check if it can be rehydrated or not.\r\n        //\r\n        // Note: This happens:\r\n        // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n        // - If the displaySet has never been hung\r\n        //\r\n        // Otherwise, the displaySet will be loaded by the useEffect handler\r\n        // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n        // The issue here is that this handler in TrackedMeasurementsContext\r\n        // ends up occurring before the Viewport is created, so the displaySet\r\n        // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          !displaySet.isLoaded &&\r\n          displaySet.load\r\n        ) {\r\n          await displaySet.load();\r\n        }\r\n\r\n        // Magic string\r\n        // load function added by our sopClassHandler module\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          displaySet.isRehydratable === true\r\n        ) {\r\n          console.log('sending event...', trackedMeasurements);\r\n          sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\r\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n            viewportId: activeViewportId,\r\n          });\r\n        }\r\n      }\r\n    };\r\n    triggerPromptHydrateFlow();\r\n  }, [\r\n    trackedMeasurements,\r\n    activeViewportId,\r\n    sendTrackedMeasurementsEvent,\r\n    servicesManager.services,\r\n    viewports,\r\n  ]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  appConfig: PropTypes.object,\r\n};\r\n\r\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  });\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport PropTypes from 'prop-types';\r\nimport { utils } from '@ohif/core';\r\nimport { StudyBrowser, useImageViewer, useViewportGrid, Dialog, ButtonEnums } from '@ohif/ui';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\n\r\nconst { formatDate, createStudyBrowserTabs } = utils;\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction PanelStudyBrowserTracking({\r\n  servicesManager,\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}: withAppTypes) {\r\n  const {\r\n    displaySetService,\r\n    uiDialogService,\r\n    hangingProtocolService,\r\n    uiNotificationService,\r\n    measurementService,\r\n    studyPrefetcherService,\r\n  } = servicesManager.services;\r\n  const navigate = useNavigate();\r\n\r\n  const { t } = useTranslation('Common');\r\n\r\n  // Normally you nest the components so the tree isn't so deep, and the data\r\n  // doesn't have to have such an intense shape. This works well enough for now.\r\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\r\n  const { StudyInstanceUIDs } = useImageViewer();\r\n  const [{ activeViewportId, viewports, isHangingProtocolLayout }, viewportGridService] =\r\n    useViewportGrid();\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const [activeTabName, setActiveTabName] = useState('primary');\r\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\r\n    ...StudyInstanceUIDs,\r\n  ]);\r\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\r\n  const [hasLoadedViewports, setHasLoadedViewports] = useState(false);\r\n  const [displaySets, setDisplaySets] = useState([]);\r\n  const [displaySetsLoadingState, setDisplaySetsLoadingState] = useState({});\r\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\r\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\r\n\r\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\r\n    let updatedViewports = [];\r\n    const viewportId = activeViewportId;\r\n    try {\r\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportId,\r\n        displaySetInstanceUID,\r\n        isHangingProtocolLayout\r\n      );\r\n    } catch (error) {\r\n      console.warn(error);\r\n      uiNotificationService.show({\r\n        title: 'Thumbnail Double Click',\r\n        message:\r\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\r\n        type: 'info',\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n  };\r\n\r\n  const activeViewportDisplaySetInstanceUIDs =\r\n    viewports.get(activeViewportId)?.displaySetInstanceUIDs;\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // ~~ studyDisplayList\r\n  useEffect(() => {\r\n    // Fetch all studies for the patient in each primary study\r\n    async function fetchStudiesForPatient(StudyInstanceUID) {\r\n      // current study qido\r\n      const qidoForStudyUID = await dataSource.query.studies.search({\r\n        studyInstanceUid: StudyInstanceUID,\r\n      });\r\n\r\n      if (!qidoForStudyUID?.length) {\r\n        navigate('/notfoundstudy', '_self');\r\n        throw new Error('Invalid study URL');\r\n      }\r\n\r\n      let qidoStudiesForPatient = qidoForStudyUID;\r\n\r\n      // try to fetch the prior studies based on the patientID if the\r\n      // server can respond.\r\n      try {\r\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n\r\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\r\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\r\n        return {\r\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\r\n          date: formatDate(qidoStudy.StudyDate) || t('NoStudyDate'),\r\n          description: qidoStudy.StudyDescription,\r\n          modalities: qidoStudy.ModalitiesInStudy,\r\n          numInstances: qidoStudy.NumInstances,\r\n        };\r\n      });\r\n\r\n      setStudyDisplayList(prevArray => {\r\n        const ret = [...prevArray];\r\n        for (const study of actuallyMappedStudies) {\r\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\r\n            ret.push(study);\r\n          }\r\n        }\r\n        return ret;\r\n      });\r\n    }\r\n\r\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\r\n\r\n  // ~~ Initial Thumbnails\r\n  useEffect(() => {\r\n    if (!hasLoadedViewports) {\r\n      if (activeViewportId) {\r\n        // Once there is an active viewport id, it means the layout is ready\r\n        // so wait a bit of time to allow the viewports preferential loading\r\n        // which improves user experience of responsiveness significantly on slower\r\n        // systems.\r\n        window.setTimeout(() => setHasLoadedViewports(true), 250);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    currentDisplaySets.forEach(async dSet => {\r\n      const newImageSrcEntry = {};\r\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n\r\n      const imageId = getImageIdForThumbnail(displaySet, imageIds);\r\n\r\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\r\n      if (!imageId || displaySet?.unsupported) {\r\n        return;\r\n      }\r\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\r\n\r\n      setThumbnailImageSrcMap(prevState => {\r\n        return { ...prevState, ...newImageSrcEntry };\r\n      });\r\n    });\r\n  }, [displaySetService, dataSource, getImageSrc, activeViewportId, hasLoadedViewports]);\r\n\r\n  // ~~ displaySets\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const mappedDisplaySets = _mapDisplaySets(\r\n      currentDisplaySets,\r\n      displaySetsLoadingState,\r\n      thumbnailImageSrcMap,\r\n      trackedSeries,\r\n      viewports,\r\n      viewportGridService,\r\n      dataSource,\r\n      displaySetService,\r\n      uiDialogService,\r\n      uiNotificationService\r\n    );\r\n\r\n    setDisplaySets(mappedDisplaySets);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    displaySetService.activeDisplaySets,\r\n    displaySetsLoadingState,\r\n    trackedSeries,\r\n    viewports,\r\n    dataSource,\r\n    thumbnailImageSrcMap,\r\n  ]);\r\n\r\n  // -- displaySetsLoadingState\r\n  useEffect(() => {\r\n    const { unsubscribe } = studyPrefetcherService.subscribe(\r\n      studyPrefetcherService.EVENTS.DISPLAYSET_LOAD_PROGRESS,\r\n      updatedDisplaySetLoadingState => {\r\n        const { displaySetInstanceUID, loadingProgress } = updatedDisplaySetLoadingState;\r\n\r\n        setDisplaySetsLoadingState(prevState => ({\r\n          ...prevState,\r\n          [displaySetInstanceUID]: loadingProgress,\r\n        }));\r\n      }\r\n    );\r\n\r\n    return () => unsubscribe();\r\n  }, [studyPrefetcherService]);\r\n\r\n  // ~~ subscriptions --> displaySets\r\n  useEffect(() => {\r\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\r\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      data => {\r\n        if (!hasLoadedViewports) {\r\n          return;\r\n        }\r\n        const { displaySetsAdded, options } = data;\r\n        displaySetsAdded.forEach(async dSet => {\r\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\r\n\r\n          const newImageSrcEntry = {};\r\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n          if (displaySet?.unsupported) {\r\n            return;\r\n          }\r\n\r\n          if (options.madeInClient) {\r\n            setJumpToDisplaySet(displaySetInstanceUID);\r\n          }\r\n\r\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n          const imageId = getImageIdForThumbnail(displaySet, imageIds);\r\n\r\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n          if (!imageId) {\r\n            return;\r\n          }\r\n\r\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n          newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(imageId);\r\n          setThumbnailImageSrcMap(prevState => {\r\n            return { ...prevState, ...newImageSrcEntry };\r\n          });\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsAdded.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [displaySetService, dataSource, getImageSrc, thumbnailImageSrcMap, trackedSeries, viewports]);\r\n\r\n  useEffect(() => {\r\n    // TODO: Will this always hold _all_ the displaySets we care about?\r\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\r\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\r\n      changedDisplaySets => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          changedDisplaySets,\r\n          displaySetsLoadingState,\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n      () => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          displaySetService.getActiveDisplaySets(),\r\n          displaySetsLoadingState,\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsChanged.unsubscribe();\r\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\r\n    };\r\n  }, [\r\n    displaySetsLoadingState,\r\n    thumbnailImageSrcMap,\r\n    trackedSeries,\r\n    viewports,\r\n    dataSource,\r\n    displaySetService,\r\n  ]);\r\n\r\n  const tabs = createStudyBrowserTabs(StudyInstanceUIDs, studyDisplayList, displaySets);\r\n\r\n  // TODO: Should not fire this on \"close\"\r\n  function _handleStudyClick(StudyInstanceUID) {\r\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\r\n      ? [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\r\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n\r\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n\r\n    if (!shouldCollapseStudy) {\r\n      const madeInClient = true;\r\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (jumpToDisplaySet) {\r\n      // Get element by displaySetInstanceUID\r\n      const displaySetInstanceUID = jumpToDisplaySet;\r\n      const element = document.getElementById(`thumbnail-${displaySetInstanceUID}`);\r\n\r\n      if (element && typeof element.scrollIntoView === 'function') {\r\n        // TODO: Any way to support IE here?\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n\r\n        setJumpToDisplaySet(null);\r\n      }\r\n    }\r\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\r\n\r\n  useEffect(() => {\r\n    if (!jumpToDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInstanceUID = jumpToDisplaySet;\r\n    // Set the activeTabName and expand the study\r\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs);\r\n    if (!thumbnailLocation) {\r\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\r\n\r\n      return;\r\n    }\r\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\r\n    setActiveTabName(tabName);\r\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    if (!studyExpanded) {\r\n      const updatedExpandedStudyInstanceUIDs = [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n    }\r\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\r\n\r\n  const onClickUntrack = displaySetInstanceUID => {\r\n    const onConfirm = () => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n      sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n        SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n      });\r\n      const measurements = measurementService.getMeasurements();\r\n      measurements.forEach(m => {\r\n        if (m.referenceSeriesUID === displaySet.SeriesInstanceUID) {\r\n          measurementService.remove(m.uid);\r\n        }\r\n      });\r\n    };\r\n\r\n    uiDialogService.create({\r\n      id: 'untrack-series',\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Untrack Series',\r\n        body: () => (\r\n          <div className=\"bg-primary-dark p-4 text-white\">\r\n            <p>Are you sure you want to untrack this series?</p>\r\n            <p className=\"mt-2\">\r\n              This action cannot be undone and will delete all your existing measurements.\r\n            </p>\r\n          </div>\r\n        ),\r\n        actions: [\r\n          {\r\n            id: 'cancel',\r\n            text: 'Cancel',\r\n            type: ButtonEnums.type.secondary,\r\n          },\r\n          {\r\n            id: 'yes',\r\n            text: 'Yes',\r\n            type: ButtonEnums.type.primary,\r\n            classes: ['untrack-yes-button'],\r\n          },\r\n        ],\r\n        onClose: () => uiDialogService.dismiss({ id: 'untrack-series' }),\r\n        onSubmit: async ({ action }) => {\r\n          switch (action.id) {\r\n            case 'yes':\r\n              onConfirm();\r\n              uiDialogService.dismiss({ id: 'untrack-series' });\r\n              break;\r\n            case 'cancel':\r\n              uiDialogService.dismiss({ id: 'untrack-series' });\r\n              break;\r\n          }\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StudyBrowser\r\n      tabs={tabs}\r\n      servicesManager={servicesManager}\r\n      activeTabName={activeTabName}\r\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\r\n      onClickStudy={_handleStudyClick}\r\n      onClickTab={clickedTabName => {\r\n        setActiveTabName(clickedTabName);\r\n      }}\r\n      onClickUntrack={displaySetInstanceUID => {\r\n        onClickUntrack(displaySetInstanceUID);\r\n      }}\r\n      onClickThumbnail={() => {}}\r\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\r\n      activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  servicesManager: PropTypes.object.isRequired,\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PanelStudyBrowserTracking;\r\n\r\nfunction getImageIdForThumbnail(displaySet: any, imageIds: any) {\r\n  let imageId;\r\n  if (displaySet.isDynamicVolume) {\r\n    const timePoints = displaySet.dynamicVolumeInfo.timePoints;\r\n    const middleIndex = Math.floor(timePoints.length / 2);\r\n    const middleTimePointImageIds = timePoints[middleIndex];\r\n    imageId = middleTimePointImageIds[Math.floor(middleTimePointImageIds.length / 2)];\r\n  } else {\r\n    imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n  }\r\n  return imageId;\r\n}\r\n\r\n/**\r\n * Maps from the DataSource's format to a naturalized object\r\n *\r\n * @param {*} studies\r\n */\r\nfunction _mapDataSourceStudies(studies) {\r\n  return studies.map(study => {\r\n    // TODO: Why does the data source return in this format?\r\n    return {\r\n      AccessionNumber: study.accession,\r\n      StudyDate: study.date,\r\n      StudyDescription: study.description,\r\n      NumInstances: study.instances,\r\n      ModalitiesInStudy: study.modalities,\r\n      PatientID: study.mrn,\r\n      PatientName: study.patientName,\r\n      StudyInstanceUID: study.studyInstanceUid,\r\n      StudyTime: study.time,\r\n    };\r\n  });\r\n}\r\n\r\nfunction _mapDisplaySets(\r\n  displaySets,\r\n  displaySetLoadingState,\r\n  thumbnailImageSrcMap,\r\n  trackedSeriesInstanceUIDs,\r\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\r\n  viewportGridService,\r\n  dataSource,\r\n  displaySetService,\r\n  uiDialogService,\r\n  uiNotificationService\r\n) {\r\n  const thumbnailDisplaySets = [];\r\n  const thumbnailNoImageDisplaySets = [];\r\n  displaySets\r\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n    .forEach(ds => {\r\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\r\n      const componentType = _getComponentType(ds);\r\n      const numPanes = viewportGridService.getNumViewportPanes();\r\n\r\n      const array =\r\n        componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\r\n\r\n      const { displaySetInstanceUID } = ds;\r\n      const loadingProgress = displaySetLoadingState?.[displaySetInstanceUID];\r\n\r\n      const thumbnailProps = {\r\n        displaySetInstanceUID,\r\n        description: ds.SeriesDescription,\r\n        seriesNumber: ds.SeriesNumber,\r\n        modality: ds.Modality,\r\n        seriesDate: formatDate(ds.SeriesDate),\r\n        numInstances: ds.numImageFrames,\r\n        loadingProgress,\r\n        countIcon: ds.countIcon,\r\n        messages: ds.messages,\r\n        StudyInstanceUID: ds.StudyInstanceUID,\r\n        componentType,\r\n        imageSrc,\r\n        dragData: {\r\n          type: 'displayset',\r\n          displaySetInstanceUID,\r\n          // .. Any other data to pass\r\n        },\r\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\r\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\r\n      };\r\n\r\n      if (componentType === 'thumbnailNoImage') {\r\n        if (dataSource.reject && dataSource.reject.series) {\r\n          thumbnailProps.canReject = !ds?.unsupported;\r\n          thumbnailProps.onReject = () => {\r\n            uiDialogService.create({\r\n              id: 'ds-reject-sr',\r\n              centralize: true,\r\n              isDraggable: false,\r\n              showOverlay: true,\r\n              content: Dialog,\r\n              contentProps: {\r\n                title: 'Delete Report',\r\n                body: () => (\r\n                  <div className=\"bg-primary-dark p-4 text-white\">\r\n                    <p>Are you sure you want to delete this report?</p>\r\n                    <p className=\"mt-2\">This action cannot be undone.</p>\r\n                  </div>\r\n                ),\r\n                actions: [\r\n                  {\r\n                    id: 'cancel',\r\n                    text: 'Cancel',\r\n                    type: ButtonEnums.type.secondary,\r\n                  },\r\n                  {\r\n                    id: 'yes',\r\n                    text: 'Yes',\r\n                    type: ButtonEnums.type.primary,\r\n                    classes: ['reject-yes-button'],\r\n                  },\r\n                ],\r\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\r\n                onShow: () => {\r\n                  const yesButton = document.querySelector('.reject-yes-button');\r\n\r\n                  yesButton.focus();\r\n                },\r\n                onSubmit: async ({ action }) => {\r\n                  switch (action.id) {\r\n                    case 'yes':\r\n                      try {\r\n                        await dataSource.reject.series(ds.StudyInstanceUID, ds.SeriesInstanceUID);\r\n                        displaySetService.deleteDisplaySet(displaySetInstanceUID);\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Report deleted successfully',\r\n                          type: 'success',\r\n                        });\r\n                      } catch (error) {\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Failed to delete report',\r\n                          type: 'error',\r\n                        });\r\n                      }\r\n                      break;\r\n                    case 'cancel':\r\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                      break;\r\n                  }\r\n                },\r\n              },\r\n            });\r\n          };\r\n        } else {\r\n          thumbnailProps.canReject = false;\r\n        }\r\n      }\r\n\r\n      array.push(thumbnailProps);\r\n    });\r\n\r\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n}\r\n\r\nconst thumbnailNoImageModalities = [\r\n  'SR',\r\n  'SEG',\r\n  'SM',\r\n  'RTSTRUCT',\r\n  'RTPLAN',\r\n  'RTDOSE',\r\n  'DOC',\r\n  'OT',\r\n  'PMAP',\r\n];\r\n\r\nfunction _getComponentType(ds) {\r\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\r\n    return 'thumbnailNoImage';\r\n  }\r\n\r\n  return 'thumbnailTracked';\r\n}\r\n\r\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\r\n  for (let t = 0; t < tabs.length; t++) {\r\n    const { studies } = tabs[t];\r\n\r\n    for (let s = 0; s < studies.length; s++) {\r\n      const { displaySets } = studies[s];\r\n\r\n      for (let d = 0; d < displaySets.length; d++) {\r\n        const displaySet = displaySets[d];\r\n\r\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\r\n          return {\r\n            tabName: tabs[t].name,\r\n            StudyInstanceUID: studies[s].studyInstanceUid,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId, thumbnail: true })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","function requestDisplaySetCreationForStudy(\r\n  dataSource,\r\n  displaySetService,\r\n  StudyInstanceUID,\r\n  madeInClient\r\n) {\r\n  if (\r\n    displaySetService.activeDisplaySets.some(\r\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\r\n}\r\n\r\nexport default requestDisplaySetCreationForStudy;\r\n","import React, { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}: withAppTypes) {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\r\n  const _getImageSrcFromImageId = useCallback(\r\n    _createGetImageSrcFromImageIdFn(extensionManager),\r\n    []\r\n  );\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      servicesManager={servicesManager}\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nWrappedPanelStudyBrowserTracking.propTypes = {\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StudySummary, MeasurementTable, useViewportGrid, ActionButtons } from '@ohif/ui';\r\nimport { DicomMetadataStore, utils } from '@ohif/core';\r\nimport { useDebounce } from '@hooks';\r\nimport { useAppConfig } from '@state';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\nimport debounce from 'lodash.debounce';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst { downloadCSVReport } = utils;\r\nconst { formatDate } = utils;\r\n\r\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\r\n  key: undefined, //\r\n  date: '', // '07-Sep-2010',\r\n  modality: '', // 'CT',\r\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\r\n};\r\n\r\nfunction PanelMeasurementTableTracking({ servicesManager, extensionManager }: withAppTypes) {\r\n  const [viewportGrid] = useViewportGrid();\r\n  const { t } = useTranslation('MeasurementTable');\r\n  const [measurementChangeTimestamp, setMeasurementsUpdated] = useState(Date.now().toString());\r\n  const debouncedMeasurementChangeTimestamp = useDebounce(measurementChangeTimestamp, 200);\r\n  const { measurementService, uiDialogService, displaySetService, customizationService } =\r\n    servicesManager.services;\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const [displayStudySummary, setDisplayStudySummary] = useState(\r\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\r\n  );\r\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\r\n  const measurementsPanelRef = useRef(null);\r\n  const [appConfig] = useAppConfig();\r\n\r\n  useEffect(() => {\r\n    const measurements = measurementService.getMeasurements();\r\n    const filteredMeasurements = measurements.filter(\r\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    const mappedMeasurements = filteredMeasurements.map(m =>\r\n      _mapMeasurementToDisplay(m, measurementService.VALUE_TYPES, displaySetService)\r\n    );\r\n    setDisplayMeasurements(mappedMeasurements);\r\n    // eslint-ignore-next-line\r\n  }, [measurementService, trackedStudy, trackedSeries, debouncedMeasurementChangeTimestamp]);\r\n\r\n  const updateDisplayStudySummary = async () => {\r\n    if (trackedMeasurements.matches('tracking')) {\r\n      const StudyInstanceUID = trackedStudy;\r\n      const studyMeta = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n      const instanceMeta = studyMeta.series[0].instances[0];\r\n      const { StudyDate, StudyDescription } = instanceMeta;\r\n\r\n      const modalities = new Set();\r\n      studyMeta.series.forEach(series => {\r\n        if (trackedSeries.includes(series.SeriesInstanceUID)) {\r\n          modalities.add(series.instances[0].Modality);\r\n        }\r\n      });\r\n      const modality = Array.from(modalities).join('/');\r\n\r\n      if (displayStudySummary.key !== StudyInstanceUID) {\r\n        setDisplayStudySummary({\r\n          key: StudyInstanceUID,\r\n          date: StudyDate, // TODO: Format: '07-Sep-2010'\r\n          modality,\r\n          description: StudyDescription,\r\n        });\r\n      }\r\n    } else if (trackedStudy === '' || trackedStudy === undefined) {\r\n      setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\r\n    }\r\n  };\r\n\r\n  // ~~ DisplayStudySummary\r\n  useEffect(() => {\r\n    updateDisplayStudySummary();\r\n  }, [displayStudySummary.key, trackedMeasurements, trackedStudy, updateDisplayStudySummary]);\r\n\r\n  // TODO: Better way to consolidated, debounce, check on change?\r\n  // Are we exposing the right API for measurementService?\r\n  // This watches for ALL measurementService changes. It updates a timestamp,\r\n  // which is debounced. After a brief period of inactivity, this triggers\r\n  // a re-render where we grab up-to-date measurements\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\r\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\r\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, () => {\r\n          setMeasurementsUpdated(Date.now().toString());\r\n          if (evt === added) {\r\n            debounce(() => {\r\n              measurementsPanelRef.current.scrollTop = measurementsPanelRef.current.scrollHeight;\r\n            }, 300)();\r\n          }\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, sendTrackedMeasurementsEvent]);\r\n\r\n  async function exportReport() {\r\n    const measurements = measurementService.getMeasurements();\r\n    const trackedMeasurements = measurements.filter(\r\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    downloadCSVReport(trackedMeasurements, measurementService);\r\n  }\r\n\r\n  const jumpToImage = ({ uid, isActive }) => {\r\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\r\n\r\n    onMeasurementItemClickHandler({ uid, isActive });\r\n  };\r\n\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\r\n    jumpToImage({ uid, isActive });\r\n    const labelConfig = customizationService.get('measurementLabels');\r\n    const measurement = measurementService.getMeasurement(uid);\r\n    const utilityModule = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.utilityModule.common'\r\n    );\r\n    const { showLabelAnnotationPopup } = utilityModule.exports;\r\n    showLabelAnnotationPopup(measurement, uiDialogService, labelConfig).then(\r\n      (val: Map<any, any>) => {\r\n        measurementService.update(\r\n          uid,\r\n          {\r\n            ...val,\r\n          },\r\n          true\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\r\n    if (!isActive) {\r\n      const measurements = [...displayMeasurements];\r\n      const measurement = measurements.find(m => m.uid === uid);\r\n\r\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\r\n      measurement.isActive = true;\r\n      setDisplayMeasurements(measurements);\r\n    }\r\n  };\r\n\r\n  const displayMeasurementsWithoutFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType !== measurementService.VALUE_TYPES.POINT && dm.referencedImageId\r\n  );\r\n  const additionalFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType === measurementService.VALUE_TYPES.POINT && dm.referencedImageId\r\n  );\r\n\r\n  const nonAcquisitionMeasurements = displayMeasurements.filter(dm => dm.referencedImageId == null);\r\n\r\n  const disabled =\r\n    additionalFindings.length === 0 &&\r\n    displayMeasurementsWithoutFindings.length === 0 &&\r\n    nonAcquisitionMeasurements.length === 0;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\"\r\n        ref={measurementsPanelRef}\r\n        data-cy={'trackedMeasurements-panel'}\r\n      >\r\n        {displayStudySummary.key && (\r\n          <StudySummary\r\n            date={formatDate(displayStudySummary.date)}\r\n            modality={displayStudySummary.modality}\r\n            description={displayStudySummary.description}\r\n          />\r\n        )}\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          data={displayMeasurementsWithoutFindings}\r\n          servicesManager={servicesManager}\r\n          onClick={jumpToImage}\r\n          onEdit={onMeasurementItemEditHandler}\r\n        />\r\n        {additionalFindings.length !== 0 && (\r\n          <MeasurementTable\r\n            title=\"Additional Findings\"\r\n            data={additionalFindings}\r\n            servicesManager={servicesManager}\r\n            onClick={jumpToImage}\r\n            onEdit={onMeasurementItemEditHandler}\r\n          />\r\n        )}\r\n        {nonAcquisitionMeasurements.length !== 0 && (\r\n          <MeasurementTable\r\n            title=\"Non-tracked\"\r\n            data={nonAcquisitionMeasurements}\r\n            servicesManager={servicesManager}\r\n            onClick={jumpToImage}\r\n            onEdit={onMeasurementItemEditHandler}\r\n          />\r\n        )}\r\n      </div>\r\n      {!appConfig?.disableEditing && (\r\n        <div className=\"flex justify-center p-4\">\r\n          <ActionButtons\r\n            t={t}\r\n            actions={[\r\n              {\r\n                label: 'Download CSV',\r\n                onClick: exportReport,\r\n              },\r\n              {\r\n                label: 'Create Report',\r\n                onClick: () => {\r\n                  sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n                    viewportId: viewportGrid.activeViewportId,\r\n                    isBackupSave: true,\r\n                  });\r\n                },\r\n              },\r\n            ]}\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nPanelMeasurementTableTracking.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\n// TODO: This could be a measurementService mapper\r\nfunction _mapMeasurementToDisplay(measurement, types, displaySetService) {\r\n  const { referenceStudyUID, referenceSeriesUID, SOPInstanceUID } = measurement;\r\n\r\n  // TODO: We don't deal with multiframe well yet, would need to update\r\n  // This in OHIF-312 when we add FrameIndex to measurements.\r\n\r\n  const instance = DicomMetadataStore.getInstance(\r\n    referenceStudyUID,\r\n    referenceSeriesUID,\r\n    SOPInstanceUID\r\n  );\r\n\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(referenceSeriesUID);\r\n\r\n  if (!displaySets[0] || !displaySets[0].images) {\r\n    throw new Error('The tracked measurements panel should only be tracking \"stack\" displaySets.');\r\n  }\r\n\r\n  const {\r\n    displayText: baseDisplayText,\r\n    uid,\r\n    label: baseLabel,\r\n    type,\r\n    selected,\r\n    findingSites,\r\n    finding,\r\n    referencedImageId,\r\n  } = measurement;\r\n\r\n  const firstSite = findingSites?.[0];\r\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\r\n  let displayText = baseDisplayText || [];\r\n  if (findingSites) {\r\n    const siteText = [];\r\n    findingSites.forEach(site => {\r\n      if (site?.text !== label) {\r\n        siteText.push(site.text);\r\n      }\r\n    });\r\n    displayText = [...siteText, ...displayText];\r\n  }\r\n  if (finding && finding?.text !== label) {\r\n    displayText = [finding.text, ...displayText];\r\n  }\r\n\r\n  return {\r\n    uid,\r\n    label,\r\n    baseLabel,\r\n    measurementType: type,\r\n    displayText,\r\n    baseDisplayText,\r\n    isActive: selected,\r\n    finding,\r\n    findingSites,\r\n    referencedImageId,\r\n  };\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import { Types } from '@ohif/core';\r\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\r\nimport i18n from 'i18next';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'tab-studies',\r\n      iconLabel: 'Studies',\r\n      label: i18n.t('SidePanel:Studies'),\r\n      component: PanelStudyBrowserTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: i18n.t('SidePanel:Measurements'),\r\n      component: PanelMeasurementTableTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n"],"names":["RESPONSE","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","NO_NOT_FOR_SERIES","HYDRATE_REPORT","machineConfiguration","id","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","labellingOnly","on","TRACK_SERIES","target","actions","idle","entry","cond","SET_TRACKED_SERIES","PROMPT_HYDRATE_SR","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","event","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","promptLabelAnnotation","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","setPreviousState","meta","prevState","state","value","guards","shouldSetDirty","undefined","includes","wasLabellingOnly","condMeta","wasIdle","wasTracking","wasTrackingAndIsNewStudy","wasTrackingAndIsNewSeries","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","servicesManager","extensionManager","uiViewportDialogService","appConfig","_appConfig","viewportId","Promise","async","resolve","reject","promptResult","disableConfirmationPrompts","message","i18n","t","ButtonEnums","secondary","text","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","key","action","find","_askTrackMeasurements","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","MIN_SR_SERIES_NUMBER","commandsManager","uiDialogService","measurementService","displaySetService","displaySetInstanceUIDs","createReportDialogPrompt","dataSource","getDataSources","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","referencedImageId","SeriesDescription","SeriesNumber","srSeriesNumbers","getActiveDisplaySets","ds","Modality","map","Math","max","getNextSRSeriesNumber","getReport","runCommand","measurementData","additionalFindingTypes","options","createReportAsync","createdDisplaySetInstanceUIDs","error","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","customizationService","measurementId","utilityModule","getModuleEntry","showLabelAnnotationPopup","exports","labelConfig","get","measurement","getMeasurement","update","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","cornerstoneViewportService","machineOptions","Object","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","viewportOptions","initialImageOptions","index","jumpToSameImageInActiveViewport","getCornerstoneViewport","getCurrentImageIdIndex","StructuredReportDisplaySetInstanceUID","measurementIds","ms","fm","i","remove","uid","bind","isLabelOnMeasure","labelOnMeasure","isLabelOnMeasureAndShouldKillMachine","measurementTrackingMachine","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","size","activeViewport","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","triggerPromptHydrateFlow","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","formatDate","createStudyBrowserTabs","utils","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","hangingProtocolService","uiNotificationService","studyPrefetcherService","navigate","useNavigate","useTranslation","StudyInstanceUIDs","useImageViewer","isHangingProtocolLayout","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","hasLoadedViewports","setHasLoadedViewports","displaySets","setDisplaySets","displaySetsLoadingState","setDisplaySetsLoadingState","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","activeViewportDisplaySetInstanceUIDs","forEach","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","Error","qidoStudiesForPatient","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","it","push","fetchStudiesForPatient","window","setTimeout","currentDisplaySets","activeDisplaySets","newImageSrcEntry","dSet","getImageIdForThumbnail","getImageIdsForDisplaySet","unsupported","mappedDisplaySets","_mapDisplaySets","unsubscribe","subscribe","EVENTS","DISPLAYSET_LOAD_PROGRESS","updatedDisplaySetLoadingState","loadingProgress","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","madeInClient","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","tabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","onClickUntrack","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","body","className","classes","onClose","dismiss","onConfirm","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","imageIds","isDynamicVolume","timePoints","dynamicVolumeInfo","middleTimePointImageIds","floor","displaySetLoadingState","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","array","getNumViewportPanes","thumbnailProps","seriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","messages","dragData","isTracked","isHydratedForDerivedDisplaySet","isHydrated","series","canReject","onReject","onShow","querySelector","focus","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","thumbnail","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","useCallback","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","PanelMeasurementTableTracking","measurementChangeTimestamp","setMeasurementsUpdated","Date","now","toString","debouncedMeasurementChangeTimestamp","useDebounce","displayStudySummary","setDisplayStudySummary","displayMeasurements","setDisplayMeasurements","measurementsPanelRef","useRef","mappedMeasurements","types","SOPInstanceUID","DicomMetadataStore","getInstance","getDisplaySetsForSeries","displayText","baseDisplayText","label","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","isActive","_mapMeasurementToDisplay","VALUE_TYPES","updateDisplayStudySummary","matches","studyMeta","getStudy","instanceMeta","Set","add","Array","from","join","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","subscriptions","debounce","current","scrollTop","scrollHeight","unsub","jumpToImage","jumpToMeasurement","onMeasurementItemClickHandler","onMeasurementItemEditHandler","val","measurements","displayMeasurementsWithoutFindings","dm","POINT","additionalFindings","nonAcquisitionMeasurements","disabled","ref","StudySummary","MeasurementTable","onClick","onEdit","disableEditing","ActionButtons","iconName","iconLabel","component","Component","OHIFCornerstoneViewport","props","fallback","_extends","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}