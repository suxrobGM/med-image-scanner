{"version":3,"file":"1169.bundle.6fd130c183b1e6be7d07.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colormap.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colorbar.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresetsContent.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresets.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingQuality.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShift.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeLighting.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShade.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingOptions.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/getWindowLevelActionMenu.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums, Types, utilities } from '@cornerstonejs/core';\r\nimport { utilities as csToolsUtils } from '@cornerstonejs/tools';\r\nimport { ImageScrollbar } from '@ohif/ui';\r\n\r\nfunction CornerstoneImageScrollbar({\r\n  viewportData,\r\n  viewportId,\r\n  element,\r\n  imageSliceData,\r\n  setImageSliceData,\r\n  scrollbarHeight,\r\n  servicesManager,\r\n}: withAppTypes) {\r\n  const { cineService, cornerstoneViewportService } = servicesManager.services;\r\n\r\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    const { isCineEnabled } = cineService.getState();\r\n\r\n    if (isCineEnabled) {\r\n      // on image scrollbar change, stop the CINE if it is playing\r\n      cineService.stopClip(element, { viewportId });\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n    }\r\n\r\n    csToolsUtils.jumpToSlice(viewport.element, {\r\n      imageIndex,\r\n      debounceLoading: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    if (!viewport) {\r\n      return;\r\n    }\r\n\r\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\r\n      const imageIndex = viewport.getCurrentImageIdIndex();\r\n\r\n      setImageSliceData({\r\n        imageIndex: imageIndex,\r\n        numberOfSlices: viewportData.data[0].imageIds.length,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\r\n      const sliceData = utilities.getImageSliceDataForVolumeViewport(\r\n        viewport as Types.IVolumeViewport\r\n      );\r\n\r\n      if (!sliceData) {\r\n        return;\r\n      }\r\n\r\n      const { imageIndex, numberOfSlices } = sliceData;\r\n      setImageSliceData({ imageIndex, numberOfSlices });\r\n    }\r\n  }, [viewportId, viewportData]);\r\n\r\n  useEffect(() => {\r\n    if (viewportData?.viewportType !== Enums.ViewportType.STACK) {\r\n      return;\r\n    }\r\n\r\n    const updateStackIndex = event => {\r\n      const { newImageIdIndex } = event.detail;\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({\r\n        imageIndex: newImageIdIndex,\r\n        numberOfSlices: viewportData.data[0].imageIds.length,\r\n      });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  useEffect(() => {\r\n    if (viewportData?.viewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\r\n      return;\r\n    }\r\n\r\n    const updateVolumeIndex = event => {\r\n      const { imageIndex, numberOfSlices } = event.detail;\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({ imageIndex, numberOfSlices });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  return (\r\n    <ImageScrollbar\r\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\r\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\r\n      height={scrollbarHeight}\r\n      value={imageSliceData.imageIndex}\r\n    />\r\n  );\r\n}\r\n\r\nCornerstoneImageScrollbar.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  viewportId: PropTypes.string.isRequired,\r\n  element: PropTypes.instanceOf(Element),\r\n  scrollbarHeight: PropTypes.string,\r\n  imageSliceData: PropTypes.object.isRequired,\r\n  setImageSliceData: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CornerstoneImageScrollbar;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport classNames from 'classnames';\r\nimport {\r\n  metaData,\r\n  Enums,\r\n  Types,\r\n  getEnabledElement,\r\n  utilities as csUtils,\r\n} from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/tools';\r\nimport PropTypes from 'prop-types';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport './ViewportOrientationMarkers.css';\r\n\r\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\r\n\r\nfunction ViewportOrientationMarkers({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n  orientationMarkers = ['top', 'left'],\r\n}: withAppTypes) {\r\n  // Rotation is in degrees\r\n  const [rotation, setRotation] = useState(0);\r\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\r\n  const [flipVertical, setFlipVertical] = useState(false);\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\r\n      const { rotation, previousCamera, camera } = evt.detail;\r\n\r\n      if (rotation !== undefined) {\r\n        setRotation(rotation);\r\n      }\r\n\r\n      if (\r\n        camera.flipHorizontal !== undefined &&\r\n        previousCamera.flipHorizontal !== camera.flipHorizontal\r\n      ) {\r\n        setFlipHorizontal(camera.flipHorizontal);\r\n      }\r\n\r\n      if (\r\n        camera.flipVertical !== undefined &&\r\n        previousCamera.flipVertical !== camera.flipVertical\r\n      ) {\r\n        setFlipVertical(camera.flipVertical);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n    };\r\n  }, []);\r\n\r\n  const markers = useMemo(() => {\r\n    if (!viewportData) {\r\n      return '';\r\n    }\r\n\r\n    let rowCosines, columnCosines, isDefaultValueSetForRowCosine, isDefaultValueSetForColumnCosine;\r\n    if (viewportData.viewportType === 'stack') {\r\n      const imageIndex = imageSliceData.imageIndex;\r\n      const imageId = viewportData.data[0].imageIds?.[imageIndex];\r\n\r\n      // Workaround for below TODO stub\r\n      if (!imageId) {\r\n        return false;\r\n      }\r\n\r\n      ({ rowCosines, columnCosines, isDefaultValueSetForColumnCosine, isDefaultValueSetForColumnCosine } = metaData.get('imagePlaneModule', imageId) || {});\r\n    } else {\r\n      if (!element || !getEnabledElement(element)) {\r\n        return '';\r\n      }\r\n\r\n      const { viewport } = getEnabledElement(element);\r\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\r\n\r\n      const viewRight = vec3.create();\r\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\r\n\r\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\r\n      rowCosines = viewRight;\r\n    }\r\n\r\n    if (!rowCosines || !columnCosines || rotation === undefined || isDefaultValueSetForRowCosine || isDefaultValueSetForColumnCosine) {\r\n      return '';\r\n    }\r\n\r\n    const markers = _getOrientationMarkers(\r\n      rowCosines,\r\n      columnCosines,\r\n      rotation,\r\n      flipVertical,\r\n      flipHorizontal\r\n    );\r\n\r\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (!ohifViewport) {\r\n      console.log('ViewportOrientationMarkers::No viewport');\r\n      return null;\r\n    }\r\n\r\n    return orientationMarkers.map((m, index) => (\r\n      <div\r\n        className={classNames(\r\n          'overlay-text',\r\n          `${m}-mid orientation-marker`,\r\n          'text-aqua-pale',\r\n          'text-[13px]',\r\n          'leading-5'\r\n        )}\r\n        key={`${m}-mid orientation-marker`}\r\n      >\r\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\r\n      </div>\r\n    ));\r\n  }, [\r\n    viewportData,\r\n    imageSliceData,\r\n    rotation,\r\n    flipVertical,\r\n    flipHorizontal,\r\n    orientationMarkers,\r\n    element,\r\n  ]);\r\n\r\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\r\n}\r\n\r\n/**\r\n *\r\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\r\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\r\n *\r\n * @param {*} rowCosines\r\n * @param {*} columnCosines\r\n * @param {*} rotation in degrees\r\n * @returns\r\n */\r\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\r\n  const rowString = getOrientationStringLPS(rowCosines);\r\n  const columnString = getOrientationStringLPS(columnCosines);\r\n  const oppositeRowString = invertOrientationStringLPS(rowString);\r\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\r\n\r\n  const markers = {\r\n    top: oppositeColumnString,\r\n    left: oppositeRowString,\r\n    right: rowString,\r\n    bottom: columnString,\r\n  };\r\n\r\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\r\n  // the rotation applications\r\n  if (flipVertical) {\r\n    markers.top = invertOrientationStringLPS(markers.top);\r\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\r\n  }\r\n\r\n  if (flipHorizontal) {\r\n    markers.left = invertOrientationStringLPS(markers.left);\r\n    markers.right = invertOrientationStringLPS(markers.right);\r\n  }\r\n\r\n  // Swap the labels accordingly if the viewport has been rotated\r\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\r\n  if (rotation === 90 || rotation === -270) {\r\n    return {\r\n      top: markers.left,\r\n      left: invertOrientationStringLPS(markers.top),\r\n      right: invertOrientationStringLPS(markers.bottom),\r\n      bottom: markers.right, // left\r\n    };\r\n  } else if (rotation === -90 || rotation === 270) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.left),\r\n      left: markers.top,\r\n      bottom: markers.left,\r\n      right: markers.bottom,\r\n    };\r\n  } else if (rotation === 180 || rotation === -180) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.top),\r\n      left: invertOrientationStringLPS(markers.left),\r\n      bottom: invertOrientationStringLPS(markers.bottom),\r\n      right: invertOrientationStringLPS(markers.right),\r\n    };\r\n  }\r\n\r\n  return markers;\r\n}\r\n\r\nexport default ViewportOrientationMarkers;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const loadIndicatorRef = useRef(null);\r\n  const imageIdToBeLoaded = useRef(null);\r\n\r\n  const setLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    loadIndicatorRef.current = setTimeout(() => {\r\n      setLoading(true);\r\n    }, 50);\r\n  };\r\n\r\n  const setFinishLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const setErrorState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\r\n      setError(evt.detail.error);\r\n      imageIdToBeLoaded.current = null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    };\r\n  }, [element, viewportData]);\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n            <p className=\"text-primary-light text-xl font-light\">\r\n              <h4>Error Loading Image</h4>\r\n              <p>An error has occurred.</p>\r\n              <p>{error}</p>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\r\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\r\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewportImageSliceLoadingIndicator.propTypes = {\r\n  error: PropTypes.object,\r\n  element: PropTypes.object,\r\n};\r\n\r\nexport default ViewportImageSliceLoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\r\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\r\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\r\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\r\n\r\nfunction CornerstoneOverlays(props: withAppTypes) {\r\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [imageSliceData, setImageSliceData] = useState({\r\n    imageIndex: 0,\r\n    numberOfSlices: 0,\r\n  });\r\n  const [viewportData, setViewportData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportId !== viewportId) {\r\n          return;\r\n        }\r\n\r\n        setViewportData(props.viewportData);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  if (viewportData) {\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"noselect\">\r\n      <ViewportImageScrollbar\r\n        viewportId={viewportId}\r\n        viewportData={viewportData}\r\n        element={element}\r\n        imageSliceData={imageSliceData}\r\n        setImageSliceData={setImageSliceData}\r\n        scrollbarHeight={scrollbarHeight}\r\n        servicesManager={servicesManager}\r\n      />\r\n\r\n      <CustomizableViewportOverlay\r\n        imageSliceData={imageSliceData}\r\n        viewportData={viewportData}\r\n        viewportId={viewportId}\r\n        servicesManager={servicesManager}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportImageSliceLoadingIndicator\r\n        viewportData={viewportData}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportOrientationMarkers\r\n        imageSliceData={imageSliceData}\r\n        element={element}\r\n        viewportData={viewportData}\r\n        servicesManager={servicesManager}\r\n        viewportId={viewportId}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CornerstoneOverlays;\r\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\r\nimport { CinePlayer, useCine } from '@ohif/ui';\r\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\r\nimport { Enums as StreamingEnums } from '@cornerstonejs/streaming-image-volume-loader';\r\nimport { useAppConfig } from '@state';\r\n\r\nfunction WrappedCinePlayer({\r\n  enabledVPElement,\r\n  viewportId,\r\n  servicesManager,\r\n}: withAppTypes<{\r\n  enabledVPElement: HTMLElement;\r\n  viewportId: string;\r\n}>) {\r\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\r\n  const [dynamicInfo, setDynamicInfo] = useState(null);\r\n  const [appConfig] = useAppConfig();\r\n  const isMountedRef = useRef(null);\r\n\r\n  const cineHandler = () => {\r\n    if (!cines?.[viewportId] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\r\n    const validFrameRate = Math.max(frameRate, 1);\r\n\r\n    return isPlaying\r\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\r\n      : cineService.stopClip(enabledVPElement);\r\n  };\r\n\r\n  const newDisplaySetHandler = useCallback(() => {\r\n    if (!enabledVPElement || !isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    const { viewports } = viewportGridService.getState();\r\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\r\n    let frameRate = 24;\r\n    let isPlaying = cines[viewportId]?.isPlaying || false;\r\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      if (displaySet.FrameRate) {\r\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\r\n        // So a bit of math to get the actual frame rate.\r\n        frameRate = Math.round(1000 / displaySet.FrameRate);\r\n        isPlaying ||= !!appConfig.autoPlayCine;\r\n      }\r\n\r\n      // check if the displaySet is dynamic and set the dynamic info\r\n      if (displaySet.isDynamicVolume) {\r\n        const { dynamicVolumeInfo } = displaySet;\r\n        const numTimePoints = dynamicVolumeInfo.timePoints.length;\r\n        const label = dynamicVolumeInfo.splittingTag;\r\n        const timePointIndex = dynamicVolumeInfo.timePointIndex || 0;\r\n        setDynamicInfo({\r\n          volumeId: displaySet.displaySetInstanceUID,\r\n          timePointIndex,\r\n          numTimePoints,\r\n          label,\r\n        });\r\n      } else {\r\n        setDynamicInfo(null);\r\n      }\r\n    });\r\n\r\n    if (isPlaying) {\r\n      cineService.setIsCineEnabled(isPlaying);\r\n    }\r\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\r\n    setNewStackFrameRate(frameRate);\r\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n\r\n    newDisplaySetHandler();\r\n\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, [isCineEnabled, newDisplaySetHandler]);\r\n\r\n  useEffect(() => {\r\n    if (!isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\r\n\r\n  /**\r\n   * Use effect for handling new display set\r\n   */\r\n  useEffect(() => {\r\n    if (!enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    eventTarget.addEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\r\n    // this doesn't makes sense that we are listening to this event on viewport element\r\n    enabledVPElement.addEventListener(\r\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n      newDisplaySetHandler\r\n    );\r\n\r\n    return () => {\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n\r\n      eventTarget.removeEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\r\n      enabledVPElement.removeEventListener(\r\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n        newDisplaySetHandler\r\n      );\r\n    };\r\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\r\n\r\n  useEffect(() => {\r\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n\r\n    return () => {\r\n      cineService.stopClip(enabledVPElement, { viewportId });\r\n    };\r\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\r\n\r\n  if (!isCineEnabled) {\r\n    return null;\r\n  }\r\n\r\n  const cine = cines[viewportId];\r\n  const isPlaying = cine?.isPlaying || false;\r\n\r\n  return (\r\n    <RenderCinePlayer\r\n      viewportId={viewportId}\r\n      cineService={cineService}\r\n      newStackFrameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      dynamicInfo={dynamicInfo}\r\n      customizationService={customizationService}\r\n    />\r\n  );\r\n}\r\n\r\nfunction RenderCinePlayer({\r\n  viewportId,\r\n  cineService,\r\n  newStackFrameRate,\r\n  isPlaying,\r\n  dynamicInfo: dynamicInfoProp,\r\n  customizationService,\r\n}) {\r\n  const { component: CinePlayerComponent = CinePlayer } =\r\n    customizationService.get('cinePlayer') ?? {};\r\n\r\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\r\n\r\n  useEffect(() => {\r\n    setDynamicInfo(dynamicInfoProp);\r\n  }, [dynamicInfoProp]);\r\n\r\n  /**\r\n   * Use effect for handling 4D time index changed\r\n   */\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const handleTimePointIndexChange = evt => {\r\n      const { volumeId, timePointIndex, numTimePoints, splittingTag } = evt.detail;\r\n      setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\r\n    };\r\n\r\n    eventTarget.addEventListener(\r\n      StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\r\n      handleTimePointIndexChange\r\n    );\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(\r\n        StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\r\n        handleTimePointIndexChange\r\n      );\r\n    };\r\n  }, [dynamicInfo]);\r\n\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const { volumeId, timePointIndex, numTimePoints, splittingTag } = dynamicInfo || {};\r\n    const volume = cache.getVolume(volumeId);\r\n    volume.timePointIndex = timePointIndex;\r\n\r\n    setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\r\n  }, []);\r\n\r\n  const updateDynamicInfo = useCallback(props => {\r\n    const { volumeId, timePointIndex } = props;\r\n    const volume = cache.getVolume(volumeId);\r\n    volume.timePointIndex = timePointIndex;\r\n  }, []);\r\n\r\n  return (\r\n    <CinePlayerComponent\r\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\r\n      frameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      onClose={() => {\r\n        // also stop the clip\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying: false,\r\n        });\r\n        cineService.setIsCineEnabled(false);\r\n      }}\r\n      onPlayPauseChange={isPlaying => {\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying,\r\n        });\r\n      }}\r\n      onFrameRateChange={frameRate =>\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          frameRate,\r\n        })\r\n      }\r\n      dynamicInfo={dynamicInfo}\r\n      updateDynamicInfo={updateDynamicInfo}\r\n    />\r\n  );\r\n}\r\n\r\nexport default WrappedCinePlayer;\r\n","import CinePlayer from './CinePlayer';\r\n\r\nexport default CinePlayer;\r\n","import React from 'react';\r\nimport { useViewportActionCornersContext } from '../contextProviders/ViewportActionCornersProvider';\r\nimport { ViewportActionCorners } from '@ohif/ui';\r\n\r\nexport type OHIFViewportActionCornersProps = {\r\n  viewportId: string;\r\n};\r\n\r\nfunction OHIFViewportActionCorners({ viewportId }: OHIFViewportActionCornersProps) {\r\n  const [viewportActionCornersState] = useViewportActionCornersContext();\r\n\r\n  if (!viewportActionCornersState[viewportId]) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ViewportActionCorners\r\n      cornerComponents={viewportActionCornersState[viewportId]}\r\n    ></ViewportActionCorners>\r\n  );\r\n}\r\n\r\nexport default OHIFViewportActionCorners;\r\n","import React, { ReactElement, useCallback, useEffect, useRef, useState, useMemo } from 'react';\r\nimport { AllInOneMenu, ButtonGroup, SwitchButton } from '@ohif/ui';\r\nimport { StackViewport } from '@cornerstonejs/core';\r\nimport { ColormapProps } from '../../types/Colormap';\r\n\r\nexport function Colormap({\r\n  colormaps,\r\n  viewportId,\r\n  displaySets,\r\n  commandsManager,\r\n  servicesManager,\r\n}: ColormapProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  const [activeDisplaySet, setActiveDisplaySet] = useState(displaySets[0]);\r\n\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [prePreviewColormap, setPrePreviewColormap] = useState(null);\r\n\r\n  const showPreviewRef = useRef(showPreview);\r\n  showPreviewRef.current = showPreview;\r\n  const prePreviewColormapRef = useRef(prePreviewColormap);\r\n  prePreviewColormapRef.current = prePreviewColormap;\r\n  const activeDisplaySetRef = useRef(activeDisplaySet);\r\n  activeDisplaySetRef.current = activeDisplaySet;\r\n\r\n  const onSetColorLUT = useCallback(\r\n    props => {\r\n      // TODO: Better way to check if it's a fusion\r\n      const oneOpacityColormaps = ['Grayscale', 'X Ray'];\r\n      const opacity =\r\n        displaySets.length > 1 && !oneOpacityColormaps.includes(props.colormap.name) ? 0.5 : 1;\r\n      commandsManager.run({\r\n        commandName: 'setViewportColormap',\r\n        commandOptions: {\r\n          ...props,\r\n          opacity,\r\n          immediate: true,\r\n        },\r\n        context: 'CORNERSTONE',\r\n      });\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const getViewportColormap = (viewportId, displaySet) => {\r\n    const { displaySetInstanceUID } = displaySet;\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    if (viewport instanceof StackViewport) {\r\n      const { colormap } = viewport.getProperties();\r\n      if (!colormap) {\r\n        return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\r\n      }\r\n      return colormap;\r\n    }\r\n    const actorEntries = viewport.getActors();\r\n    const actorEntry = actorEntries.find(entry => entry.uid.includes(displaySetInstanceUID));\r\n    const { colormap } = viewport.getProperties(actorEntry.uid);\r\n    if (!colormap) {\r\n      return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\r\n    }\r\n    return colormap;\r\n  };\r\n\r\n  const buttons = useMemo(() => {\r\n    return displaySets.map((displaySet, index) => ({\r\n      children: displaySet.Modality,\r\n      key: index,\r\n      style: {\r\n        minWidth: `calc(100% / ${displaySets.length})`,\r\n        fontSize: '0.8rem',\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      },\r\n    }));\r\n  }, [displaySets]);\r\n\r\n  useEffect(() => {\r\n    setActiveDisplaySet(displaySets[displaySets.length - 1]);\r\n  }, [displaySets]);\r\n\r\n  return (\r\n    <>\r\n      {buttons.length > 1 && (\r\n        <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n          <ButtonGroup\r\n            onActiveIndexChange={index => {\r\n              setActiveDisplaySet(displaySets[index]);\r\n              setPrePreviewColormap(null);\r\n            }}\r\n            activeIndex={\r\n              displaySets.findIndex(\r\n                ds => ds.displaySetInstanceUID === activeDisplaySetRef.current.displaySetInstanceUID\r\n              ) || 1\r\n            }\r\n            className=\"w-[70%] text-[10px]\"\r\n          >\r\n            {buttons.map(({ children, key, style }) => (\r\n              <div\r\n                key={key}\r\n                style={style}\r\n              >\r\n                {children}\r\n              </div>\r\n            ))}\r\n          </ButtonGroup>\r\n        </div>\r\n      )}\r\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n        <SwitchButton\r\n          label=\"Preview in viewport\"\r\n          checked={showPreview}\r\n          onChange={checked => {\r\n            setShowPreview(checked);\r\n          }}\r\n        />\r\n      </div>\r\n      <AllInOneMenu.DividerItem />\r\n      <AllInOneMenu.ItemPanel>\r\n        {colormaps.map((colormap, index) => (\r\n          <AllInOneMenu.Item\r\n            key={index}\r\n            label={colormap.description}\r\n            onClick={() => {\r\n              onSetColorLUT({\r\n                viewportId,\r\n                colormap,\r\n                displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\r\n              });\r\n              setPrePreviewColormap(null);\r\n            }}\r\n            onMouseEnter={() => {\r\n              if (showPreviewRef.current) {\r\n                setPrePreviewColormap(getViewportColormap(viewportId, activeDisplaySetRef.current));\r\n                onSetColorLUT({\r\n                  viewportId,\r\n                  colormap,\r\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\r\n                });\r\n              }\r\n            }}\r\n            onMouseLeave={() => {\r\n              if (showPreviewRef.current && prePreviewColormapRef.current) {\r\n                onSetColorLUT({\r\n                  viewportId,\r\n                  colormap: prePreviewColormapRef.current,\r\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\r\n                });\r\n              }\r\n            }}\r\n          ></AllInOneMenu.Item>\r\n        ))}\r\n      </AllInOneMenu.ItemPanel>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\r\nimport { SwitchButton } from '@ohif/ui';\r\nimport { StackViewport, VolumeViewport } from '@cornerstonejs/core';\r\nimport { ColorbarProps } from '../../types/Colorbar';\r\nimport { utilities } from '@cornerstonejs/core';\r\n\r\nexport function setViewportColorbar(\r\n  viewportId,\r\n  displaySets,\r\n  commandsManager,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  colorbarOptions\r\n) {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n  const backgroundColor = viewportInfo.getViewportOptions().background;\r\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\r\n\r\n  if (isLight) {\r\n    colorbarOptions.ticks = {\r\n      position: 'left',\r\n      style: {\r\n        font: '12px Arial',\r\n        color: '#000000',\r\n        maxNumTicks: 8,\r\n        tickSize: 5,\r\n        tickWidth: 1,\r\n        labelMargin: 3,\r\n      },\r\n    };\r\n  }\r\n\r\n  const displaySetInstanceUIDs = [];\r\n\r\n  if (viewport instanceof StackViewport) {\r\n    displaySetInstanceUIDs.push(viewportId);\r\n  }\r\n\r\n  if (viewport instanceof VolumeViewport) {\r\n    displaySets.forEach(ds => {\r\n      displaySetInstanceUIDs.push(ds.displaySetInstanceUID);\r\n    });\r\n  }\r\n\r\n  commandsManager.run({\r\n    commandName: 'toggleViewportColorbar',\r\n    commandOptions: {\r\n      viewportId,\r\n      options: colorbarOptions,\r\n      displaySetInstanceUIDs,\r\n    },\r\n    context: 'CORNERSTONE',\r\n  });\r\n}\r\n\r\nexport function Colorbar({\r\n  viewportId,\r\n  displaySets,\r\n  commandsManager,\r\n  servicesManager,\r\n  colorbarProperties,\r\n}: withAppTypes<ColorbarProps>): ReactElement {\r\n  const { colorbarService } = servicesManager.services;\r\n  const {\r\n    width: colorbarWidth,\r\n    colorbarTickPosition,\r\n    colorbarContainerPosition,\r\n    colormaps,\r\n    colorbarInitialColormap,\r\n  } = colorbarProperties;\r\n  const [showColorbar, setShowColorbar] = useState(colorbarService.hasColorbar(viewportId));\r\n\r\n  const onSetColorbar = useCallback(() => {\r\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\r\n      viewportId,\r\n      colormaps,\r\n      ticks: {\r\n        position: colorbarTickPosition,\r\n      },\r\n      width: colorbarWidth,\r\n      position: colorbarContainerPosition,\r\n      activeColormapName: colorbarInitialColormap,\r\n    });\r\n  }, [commandsManager]);\r\n\r\n  useEffect(() => {\r\n    const updateColorbarState = () => {\r\n      setShowColorbar(colorbarService.hasColorbar(viewportId));\r\n    };\r\n\r\n    const { unsubscribe } = colorbarService.subscribe(\r\n      colorbarService.EVENTS.STATE_CHANGED,\r\n      updateColorbarState\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  return (\r\n    <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n      <div className=\"mr-2 w-[28px]\"></div>\r\n      <SwitchButton\r\n        label=\"Display Color bar\"\r\n        checked={showColorbar}\r\n        onChange={() => {\r\n          onSetColorbar();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback } from 'react';\r\nimport { AllInOneMenu } from '@ohif/ui';\r\nimport { WindowLevelPreset } from '../../types/WindowLevel';\r\nimport { CommandsManager } from '@ohif/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport type WindowLevelProps = {\r\n  viewportId: string;\r\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\r\n  commandsManager: CommandsManager;\r\n};\r\n\r\nexport function WindowLevel({\r\n  viewportId,\r\n  commandsManager,\r\n  presets,\r\n}: WindowLevelProps): ReactElement {\r\n  const { t } = useTranslation('WindowLevelActionMenu');\r\n\r\n  const onSetWindowLevel = useCallback(\r\n    props => {\r\n      commandsManager.run({\r\n        commandName: 'setViewportWindowLevel',\r\n        commandOptions: {\r\n          ...props,\r\n          viewportId,\r\n        },\r\n        context: 'CORNERSTONE',\r\n      });\r\n    },\r\n    [commandsManager, viewportId]\r\n  );\r\n\r\n  return (\r\n    <AllInOneMenu.ItemPanel>\r\n      {presets.map((modalityPresets, modalityIndex) => (\r\n        <React.Fragment key={modalityIndex}>\r\n          {Object.entries(modalityPresets).map(([modality, presetsArray]) => (\r\n            <React.Fragment key={modality}>\r\n              <AllInOneMenu.HeaderItem>\r\n                {t('Modality Presets', { modality })}\r\n              </AllInOneMenu.HeaderItem>\r\n              {presetsArray.map((preset, index) => (\r\n                <AllInOneMenu.Item\r\n                  key={`${modality}-${index}`}\r\n                  label={preset.description}\r\n                  secondaryLabel={`${preset.window} / ${preset.level}`}\r\n                  onClick={() => onSetWindowLevel(preset)}\r\n                />\r\n              ))}\r\n            </React.Fragment>\r\n          ))}\r\n        </React.Fragment>\r\n      ))}\r\n    </AllInOneMenu.ItemPanel>\r\n  );\r\n}\r\n","import { Icon } from '@ohif/ui';\r\nimport { ButtonEnums } from '@ohif/ui';\r\nimport React, { ReactElement, useState, useCallback } from 'react';\r\nimport { Button, InputFilterText } from '@ohif/ui';\r\nimport { ViewportPreset, VolumeRenderingPresetsContentProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeRenderingPresetsContent({\r\n  presets,\r\n  viewportId,\r\n  commandsManager,\r\n  onClose,\r\n}: VolumeRenderingPresetsContentProps): ReactElement {\r\n  const [filteredPresets, setFilteredPresets] = useState(presets);\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [selectedPreset, setSelectedPreset] = useState<ViewportPreset | null>(null);\r\n\r\n  const handleSearchChange = useCallback(\r\n    (value: string) => {\r\n      setSearchValue(value);\r\n      const filtered = value\r\n        ? presets.filter(preset => preset.name.toLowerCase().includes(value.toLowerCase()))\r\n        : presets;\r\n      setFilteredPresets(filtered);\r\n    },\r\n    [presets]\r\n  );\r\n\r\n  const handleApply = useCallback(\r\n    props => {\r\n      commandsManager.runCommand('setViewportPreset', {\r\n        ...props,\r\n      });\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const formatLabel = (label: string, maxChars: number) => {\r\n    return label.length > maxChars ? `${label.slice(0, maxChars)}...` : label;\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex min-h-full w-full flex-col justify-between\">\r\n      <div className=\"border-secondary-light h-[433px] w-full overflow-hidden rounded border bg-black px-2.5\">\r\n        <div className=\"flex h-[46px] w-full items-center justify-start\">\r\n          <div className=\"h-[26px] w-[200px]\">\r\n            <InputFilterText\r\n              value={searchValue}\r\n              onDebounceChange={handleSearchChange}\r\n              placeholder={'Search all'}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"ohif-scrollbar overflow h-[385px] w-full overflow-y-auto\">\r\n          <div className=\"grid grid-cols-4 gap-3 pt-2 pr-3\">\r\n            {filteredPresets.map((preset, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"flex cursor-pointer flex-col items-start\"\r\n                onClick={() => {\r\n                  setSelectedPreset(preset);\r\n                  handleApply({ preset: preset.name, viewportId });\r\n                }}\r\n              >\r\n                <Icon\r\n                  name={preset.name}\r\n                  className={\r\n                    selectedPreset?.name === preset.name\r\n                      ? 'border-primary-light h-[75px] w-[95px] max-w-none rounded border-2'\r\n                      : 'hover:border-primary-light h-[75px] w-[95px] max-w-none rounded border-2 border-black'\r\n                  }\r\n                />\r\n                <label className=\"text-aqua-pale mt-2 text-left text-xs\">\r\n                  {formatLabel(preset.name, 11)}\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <footer className=\"flex h-[60px] w-full items-center justify-end\">\r\n        <div className=\"flex\">\r\n          <Button\r\n            name=\"Cancel\"\r\n            size={ButtonEnums.size.medium}\r\n            type={ButtonEnums.type.secondary}\r\n            onClick={onClose}\r\n          >\r\n            {' '}\r\n            Cancel{' '}\r\n          </Button>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n","import { AllInOneMenu, Icon } from '@ohif/ui';\r\nimport React, { ReactElement } from 'react';\r\nimport { VolumeRenderingPresetsProps } from '../../types/ViewportPresets';\r\nimport { VolumeRenderingPresetsContent } from './VolumeRenderingPresetsContent';\r\n\r\nexport function VolumeRenderingPresets({\r\n  viewportId,\r\n  servicesManager,\r\n  commandsManager,\r\n  volumeRenderingPresets,\r\n}: VolumeRenderingPresetsProps): ReactElement {\r\n  const { uiModalService } = servicesManager.services;\r\n\r\n  const onClickPresets = () => {\r\n    uiModalService.show({\r\n      content: VolumeRenderingPresetsContent,\r\n      title: 'Rendering Presets',\r\n      movable: true,\r\n      contentProps: {\r\n        onClose: uiModalService.hide,\r\n        presets: volumeRenderingPresets,\r\n        viewportId,\r\n        commandsManager,\r\n      },\r\n      containerDimensions: 'h-[543px] w-[460px]',\r\n      contentDimensions: 'h-[493px] w-[460px]  pl-[12px] pr-[12px]',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AllInOneMenu.Item\r\n      label=\"Rendering Presets\"\r\n      icon={<Icon name=\"VolumeRendering\" />}\r\n      rightIcon={<Icon name=\"action-new-dialog\" />}\r\n      onClick={onClickPresets}\r\n    />\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useState, useEffect } from 'react';\r\nimport { VolumeRenderingQualityProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeRenderingQuality({\r\n  volumeRenderingQualityRange,\r\n  commandsManager,\r\n  servicesManager,\r\n  viewportId,\r\n}: VolumeRenderingQualityProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const { min, max, step } = volumeRenderingQualityRange;\r\n  const [quality, setQuality] = useState(null);\r\n\r\n  const onChange = useCallback(\r\n    (value: number) => {\r\n      commandsManager.runCommand('setVolumeRenderingQulaity', {\r\n        viewportId,\r\n        volumeQuality: value,\r\n      });\r\n      setQuality(value);\r\n    },\r\n    [commandsManager, viewportId]\r\n  );\r\n\r\n  const calculateBackground = value => {\r\n    const percentage = ((value - 0) / (1 - 0)) * 100;\r\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const { actor } = viewport.getActors()[0];\r\n    const mapper = actor.getMapper();\r\n    const image = mapper.getInputData();\r\n    const spacing = image.getSpacing();\r\n    const sampleDistance = mapper.getSampleDistance();\r\n    const averageSpacing = spacing.reduce((a, b) => a + b) / 3.0;\r\n    if (sampleDistance === averageSpacing) {\r\n      setQuality(1);\r\n    } else {\r\n      setQuality(Math.sqrt(averageSpacing / (sampleDistance * 0.5)));\r\n    }\r\n  }, [cornerstoneViewportService, viewportId]);\r\n  return (\r\n    <>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block text-white\"\r\n          htmlFor=\"volume\"\r\n        >\r\n          Quality\r\n        </label>\r\n        {quality !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={quality}\r\n            id=\"volume\"\r\n            max={max}\r\n            min={min}\r\n            type=\"range\"\r\n            step={step}\r\n            onChange={e => onChange(parseInt(e.target.value, 10))}\r\n            style={{\r\n              background: calculateBackground((quality - min) / (max - min)),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState, useRef } from 'react';\r\nimport { VolumeShiftProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeShift({\r\n  viewportId,\r\n  commandsManager,\r\n  servicesManager,\r\n}: VolumeShiftProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [minShift, setMinShift] = useState<number | null>(null);\r\n  const [maxShift, setMaxShift] = useState<number | null>(null);\r\n  const [shift, setShift] = useState<number | null>(\r\n    cornerstoneViewportService.getCornerstoneViewport(viewportId)?.shiftedBy || 0\r\n  );\r\n  const [step, setStep] = useState<number | null>(null);\r\n  const [isBlocking, setIsBlocking] = useState(false);\r\n\r\n  const prevShiftRef = useRef<number>(shift);\r\n\r\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n  const { actor } = viewport.getActors()[0];\r\n  const ofun = actor.getProperty().getScalarOpacity(0);\r\n\r\n  useEffect(() => {\r\n    if (isBlocking) {\r\n      return;\r\n    }\r\n    const range = ofun.getRange();\r\n\r\n    const transferFunctionWidth = range[1] - range[0];\r\n\r\n    const minShift = -transferFunctionWidth;\r\n    const maxShift = transferFunctionWidth;\r\n\r\n    setMinShift(minShift);\r\n    setMaxShift(maxShift);\r\n    setStep(Math.pow(10, Math.floor(Math.log10(transferFunctionWidth / 500))));\r\n  }, [cornerstoneViewportService, viewportId, actor, ofun, isBlocking]);\r\n\r\n  const onChangeRange = useCallback(\r\n    newShift => {\r\n      const shiftDifference = newShift - prevShiftRef.current;\r\n      prevShiftRef.current = newShift;\r\n      viewport.shiftedBy = newShift;\r\n      commandsManager.runCommand('shiftVolumeOpacityPoints', {\r\n        viewportId,\r\n        shift: shiftDifference,\r\n      });\r\n    },\r\n    [commandsManager, viewportId, viewport]\r\n  );\r\n\r\n  const calculateBackground = value => {\r\n    const percentage = ((value - 0) / (1 - 0)) * 100;\r\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"shift\"\r\n        >\r\n          Shift\r\n        </label>\r\n        {step !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={shift}\r\n            onChange={e => {\r\n              const shiftValue = parseInt(e.target.value, 10);\r\n              setShift(shiftValue);\r\n              onChangeRange(shiftValue);\r\n            }}\r\n            id=\"shift\"\r\n            onMouseDown={() => setIsBlocking(true)}\r\n            onMouseUp={() => setIsBlocking(false)}\r\n            max={maxShift}\r\n            min={minShift}\r\n            type=\"range\"\r\n            step={step}\r\n            style={{\r\n              background: calculateBackground((shift - minShift) / (maxShift - minShift)),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useState, useEffect, useCallback } from 'react';\r\nimport { VolumeLightingProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeLighting({\r\n  servicesManager,\r\n  commandsManager,\r\n  viewportId,\r\n}: VolumeLightingProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [ambient, setAmbient] = useState(null);\r\n  const [diffuse, setDiffuse] = useState(null);\r\n  const [specular, setSpecular] = useState(null);\r\n\r\n  const onAmbientChange = useCallback(() => {\r\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { ambient } });\r\n  }, [ambient, commandsManager, viewportId]);\r\n\r\n  const onDiffuseChange = useCallback(() => {\r\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { diffuse } });\r\n  }, [diffuse, commandsManager, viewportId]);\r\n\r\n  const onSpecularChange = useCallback(() => {\r\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { specular } });\r\n  }, [specular, commandsManager, viewportId]);\r\n\r\n  const calculateBackground = value => {\r\n    const percentage = ((value - 0) / (1 - 0)) * 100;\r\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const { actor } = viewport.getActors()[0];\r\n    const ambient = actor.getProperty().getAmbient();\r\n    const diffuse = actor.getProperty().getDiffuse();\r\n    const specular = actor.getProperty().getSpecular();\r\n    setAmbient(ambient);\r\n    setDiffuse(diffuse);\r\n    setSpecular(specular);\r\n  }, [viewportId, cornerstoneViewportService]);\r\n  return (\r\n    <>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"ambient\"\r\n        >\r\n          Ambient\r\n        </label>\r\n        {ambient !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={ambient}\r\n            onChange={e => {\r\n              setAmbient(e.target.value);\r\n              onAmbientChange();\r\n            }}\r\n            id=\"ambient\"\r\n            max={1}\r\n            min={0}\r\n            type=\"range\"\r\n            step={0.1}\r\n            style={{\r\n              background: calculateBackground(ambient),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"diffuse\"\r\n        >\r\n          Diffuse\r\n        </label>\r\n        {diffuse !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={diffuse}\r\n            onChange={e => {\r\n              setDiffuse(e.target.value);\r\n              onDiffuseChange();\r\n            }}\r\n            id=\"diffuse\"\r\n            max={1}\r\n            min={0}\r\n            type=\"range\"\r\n            step={0.1}\r\n            style={{\r\n              background: calculateBackground(diffuse),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"specular\"\r\n        >\r\n          Specular\r\n        </label>\r\n        {specular !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={specular}\r\n            onChange={e => {\r\n              setSpecular(e.target.value);\r\n              onSpecularChange();\r\n            }}\r\n            id=\"specular\"\r\n            max={1}\r\n            min={0}\r\n            type=\"range\"\r\n            step={0.1}\r\n            style={{\r\n              background: calculateBackground(specular),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\r\nimport { SwitchButton } from '@ohif/ui';\r\nimport { VolumeShadeProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeShade({\r\n  commandsManager,\r\n  viewportId,\r\n  servicesManager,\r\n}: VolumeShadeProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [shade, setShade] = useState(true);\r\n  const [key, setKey] = useState(0);\r\n\r\n  const onShadeChange = useCallback(\r\n    (checked: boolean) => {\r\n      commandsManager.runCommand('setVolumeLighting', { viewportId, options: { shade: checked } });\r\n    },\r\n    [commandsManager, viewportId]\r\n  );\r\n  useEffect(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const { actor } = viewport.getActors()[0];\r\n    const shade = actor.getProperty().getShade();\r\n    setShade(shade);\r\n    setKey(key + 1);\r\n  }, [viewportId, cornerstoneViewportService]);\r\n\r\n  return (\r\n    <SwitchButton\r\n      key={key}\r\n      label=\"Shade\"\r\n      checked={shade}\r\n      onChange={() => {\r\n        setShade(!shade);\r\n        onShadeChange(!shade);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport { AllInOneMenu } from '@ohif/ui';\r\nimport { VolumeRenderingOptionsProps } from '../../types/ViewportPresets';\r\nimport { VolumeRenderingQuality } from './VolumeRenderingQuality';\r\nimport { VolumeShift } from './VolumeShift';\r\nimport { VolumeLighting } from './VolumeLighting';\r\nimport { VolumeShade } from './VolumeShade';\r\nexport function VolumeRenderingOptions({\r\n  viewportId,\r\n  commandsManager,\r\n  volumeRenderingQualityRange,\r\n  servicesManager,\r\n}: VolumeRenderingOptionsProps): ReactElement {\r\n  return (\r\n    <AllInOneMenu.ItemPanel>\r\n      <VolumeRenderingQuality\r\n        viewportId={viewportId}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        volumeRenderingQualityRange={volumeRenderingQualityRange}\r\n      />\r\n\r\n      <VolumeShift\r\n        viewportId={viewportId}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n      />\r\n      <div className=\"all-in-one-menu-item mt-2 flex !h-[20px] w-full justify-start\">\r\n        <div className=\"text-aqua-pale text-[13px]\">LIGHTING</div>\r\n      </div>\r\n      <div className=\"bg-primary-dark mt-1 mb-1 h-[2px] w-full\"></div>\r\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n        <VolumeShade\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          viewportId={viewportId}\r\n        />\r\n      </div>\r\n      <VolumeLighting\r\n        viewportId={viewportId}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n      />\r\n    </AllInOneMenu.ItemPanel>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport classNames from 'classnames';\r\nimport { AllInOneMenu, useViewportGrid } from '@ohif/ui';\r\nimport { Colormap } from './Colormap';\r\nimport { Colorbar } from './Colorbar';\r\nimport { setViewportColorbar } from './Colorbar';\r\nimport { WindowLevelPreset } from '../../types/WindowLevel';\r\nimport { ColorbarProperties } from '../../types/Colorbar';\r\nimport { VolumeRenderingQualityRange } from '../../types/ViewportPresets';\r\nimport { WindowLevel } from './WindowLevel';\r\nimport { VolumeRenderingPresets } from './VolumeRenderingPresets';\r\nimport { VolumeRenderingOptions } from './VolumeRenderingOptions';\r\nimport { ViewportPreset } from '../../types/ViewportPresets';\r\nimport { VolumeViewport3D } from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/core';\r\n\r\nexport type WindowLevelActionMenuProps = {\r\n  viewportId: string;\r\n  element: HTMLElement;\r\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\r\n  verticalDirection: AllInOneMenu.VerticalDirection;\r\n  horizontalDirection: AllInOneMenu.HorizontalDirection;\r\n  colorbarProperties: ColorbarProperties;\r\n  displaySets: Array<any>;\r\n  volumeRenderingPresets: Array<ViewportPreset>;\r\n  volumeRenderingQualityRange: VolumeRenderingQualityRange;\r\n};\r\n\r\nexport function WindowLevelActionMenu({\r\n  viewportId,\r\n  element,\r\n  presets,\r\n  verticalDirection,\r\n  horizontalDirection,\r\n  commandsManager,\r\n  servicesManager,\r\n  colorbarProperties,\r\n  displaySets,\r\n  volumeRenderingPresets,\r\n  volumeRenderingQualityRange,\r\n}: withAppTypes<WindowLevelActionMenuProps>): ReactElement {\r\n  const {\r\n    colormaps,\r\n    colorbarContainerPosition,\r\n    colorbarInitialColormap,\r\n    colorbarTickPosition,\r\n    width: colorbarWidth,\r\n  } = colorbarProperties;\r\n  const { colorbarService, cornerstoneViewportService } = servicesManager.services;\r\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n  const backgroundColor = viewportInfo.getViewportOptions().background;\r\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\r\n\r\n  const nonImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\r\n\r\n  const { t } = useTranslation('WindowLevelActionMenu');\r\n\r\n  const [viewportGrid] = useViewportGrid();\r\n  const { activeViewportId } = viewportGrid;\r\n\r\n  const [vpHeight, setVpHeight] = useState(element?.clientHeight);\r\n  const [menuKey, setMenuKey] = useState(0);\r\n  const [is3DVolume, setIs3DVolume] = useState(false);\r\n\r\n  const onSetColorbar = useCallback(() => {\r\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\r\n      colormaps,\r\n      ticks: {\r\n        position: colorbarTickPosition,\r\n      },\r\n      width: colorbarWidth,\r\n      position: colorbarContainerPosition,\r\n      activeColormapName: colorbarInitialColormap,\r\n    });\r\n  }, [commandsManager]);\r\n\r\n  useEffect(() => {\r\n    const newVpHeight = element?.clientHeight;\r\n    if (vpHeight !== newVpHeight) {\r\n      setVpHeight(newVpHeight);\r\n    }\r\n  }, [element, vpHeight]);\r\n\r\n  useEffect(() => {\r\n    if (!colorbarService.hasColorbar(viewportId)) {\r\n      return;\r\n    }\r\n    window.setTimeout(() => {\r\n      colorbarService.removeColorbar(viewportId);\r\n      onSetColorbar();\r\n    }, 0);\r\n  }, [viewportId, displaySets, viewport]);\r\n\r\n  useEffect(() => {\r\n    setMenuKey(menuKey + 1);\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    if (viewport instanceof VolumeViewport3D) {\r\n      setIs3DVolume(true);\r\n    } else {\r\n      setIs3DVolume(false);\r\n    }\r\n  }, [\r\n    displaySets,\r\n    viewportId,\r\n    presets,\r\n    volumeRenderingQualityRange,\r\n    volumeRenderingPresets,\r\n    colorbarProperties,\r\n    activeViewportId,\r\n    viewportGrid,\r\n  ]);\r\n\r\n  return (\r\n    <AllInOneMenu.IconMenu\r\n      icon=\"viewport-window-level\"\r\n      verticalDirection={verticalDirection}\r\n      horizontalDirection={horizontalDirection}\r\n      iconClassName={classNames(\r\n        // Visible on hover and for the active viewport\r\n        activeViewportId === viewportId ? 'visible' : 'invisible group-hover:visible',\r\n        'flex shrink-0 cursor-pointer rounded active:text-white text-primary-light',\r\n        isLight ? ' hover:bg-secondary-dark' : 'hover:bg-secondary-light/60'\r\n      )}\r\n      menuStyle={{ maxHeight: vpHeight - 32, minWidth: 218 }}\r\n      onVisibilityChange={() => {\r\n        setVpHeight(element.clientHeight);\r\n      }}\r\n      menuKey={menuKey}\r\n    >\r\n      <AllInOneMenu.ItemPanel>\r\n        {!is3DVolume && (\r\n          <Colorbar\r\n            viewportId={viewportId}\r\n            displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\r\n            commandsManager={commandsManager}\r\n            servicesManager={servicesManager}\r\n            colorbarProperties={colorbarProperties}\r\n          />\r\n        )}\r\n\r\n        {colormaps && !is3DVolume && (\r\n          <AllInOneMenu.SubMenu\r\n            key=\"colorLUTPresets\"\r\n            itemLabel=\"Color LUT\"\r\n            itemIcon=\"icon-color-lut\"\r\n          >\r\n            <Colormap\r\n              colormaps={colormaps}\r\n              viewportId={viewportId}\r\n              displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\r\n              commandsManager={commandsManager}\r\n              servicesManager={servicesManager}\r\n            />\r\n          </AllInOneMenu.SubMenu>\r\n        )}\r\n\r\n        {presets && presets.length > 0 && !is3DVolume && (\r\n          <AllInOneMenu.SubMenu\r\n            key=\"windowLevelPresets\"\r\n            itemLabel={t('Modality Window Presets')}\r\n            itemIcon=\"viewport-window-level\"\r\n          >\r\n            <WindowLevel\r\n              viewportId={viewportId}\r\n              commandsManager={commandsManager}\r\n              presets={presets}\r\n            />\r\n          </AllInOneMenu.SubMenu>\r\n        )}\r\n\r\n        {volumeRenderingPresets && is3DVolume && (\r\n          <VolumeRenderingPresets\r\n            servicesManager={servicesManager}\r\n            viewportId={viewportId}\r\n            commandsManager={commandsManager}\r\n            volumeRenderingPresets={volumeRenderingPresets}\r\n          />\r\n        )}\r\n\r\n        {volumeRenderingQualityRange && is3DVolume && (\r\n          <AllInOneMenu.SubMenu itemLabel=\"Rendering Options\">\r\n            <VolumeRenderingOptions\r\n              viewportId={viewportId}\r\n              commandsManager={commandsManager}\r\n              volumeRenderingQualityRange={volumeRenderingQualityRange}\r\n              servicesManager={servicesManager}\r\n            />\r\n          </AllInOneMenu.SubMenu>\r\n        )}\r\n      </AllInOneMenu.ItemPanel>\r\n    </AllInOneMenu.IconMenu>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\r\nimport { useResizeDetector } from 'react-resize-detector';\r\nimport PropTypes from 'prop-types';\r\nimport * as cs3DTools from '@cornerstonejs/tools';\r\nimport {\r\n  Enums,\r\n  eventTarget,\r\n  getEnabledElement,\r\n  StackViewport,\r\n  utilities as csUtils,\r\n} from '@cornerstonejs/core';\r\nimport { MeasurementService } from '@ohif/core';\r\nimport { Notification, useViewportDialog, AllInOneMenu } from '@ohif/ui';\r\nimport { IStackViewport, IVolumeViewport } from '@cornerstonejs/core/dist/esm/types';\r\n\r\nimport { setEnabledElement } from '../state';\r\n\r\nimport './OHIFCornerstoneViewport.css';\r\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\r\nimport getSOPInstanceAttributes from '../utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\r\nimport CinePlayer from '../components/CinePlayer';\r\nimport { Types } from '@ohif/core';\r\n\r\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\r\nimport { getWindowLevelActionMenu } from '../components/WindowLevelActionMenu/getWindowLevelActionMenu';\r\nimport { useAppConfig } from '@state';\r\n\r\nimport { LutPresentation, PositionPresentation } from '../types/Presentation';\r\n\r\nconst STACK = 'stack';\r\n\r\n/**\r\n * Caches the jump to measurement operation, so that if display set is shown,\r\n * it can jump to the measurement.\r\n */\r\nlet cacheJumpToMeasurementEvent;\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  if (nextProps.needsRerendering) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType) {\r\n    return false;\r\n  }\r\n\r\n  if (nextProps.viewportOptions.needsRerendering) {\r\n    return false;\r\n  }\r\n\r\n  const prevDisplaySets = prevProps.displaySets;\r\n  const nextDisplaySets = nextProps.displaySets;\r\n\r\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < prevDisplaySets.length; i++) {\r\n    const prevDisplaySet = prevDisplaySets[i];\r\n\r\n    const foundDisplaySet = nextDisplaySets.find(\r\n      nextDisplaySet =>\r\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (!foundDisplaySet) {\r\n      return false;\r\n    }\r\n\r\n    // check they contain the same image\r\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\r\n      return false;\r\n    }\r\n\r\n    // check if their imageIds are the same\r\n    if (foundDisplaySet.images?.length) {\r\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\r\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\r\n// Then we don't need to worry about the re-renders if the props change.\r\nconst OHIFCornerstoneViewport = React.memo((props: withAppTypes) => {\r\n  const {\r\n    displaySets,\r\n    dataSource,\r\n    viewportOptions,\r\n    displaySetOptions,\r\n    servicesManager,\r\n    onElementEnabled,\r\n    // eslint-disable-next-line react/prop-types\r\n    onElementDisabled,\r\n    isJumpToMeasurementDisabled = false,\r\n    // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n    // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n    // to set the initial state of the viewport's first image to render\r\n    // eslint-disable-next-line react/prop-types\r\n    initialImageIndex,\r\n    // if the viewport is part of a hanging protocol layout\r\n    // we should not really rely on the old synchronizers and\r\n    // you see below we only rehydrate the synchronizers if the viewport\r\n    // is not part of the hanging protocol layout. HPs should\r\n    // define their own synchronizers. Since the synchronizers are\r\n    // viewportId dependent and\r\n    // eslint-disable-next-line react/prop-types\r\n    isHangingProtocolLayout,\r\n  } = props;\r\n\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  if (!viewportId) {\r\n    throw new Error('Viewport ID is required');\r\n  }\r\n\r\n  // Make sure displaySetOptions has one object per displaySet\r\n  while (displaySetOptions.length < displaySets.length) {\r\n    displaySetOptions.push({});\r\n  }\r\n\r\n  // Since we only have support for dynamic data in volume viewports, we should\r\n  // handle this case here and set the viewportType to volume if any of the\r\n  // displaySets are dynamic volumes\r\n  viewportOptions.viewportType = displaySets.some(ds => ds.isDynamicVolume && ds.isReconstructable)\r\n    ? 'volume'\r\n    : viewportOptions.viewportType;\r\n\r\n  const [scrollbarHeight, setScrollbarHeight] = useState('100px');\r\n  const [enabledVPElement, setEnabledVPElement] = useState(null);\r\n  const elementRef = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    toolbarService,\r\n    toolGroupService,\r\n    syncGroupService,\r\n    cornerstoneViewportService,\r\n    cornerstoneCacheService,\r\n    viewportGridService,\r\n    stateSyncService,\r\n    viewportActionCornersService,\r\n  } = servicesManager.services;\r\n\r\n  const [viewportDialogState] = useViewportDialog();\r\n  // useCallback for scroll bar height calculation\r\n  const setImageScrollBarHeight = useCallback(() => {\r\n    const scrollbarHeight = `${elementRef.current.clientHeight - 40}px`;\r\n    setScrollbarHeight(scrollbarHeight);\r\n  }, [elementRef]);\r\n\r\n  // useCallback for onResize\r\n  const onResize = useCallback(() => {\r\n    if (elementRef.current) {\r\n      cornerstoneViewportService.resize();\r\n      setImageScrollBarHeight();\r\n    }\r\n  }, [elementRef]);\r\n\r\n  const cleanUpServices = useCallback(\r\n    viewportInfo => {\r\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n      const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n      toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\r\n\r\n      syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n      viewportActionCornersService.clear(viewportId);\r\n    },\r\n    [viewportId]\r\n  );\r\n\r\n  const elementEnabledHandler = useCallback(\r\n    evt => {\r\n      // check this is this element reference and return early if doesn't match\r\n      if (evt.detail.element !== elementRef.current) {\r\n        return;\r\n      }\r\n\r\n      const { viewportId, element } = evt.detail;\r\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n      setEnabledElement(viewportId, element);\r\n      setEnabledVPElement(element);\r\n\r\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n      const toolGroupId = viewportInfo.getToolGroupId();\r\n      const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n      toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\r\n\r\n      syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n      const synchronizersStore = stateSyncService.getState().synchronizersStore;\r\n\r\n      if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\r\n        // If the viewport used to have a synchronizer, re apply it again\r\n        _rehydrateSynchronizers(synchronizersStore, viewportId, syncGroupService);\r\n      }\r\n\r\n      if (onElementEnabled) {\r\n        onElementEnabled(evt);\r\n      }\r\n    },\r\n    [viewportId, onElementEnabled, toolGroupService]\r\n  );\r\n\r\n  // disable the element upon unmounting\r\n  useEffect(() => {\r\n    cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\r\n\r\n    eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n\r\n    setImageScrollBarHeight();\r\n\r\n    return () => {\r\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n      if (!viewportInfo) {\r\n        return;\r\n      }\r\n\r\n      cornerstoneViewportService.storePresentation({ viewportId });\r\n\r\n      // This should be done after the store presentation since synchronizers\r\n      // will get cleaned up and they need the viewportInfo to be present\r\n      cleanUpServices(viewportInfo);\r\n\r\n      if (onElementDisabled) {\r\n        onElementDisabled(viewportInfo);\r\n      }\r\n\r\n      cornerstoneViewportService.disableElement(viewportId);\r\n\r\n      eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n    };\r\n  }, []);\r\n\r\n  // subscribe to displaySet metadata invalidation (updates)\r\n  // Currently, if the metadata changes we need to re-render the display set\r\n  // for it to take effect in the viewport. As we deal with scaling in the loading,\r\n  // we need to remove the old volume from the cache, and let the\r\n  // viewport to re-add it which will use the new metadata. Otherwise, the\r\n  // viewport will use the cached volume and the new metadata will not be used.\r\n  // Note: this approach does not actually end of sending network requests\r\n  // and it uses the network cache\r\n  useEffect(() => {\r\n    const { unsubscribe } = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n      async ({\r\n        displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\r\n        invalidateData,\r\n      }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\r\n        if (!invalidateData) {\r\n          return;\r\n        }\r\n\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n        if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\r\n          const viewportData = viewportInfo.getViewportData();\r\n          const newViewportData = await cornerstoneCacheService.invalidateViewportData(\r\n            viewportData,\r\n            invalidatedDisplaySetInstanceUID,\r\n            dataSource,\r\n            displaySetService\r\n          );\r\n\r\n          const keepCamera = true;\r\n          cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\r\n        }\r\n      }\r\n    );\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  useEffect(() => {\r\n    // handle the default viewportType to be stack\r\n    if (!viewportOptions.viewportType) {\r\n      viewportOptions.viewportType = STACK;\r\n    }\r\n\r\n    const loadViewportData = async () => {\r\n      const viewportData = await cornerstoneCacheService.createViewportData(\r\n        displaySets,\r\n        viewportOptions,\r\n        dataSource,\r\n        initialImageIndex\r\n      );\r\n\r\n      // The presentation state will have been stored previously by closing\r\n      // a viewport.  Otherwise, this viewport will be unchanged and the\r\n      // presentation information will be directly carried over.\r\n      const state = stateSyncService.getState();\r\n      const lutPresentationStore = state.lutPresentationStore as LutPresentation;\r\n      const positionPresentationStore = state.positionPresentationStore as PositionPresentation;\r\n\r\n      const { presentationIds } = viewportOptions;\r\n      const presentations = {\r\n        positionPresentation: positionPresentationStore[presentationIds?.positionPresentationId],\r\n        lutPresentation: lutPresentationStore[presentationIds?.lutPresentationId],\r\n      };\r\n      let measurement;\r\n      if (cacheJumpToMeasurementEvent?.viewportId === viewportId) {\r\n        measurement = cacheJumpToMeasurementEvent.measurement;\r\n        // Delete the position presentation so that viewport navigates direct\r\n        presentations.positionPresentation = null;\r\n        cacheJumpToMeasurementEvent = null;\r\n      }\r\n\r\n      // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\r\n      // Used for segmentation hydration right now, since the logic to decide whether\r\n      // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\r\n      // so we need to re-render (force update via change of the needsRerendering) so that React\r\n      // does the diffing and decides we should render this again (although the id and element has not changed)\r\n      // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\r\n      if (viewportOptions.needsRerendering) {\r\n        viewportOptions.needsRerendering = false;\r\n      }\r\n\r\n      cornerstoneViewportService.setViewportData(\r\n        viewportId,\r\n        viewportData,\r\n        viewportOptions,\r\n        displaySetOptions,\r\n        presentations\r\n      );\r\n      if (measurement) {\r\n        cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n      }\r\n    };\r\n\r\n    loadViewportData();\r\n  }, [viewportOptions, displaySets, dataSource]);\r\n\r\n  /**\r\n   * There are two scenarios for jump to click\r\n   * 1. Current viewports contain the displaySet that the annotation was drawn on\r\n   * 2. Current viewports don't contain the displaySet that the annotation was drawn on\r\n   * and we need to change the viewports displaySet for jumping.\r\n   * Since measurement_jump happens via events and listeners, the former case is handled\r\n   * by the measurement_jump direct callback, but the latter case is handled first by\r\n   * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\r\n   * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\r\n   */\r\n  useEffect(() => {\r\n    if (isJumpToMeasurementDisabled) {\r\n      return;\r\n    }\r\n\r\n    const unsubscribeFromJumpToMeasurementEvents = _subscribeToJumpToMeasurementEvents(\r\n      measurementService,\r\n      displaySetService,\r\n      elementRef,\r\n      viewportId,\r\n      displaySets,\r\n      viewportGridService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n    _checkForCachedJumpToMeasurementEvents(\r\n      measurementService,\r\n      displaySetService,\r\n      elementRef,\r\n      viewportId,\r\n      displaySets,\r\n      viewportGridService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeFromJumpToMeasurementEvents();\r\n    };\r\n  }, [displaySets, elementRef, viewportId]);\r\n\r\n  // Set up the window level action menu in the viewport action corners.\r\n  useEffect(() => {\r\n    // Doing an === check here because the default config value when not set is true\r\n    if (appConfig.addWindowLevelActionMenu === false) {\r\n      return;\r\n    }\r\n\r\n    // TODO: In the future we should consider using the customization service\r\n    // to determine if and in which corner various action components should go.\r\n    const wlActionMenu = getWindowLevelActionMenu({\r\n      viewportId,\r\n      element: elementRef.current,\r\n      displaySets,\r\n      servicesManager,\r\n      commandsManager,\r\n      verticalDirection: AllInOneMenu.VerticalDirection.TopToBottom,\r\n      horizontalDirection: AllInOneMenu.HorizontalDirection.RightToLeft,\r\n    });\r\n\r\n    viewportActionCornersService.setComponent({\r\n      viewportId,\r\n      id: 'windowLevelActionMenu',\r\n      component: wlActionMenu,\r\n      location: viewportActionCornersService.LOCATIONS.topRight,\r\n      indexPriority: -100,\r\n    });\r\n  }, [displaySets, viewportId, viewportActionCornersService, servicesManager, commandsManager]);\r\n\r\n  const { ref: resizeRef } = useResizeDetector({\r\n    onResize,\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"viewport-wrapper\">\r\n        <div\r\n          className=\"cornerstone-viewport-element\"\r\n          style={{ height: '100%', width: '100%' }}\r\n          onContextMenu={e => e.preventDefault()}\r\n          onMouseDown={e => e.preventDefault()}\r\n          ref={el => {\r\n            resizeRef.current = el;\r\n            elementRef.current = el;\r\n          }}\r\n        ></div>\r\n        <CornerstoneOverlays\r\n          viewportId={viewportId}\r\n          toolBarService={toolbarService}\r\n          element={elementRef.current}\r\n          scrollbarHeight={scrollbarHeight}\r\n          servicesManager={servicesManager}\r\n        />\r\n        <CinePlayer\r\n          enabledVPElement={enabledVPElement}\r\n          viewportId={viewportId}\r\n          servicesManager={servicesManager}\r\n        />\r\n      </div>\r\n      {/* top offset of 24px to account for ViewportActionCorners. */}\r\n      <div className=\"absolute top-[24px] w-full\">\r\n        {viewportDialogState.viewportId === viewportId && (\r\n          <Notification\r\n            id=\"viewport-notification\"\r\n            message={viewportDialogState.message}\r\n            type={viewportDialogState.type}\r\n            actions={viewportDialogState.actions}\r\n            onSubmit={viewportDialogState.onSubmit}\r\n            onOutsideClick={viewportDialogState.onOutsideClick}\r\n            onKeyPress={viewportDialogState.onKeyPress}\r\n          />\r\n        )}\r\n      </div>\r\n      {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\r\n      <OHIFViewportActionCorners viewportId={viewportId} />\r\n    </React.Fragment>\r\n  );\r\n}, areEqual);\r\n\r\nfunction _subscribeToJumpToMeasurementEvents(\r\n  measurementService,\r\n  displaySetService,\r\n  elementRef,\r\n  viewportId,\r\n  displaySets,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  const { unsubscribe } = measurementService.subscribe(\r\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\r\n    props => {\r\n      cacheJumpToMeasurementEvent = props;\r\n      const { viewportId: jumpId, measurement, isConsumed } = props;\r\n      if (!measurement || isConsumed) {\r\n        return;\r\n      }\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport === undefined) {\r\n        // Decide on which viewport should handle this\r\n        cacheJumpToMeasurementEvent.cornerstoneViewport =\r\n          cornerstoneViewportService.getViewportIdToJump(\r\n            jumpId,\r\n            measurement.displaySetInstanceUID,\r\n            {\r\n              referencedImageId:\r\n                measurement.referencedImageId || measurement.metadata?.referencedImageId,\r\n            }\r\n          );\r\n      }\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport !== viewportId) {\r\n        return;\r\n      }\r\n      _jumpToMeasurement(\r\n        measurement,\r\n        elementRef,\r\n        viewportId,\r\n        measurementService,\r\n        displaySetService,\r\n        viewportGridService,\r\n        cornerstoneViewportService\r\n      );\r\n    }\r\n  );\r\n\r\n  return unsubscribe;\r\n}\r\n\r\n// Check if there is a queued jumpToMeasurement event\r\nfunction _checkForCachedJumpToMeasurementEvents(\r\n  measurementService,\r\n  displaySetService,\r\n  elementRef,\r\n  viewportId,\r\n  displaySets,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  if (!cacheJumpToMeasurementEvent) {\r\n    return;\r\n  }\r\n  if (cacheJumpToMeasurementEvent.isConsumed) {\r\n    cacheJumpToMeasurementEvent = null;\r\n    return;\r\n  }\r\n  const displaysUIDs = displaySets.map(displaySet => displaySet.displaySetInstanceUID);\r\n  if (!displaysUIDs?.length) {\r\n    return;\r\n  }\r\n\r\n  // Jump to measurement if the measurement exists\r\n  const { measurement } = cacheJumpToMeasurementEvent;\r\n  if (measurement && elementRef) {\r\n    if (displaysUIDs.includes(measurement?.displaySetInstanceUID)) {\r\n      _jumpToMeasurement(\r\n        measurement,\r\n        elementRef,\r\n        viewportId,\r\n        measurementService,\r\n        displaySetService,\r\n        viewportGridService,\r\n        cornerstoneViewportService\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction _jumpToMeasurement(\r\n  measurement,\r\n  targetElementRef,\r\n  viewportId,\r\n  measurementService,\r\n  displaySetService,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  const targetElement = targetElementRef.current;\r\n  const { displaySetInstanceUID, SOPInstanceUID, frameNumber } = measurement;\r\n\r\n  if (!SOPInstanceUID) {\r\n    console.warn('cannot jump in a non-acquisition plane measurements yet');\r\n    return;\r\n  }\r\n\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  // Todo: setCornerstoneMeasurementActive should be handled by the toolGroupManager\r\n  //  to set it properly\r\n  // setCornerstoneMeasurementActive(measurement);\r\n\r\n  viewportGridService.setActiveViewportId(viewportId);\r\n\r\n  const enabledElement = getEnabledElement(targetElement);\r\n\r\n  if (enabledElement) {\r\n    // See how the jumpToSlice() of Cornerstone3D deals with imageIdx param.\r\n    const viewport = enabledElement.viewport as IStackViewport | IVolumeViewport;\r\n\r\n    let imageIdIndex = 0;\r\n    let viewportCameraDirectionMatch = true;\r\n\r\n    if (viewport instanceof StackViewport) {\r\n      const imageIds = viewport.getImageIds();\r\n      imageIdIndex = imageIds.findIndex(imageId => {\r\n        const { SOPInstanceUID: aSOPInstanceUID, frameNumber: aFrameNumber } =\r\n          getSOPInstanceAttributes(imageId);\r\n        return aSOPInstanceUID === SOPInstanceUID && (!frameNumber || frameNumber === aFrameNumber);\r\n      });\r\n    } else {\r\n      // for volume viewport we can't rely on the imageIdIndex since it can be\r\n      // a reconstructed view that doesn't match the original slice numbers etc.\r\n      const { viewPlaneNormal: measurementViewPlane } = measurement.metadata;\r\n      imageIdIndex = referencedDisplaySet.images.findIndex(\r\n        i => i.SOPInstanceUID === SOPInstanceUID\r\n      );\r\n\r\n      // the index is reversed in the volume viewport\r\n      // imageIdIndex = referencedDisplaySet.images.length - 1 - imageIdIndex;\r\n\r\n      const { viewPlaneNormal: viewportViewPlane } = viewport.getCamera();\r\n\r\n      // should compare abs for both planes since the direction can be flipped\r\n      if (\r\n        measurementViewPlane &&\r\n        !csUtils.isEqual(measurementViewPlane.map(Math.abs), viewportViewPlane.map(Math.abs))\r\n      ) {\r\n        viewportCameraDirectionMatch = false;\r\n      }\r\n    }\r\n\r\n    if (!viewportCameraDirectionMatch || imageIdIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    cs3DTools.utilities.jumpToSlice(targetElement, {\r\n      imageIndex: imageIdIndex,\r\n    });\r\n\r\n    cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n    // Jump to measurement consumed, remove.\r\n    cacheJumpToMeasurementEvent?.consume?.();\r\n    cacheJumpToMeasurementEvent = null;\r\n  }\r\n}\r\n\r\nfunction _rehydrateSynchronizers(\r\n  synchronizersStore: { [key: string]: unknown },\r\n  viewportId: string,\r\n  syncGroupService: any\r\n) {\r\n  synchronizersStore[viewportId].forEach(synchronizerObj => {\r\n    if (!synchronizerObj.id) {\r\n      return;\r\n    }\r\n\r\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\r\n\r\n    const synchronizer = syncGroupService.getSynchronizer(id);\r\n\r\n    if (!synchronizer) {\r\n      return;\r\n    }\r\n\r\n    const sourceViewportInfo = sourceViewports.find(\r\n      sourceViewport => sourceViewport.viewportId === viewportId\r\n    );\r\n\r\n    const targetViewportInfo = targetViewports.find(\r\n      targetViewport => targetViewport.viewportId === viewportId\r\n    );\r\n\r\n    const isSourceViewportInSynchronizer = synchronizer\r\n      .getSourceViewports()\r\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\r\n\r\n    const isTargetViewportInSynchronizer = synchronizer\r\n      .getTargetViewports()\r\n      .find(targetViewport => targetViewport.viewportId === viewportId);\r\n\r\n    // if the viewport was previously a source viewport, add it again\r\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\r\n      synchronizer.addSource({\r\n        viewportId: sourceViewportInfo.viewportId,\r\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n\r\n    // if the viewport was previously a target viewport, add it again\r\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\r\n      synchronizer.addTarget({\r\n        viewportId: targetViewportInfo.viewportId,\r\n        renderingEngineId: targetViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// Component displayName\r\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\r\n\r\nOHIFCornerstoneViewport.propTypes = {\r\n  displaySets: PropTypes.array.isRequired,\r\n  dataSource: PropTypes.object.isRequired,\r\n  viewportOptions: PropTypes.object,\r\n  displaySetOptions: PropTypes.arrayOf(PropTypes.any),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  onElementEnabled: PropTypes.func,\r\n  isJumpToMeasurementDisabled: PropTypes.bool,\r\n  // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n  // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n  // to set the initial state of the viewport's first image to render\r\n  initialImageIdOrIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default OHIFCornerstoneViewport;\r\n","import React, { ReactNode } from 'react';\r\nimport { WindowLevelActionMenu } from './WindowLevelActionMenu';\r\n\r\nexport function getWindowLevelActionMenu({\r\n  viewportId,\r\n  element,\r\n  displaySets,\r\n  servicesManager,\r\n  commandsManager,\r\n  verticalDirection,\r\n  horizontalDirection,\r\n}: withAppTypes): ReactNode {\r\n  const { customizationService } = servicesManager.services;\r\n\r\n  const { presets } = customizationService.get('cornerstone.windowLevelPresets');\r\n  const colorbarProperties = customizationService.get('cornerstone.colorbar');\r\n  const { volumeRenderingPresets, volumeRenderingQualityRange } = customizationService.get(\r\n    'cornerstone.3dVolumeRendering'\r\n  );\r\n\r\n  const displaySetPresets = displaySets\r\n    .filter(displaySet => presets[displaySet.Modality])\r\n    .map(displaySet => {\r\n      return { [displaySet.Modality]: presets[displaySet.Modality] };\r\n    });\r\n\r\n  return (\r\n    <WindowLevelActionMenu\r\n      viewportId={viewportId}\r\n      element={element}\r\n      presets={displaySetPresets}\r\n      verticalDirection={verticalDirection}\r\n      horizontalDirection={horizontalDirection}\r\n      commandsManager={commandsManager}\r\n      servicesManager={servicesManager}\r\n      colorbarProperties={colorbarProperties}\r\n      displaySets={displaySets}\r\n      volumeRenderingPresets={volumeRenderingPresets}\r\n      volumeRenderingQualityRange={volumeRenderingQualityRange}\r\n    />\r\n  );\r\n}\r\n"],"names":["CornerstoneImageScrollbar","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewport","viewportType","Enums","STACK","ORTHOGRAPHIC","sliceData","utilities","imageIndex","numberOfSlices","getCurrentImageIdIndex","data","imageIds","length","updateStackIndex","event","newImageIdIndex","detail","addEventListener","STACK_VIEWPORT_SCROLL","removeEventListener","updateVolumeIndex","VOLUME_NEW_IMAGE","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csToolsUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","getOrientationStringLPS","invertOrientationStringLPS","orientationMarkers","rotation","setRotation","useState","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","previousCamera","camera","undefined","CAMERA_MODIFIED","markers","useMemo","rowCosines","columnCosines","isDefaultValueSetForColumnCosine","imageId","metaData","getEnabledElement","viewUp","viewPlaneNormal","getCamera","viewRight","vec3","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","getViewportInfo","map","m","index","className","classNames","key","console","log","ViewportImageSliceLoadingIndicator","loading","setLoading","error","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","props","setViewportData","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","CustomizableViewportOverlay","ViewportOrientationMarkers","RenderCinePlayer","newStackFrameRate","dynamicInfo","dynamicInfoProp","customizationService","component","CinePlayerComponent","CinePlayer","get","setDynamicInfo","handleTimePointIndexChange","volumeId","timePointIndex","numTimePoints","splittingTag","label","eventTarget","StreamingEnums","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","cache","getVolume","updateDynamicInfo","useCallback","frameRate","onClose","setIsCineEnabled","onPlayPauseChange","onFrameRateChange","enabledVPElement","displaySetService","viewportGridService","cines","useCine","setNewStackFrameRate","appConfig","useAppConfig","isMountedRef","cineHandler","validFrameRate","Math","playClip","framesPerSecond","newDisplaySetHandler","viewports","displaySetInstanceUIDs","forEach","displaySetInstanceUID","displaySet","getDisplaySetByUID","FrameRate","round","autoPlayCine","isDynamicVolume","dynamicVolumeInfo","timePoints","STACK_VIEWPORT_NEW_STACK","VOLUME_VIEWPORT_NEW_VOLUME","cine","viewportActionCornersState","useViewportActionCornersContext","ViewportActionCorners","cornerComponents","Colormap","colormaps","displaySets","commandsManager","activeDisplaySet","setActiveDisplaySet","showPreview","setShowPreview","prePreviewColormap","setPrePreviewColormap","showPreviewRef","prePreviewColormapRef","activeDisplaySetRef","onSetColorLUT","opacity","includes","colormap","name","run","commandName","commandOptions","immediate","context","buttons","children","Modality","style","minWidth","fontSize","textAlign","display","justifyContent","alignItems","ButtonGroup","onActiveIndexChange","activeIndex","findIndex","ds","SwitchButton","checked","AllInOneMenu","description","onClick","onMouseEnter","getViewportColormap","StackViewport","getProperties","find","c","Name","actorEntry","getActors","entry","uid","onMouseLeave","setViewportColorbar","colorbarOptions","backgroundColor","getViewportOptions","background","ticks","position","font","color","maxNumTicks","tickSize","tickWidth","labelMargin","push","VolumeViewport","options","Colorbar","colorbarProperties","colorbarService","width","colorbarWidth","colorbarTickPosition","colorbarContainerPosition","colorbarInitialColormap","showColorbar","setShowColorbar","hasColorbar","onSetColorbar","activeColormapName","STATE_CHANGED","updateColorbarState","WindowLevel","presets","t","useTranslation","onSetWindowLevel","modalityPresets","modalityIndex","Object","entries","modality","presetsArray","preset","secondaryLabel","window","level","VolumeRenderingPresetsContent","filteredPresets","setFilteredPresets","searchValue","setSearchValue","selectedPreset","setSelectedPreset","handleSearchChange","filtered","filter","toLowerCase","handleApply","runCommand","InputFilterText","onDebounceChange","placeholder","Icon","maxChars","slice","formatLabel","Button","size","ButtonEnums","medium","type","secondary","VolumeRenderingPresets","volumeRenderingPresets","uiModalService","icon","rightIcon","onClickPresets","show","content","title","movable","contentProps","hide","containerDimensions","contentDimensions","VolumeRenderingQuality","volumeRenderingQualityRange","min","step","quality","setQuality","volumeQuality","actor","mapper","getMapper","spacing","getInputData","getSpacing","sampleDistance","getSampleDistance","averageSpacing","reduce","a","b","sqrt","htmlFor","e","parseInt","target","percentage","calculateBackground","VolumeShift","minShift","setMinShift","maxShift","setMaxShift","shift","setShift","shiftedBy","setStep","isBlocking","setIsBlocking","prevShiftRef","ofun","getProperty","getScalarOpacity","range","getRange","transferFunctionWidth","pow","floor","log10","onChangeRange","newShift","shiftDifference","shiftValue","onMouseDown","onMouseUp","VolumeLighting","ambient","setAmbient","diffuse","setDiffuse","specular","setSpecular","onAmbientChange","onDiffuseChange","onSpecularChange","getAmbient","getDiffuse","getSpecular","VolumeShade","shade","setShade","setKey","onShadeChange","getShade","VolumeRenderingOptions","WindowLevelActionMenu","verticalDirection","horizontalDirection","isLight","nonImageModalities","viewportGrid","useViewportGrid","activeViewportId","vpHeight","setVpHeight","clientHeight","menuKey","setMenuKey","is3DVolume","setIs3DVolume","newVpHeight","removeColorbar","VolumeViewport3D","iconClassName","menuStyle","maxHeight","onVisibilityChange","itemLabel","itemIcon","cacheJumpToMeasurementEvent","areEqual","prevProps","nextProps","needsRerendering","orientation","toolGroupId","prevDisplaySets","nextDisplaySets","i","prevDisplaySet","foundDisplaySet","nextDisplaySet","images","j","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","isHangingProtocolLayout","Error","some","isReconstructable","setScrollbarHeight","setEnabledVPElement","elementRef","measurementService","toolbarService","toolGroupService","syncGroupService","cornerstoneCacheService","stateSyncService","viewportActionCornersService","viewportDialogState","useViewportDialog","setImageScrollBarHeight","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","clear","elementEnabledHandler","setEnabledElement","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","synchronizersStore","synchronizerObj","sourceViewports","targetViewports","synchronizer","getSynchronizer","sourceViewportInfo","sourceViewport","targetViewportInfo","targetViewport","isSourceViewportInSynchronizer","getSourceViewports","isTargetViewportInSynchronizer","getTargetViewports","addSource","addTarget","_rehydrateSynchronizers","enableViewport","ELEMENT_ENABLED","storePresentation","disableElement","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","state","lutPresentationStore","positionPresentationStore","presentationIds","presentations","positionPresentation","positionPresentationId","lutPresentation","lutPresentationId","measurement","cs3DTools","loadViewportData","unsubscribeFromJumpToMeasurementEvents","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","jumpId","isConsumed","cornerstoneViewport","getViewportIdToJump","referencedImageId","metadata","_jumpToMeasurement","_subscribeToJumpToMeasurementEvents","displaysUIDs","_checkForCachedJumpToMeasurementEvents","addWindowLevelActionMenu","wlActionMenu","displaySetPresets","getWindowLevelActionMenu","TopToBottom","RightToLeft","setComponent","location","LOCATIONS","topRight","indexPriority","ref","resizeRef","useResizeDetector","onContextMenu","preventDefault","el","CornerstoneOverlays","toolBarService","Notification","message","actions","onSubmit","onOutsideClick","onKeyPress","OHIFViewportActionCorners","targetElementRef","targetElement","SOPInstanceUID","frameNumber","warn","referencedDisplaySet","setActiveViewportId","enabledElement","imageIdIndex","viewportCameraDirectionMatch","getImageIds","aSOPInstanceUID","aFrameNumber","getSOPInstanceAttributes","measurementViewPlane","viewportViewPlane","csUtils","abs","consume","displayName","initialImageIdOrIndex"],"sourceRoot":""}