{"version":3,"file":"3962.bundle.75f62954453dc09cb632.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dynamic-volume/src/id.js","webpack:///../../../extensions/cornerstone-dynamic-volume/src/actions/updateSegmentationsChartDisplaySet.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicVolumeControls.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/PanelGenerateImage.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicDataPanel.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicExport.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/index.ts"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dynamic-volume';\r\n\r\nexport { id, SOPClassHandlerName };\r\n","import { DicomMetadataStore, utils } from '@ohif/core';\r\n\r\nimport * as cs from '@cornerstonejs/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\n\r\nconst CHART_MODALITY = 'CHT';\r\nconst SEG_CHART_INSTANCE_UID = utils.guid();\r\n\r\n// Private SOPClassUid for chart data\r\nconst ChartDataSOPClassUid = '1.9.451.13215.7.3.2.7.6.1';\r\n\r\nconst { utilities: csToolsUtils } = csTools;\r\n\r\nfunction _getDateTimeStr() {\r\n  const now = new Date();\r\n  const date =\r\n    now.getFullYear() + ('0' + now.getUTCMonth()).slice(-2) + ('0' + now.getUTCDate()).slice(-2);\r\n  const time =\r\n    ('0' + now.getUTCHours()).slice(-2) +\r\n    ('0' + now.getUTCMinutes()).slice(-2) +\r\n    ('0' + now.getUTCSeconds()).slice(-2);\r\n\r\n  return { date, time };\r\n}\r\n\r\nfunction _getTimePointsDataByTagName(volume, timePointsTag) {\r\n  const uniqueTimePoints = volume.imageIds.reduce((timePoints, imageId) => {\r\n    const instance = DicomMetadataStore.getInstanceByImageId(imageId);\r\n    const timePointValue = instance[timePointsTag];\r\n\r\n    if (timePointValue !== undefined) {\r\n      timePoints.add(timePointValue);\r\n    }\r\n\r\n    return timePoints;\r\n  }, new Set());\r\n\r\n  return Array.from(uniqueTimePoints).sort((a: number, b: number) => a - b);\r\n}\r\n\r\nfunction _convertTimePointsUnit(timePoints, timePointsUnit) {\r\n  const validUnits = ['ms', 's', 'm', 'h'];\r\n  const divisors = [1000, 60, 60];\r\n  const currentUnitIndex = validUnits.indexOf(timePointsUnit);\r\n  let divisor = 1;\r\n\r\n  if (currentUnitIndex !== -1) {\r\n    for (let i = currentUnitIndex; i < validUnits.length - 1; i++) {\r\n      const newDivisor = divisor * divisors[i];\r\n      const greaterThanDivisorCount = timePoints.filter(timePoint => timePoint > newDivisor).length;\r\n\r\n      // Change the scale only if more than 50% of the time points are\r\n      // greater than the new divisor.\r\n      if (greaterThanDivisorCount <= timePoints.length / 2) {\r\n        break;\r\n      }\r\n\r\n      divisor = newDivisor;\r\n      timePointsUnit = validUnits[i + 1];\r\n    }\r\n\r\n    if (divisor > 1) {\r\n      timePoints = timePoints.map(timePoint => timePoint / divisor);\r\n    }\r\n  }\r\n\r\n  return { timePoints, timePointsUnit };\r\n}\r\n\r\n// It currently supports only one tag but a few other will be added soon\r\n// Supported 4D Tags\r\n//   (0018,1060) Trigger Time                   [NOK]\r\n//   (0018,0081) Echo Time                      [NOK]\r\n//   (0018,0086) Echo Number                    [NOK]\r\n//   (0020,0100) Temporal Position Identifier   [NOK]\r\n//   (0054,1300) FrameReferenceTime             [OK]\r\nfunction _getTimePointsData(volume) {\r\n  const timePointsTags = {\r\n    FrameReferenceTime: {\r\n      unit: 'ms',\r\n    },\r\n  };\r\n\r\n  const timePointsTagNames = Object.keys(timePointsTags);\r\n  let timePoints;\r\n  let timePointsUnit;\r\n\r\n  for (let i = 0; i < timePointsTagNames.length; i++) {\r\n    const tagName = timePointsTagNames[i];\r\n    const curTimePoints = _getTimePointsDataByTagName(volume, tagName);\r\n\r\n    if (curTimePoints.length) {\r\n      timePoints = curTimePoints;\r\n      timePointsUnit = timePointsTags[tagName].unit;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!timePoints.length) {\r\n    const concatTagNames = timePointsTagNames.join(', ');\r\n\r\n    throw new Error(`Could not extract time points data for the following tags: ${concatTagNames}`);\r\n  }\r\n\r\n  const convertedTimePoints = _convertTimePointsUnit(timePoints, timePointsUnit);\r\n\r\n  timePoints = convertedTimePoints.timePoints;\r\n  timePointsUnit = convertedTimePoints.timePointsUnit;\r\n\r\n  return { timePoints, timePointsUnit };\r\n}\r\n\r\nfunction _getSegmentationData(segmentation, volumesTimePointsCache, displaySetService) {\r\n  const displaySets = displaySetService.getActiveDisplaySets();\r\n\r\n  const dynamic4DDisplaySet = displaySets.find(displaySet => {\r\n    const anInstance = displaySet.instances?.[0];\r\n\r\n    if (anInstance) {\r\n      return (\r\n        anInstance.FrameReferenceTime !== undefined || anInstance.NumberOfTimeSlices !== undefined\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // const referencedDynamicVolume = cs.cache.getVolume(dynamic4DDisplaySet.displaySetInstanceUID);\r\n  let volumeCacheKey: string | undefined;\r\n  const volumeId = dynamic4DDisplaySet.displaySetInstanceUID;\r\n\r\n  for (const [key] of cs.cache._volumeCache) {\r\n    if (key.includes(volumeId)) {\r\n      volumeCacheKey = key;\r\n      break;\r\n    }\r\n  }\r\n\r\n  let referencedDynamicVolume;\r\n  if (volumeCacheKey) {\r\n    referencedDynamicVolume = cs.cache.getVolume(volumeCacheKey);\r\n  }\r\n\r\n  const { StudyInstanceUID, StudyDescription } = DicomMetadataStore.getInstanceByImageId(\r\n    referencedDynamicVolume.imageIds[0]\r\n  );\r\n\r\n  const [timeData, _] = csToolsUtils.dynamicVolume.getDataInTime(referencedDynamicVolume, {\r\n    maskVolumeId: segmentation.id,\r\n  }) as number[][];\r\n\r\n  const pixelCount = timeData.length;\r\n\r\n  if (pixelCount === 0) {\r\n    return [];\r\n  }\r\n\r\n  // since we only use one segmentation representation per segmentationId\r\n  // it is fine to pick the first one\r\n  const segmentationRepresentations = csTools.segmentation.state.getSegmentationIdRepresentations(\r\n    segmentation.id\r\n  );\r\n\r\n  const segmentationRepresentationUID =\r\n    segmentationRepresentations[0].segmentationRepresentationUID;\r\n\r\n  const toolGroupId = csTools.segmentation.state.getToolGroupIdFromSegmentationRepresentationUID(\r\n    segmentationRepresentationUID\r\n  );\r\n\r\n  // Todo: this is useless we should be able to grab color with just segRepUID and segmentIndex\r\n  const color = csTools.segmentation.config.color.getColorForSegmentIndex(\r\n    toolGroupId,\r\n    segmentationRepresentationUID,\r\n    1 // segmentIndex\r\n  );\r\n\r\n  const hexColor = cs.utilities.color.rgbToHex(...color);\r\n  let timePointsData = volumesTimePointsCache.get(referencedDynamicVolume);\r\n\r\n  if (!timePointsData) {\r\n    timePointsData = _getTimePointsData(referencedDynamicVolume);\r\n    volumesTimePointsCache.set(referencedDynamicVolume, timePointsData);\r\n  }\r\n\r\n  const { timePoints, timePointsUnit } = timePointsData;\r\n\r\n  if (timePoints.length !== timeData[0].length) {\r\n    throw new Error('Invalid number of time points returned');\r\n  }\r\n\r\n  const timepointsCount = timePoints.length;\r\n  const chartSeriesData = new Array(timepointsCount);\r\n\r\n  for (let i = 0; i < timepointsCount; i++) {\r\n    const average = timeData.reduce((acc, cur) => acc + cur[i] / pixelCount, 0);\r\n\r\n    chartSeriesData[i] = [timePoints[i], average];\r\n  }\r\n\r\n  return {\r\n    StudyInstanceUID,\r\n    StudyDescription,\r\n    chartData: {\r\n      series: {\r\n        label: segmentation.label,\r\n        points: chartSeriesData,\r\n        color: hexColor,\r\n      },\r\n      axis: {\r\n        x: {\r\n          label: `Time (${timePointsUnit})`,\r\n        },\r\n        y: {\r\n          label: `Vl (Bq/ml)`,\r\n        },\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nfunction _getInstanceFromSegmentations(segmentations, displaySetService) {\r\n  if (!segmentations.length) {\r\n    return;\r\n  }\r\n\r\n  const volumesTimePointsCache = new WeakMap();\r\n  const segmentationsData = segmentations.map(segmentation =>\r\n    _getSegmentationData(segmentation, volumesTimePointsCache, displaySetService)\r\n  );\r\n\r\n  const { date: seriesDate, time: seriesTime } = _getDateTimeStr();\r\n  const series = segmentationsData.reduce((allSeries, curSegData) => {\r\n    return [...allSeries, curSegData.chartData.series];\r\n  }, []);\r\n\r\n  const instance = {\r\n    SOPClassUID: ChartDataSOPClassUid,\r\n    Modality: CHART_MODALITY,\r\n    SOPInstanceUID: utils.guid(),\r\n    SeriesDate: seriesDate,\r\n    SeriesTime: seriesTime,\r\n    SeriesInstanceUID: SEG_CHART_INSTANCE_UID,\r\n    StudyInstanceUID: segmentationsData[0].StudyInstanceUID,\r\n    StudyDescription: segmentationsData[0].StudyDescription,\r\n    SeriesNumber: 100,\r\n    SeriesDescription: 'Segmentation chart series data',\r\n    chartData: {\r\n      series,\r\n      axis: { ...segmentationsData[0].chartData.axis },\r\n    },\r\n  };\r\n\r\n  const seriesMetadata = {\r\n    StudyInstanceUID: instance.StudyInstanceUID,\r\n    StudyDescription: instance.StudyDescription,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    SeriesDescription: instance.SeriesDescription,\r\n    SeriesNumber: instance.SeriesNumber,\r\n    SeriesTime: instance.SeriesTime,\r\n    SOPClassUID: instance.SOPClassUID,\r\n    Modality: instance.Modality,\r\n  };\r\n\r\n  return { seriesMetadata, instance };\r\n}\r\n\r\nfunction updateSegmentationsChartDisplaySet({ servicesManager }: withAppTypes): void {\r\n  const { segmentationService, displaySetService } = servicesManager.services;\r\n  const segmentations = segmentationService.getSegmentations();\r\n  const { seriesMetadata, instance } =\r\n    _getInstanceFromSegmentations(segmentations, displaySetService) ?? {};\r\n\r\n  if (seriesMetadata && instance) {\r\n    // An event is triggered after adding the instance and the displaySet is created\r\n    DicomMetadataStore.addSeriesMetadata([seriesMetadata], true);\r\n    DicomMetadataStore.addInstances([instance], true);\r\n  }\r\n}\r\n\r\nexport { updateSegmentationsChartDisplaySet as default };\r\n","import * as importedActions from './actions';\r\nimport { utilities, Enums } from '@cornerstonejs/tools';\r\nimport { cache } from '@cornerstonejs/core';\r\n\r\nconst LABELMAP = Enums.SegmentationRepresentations.Labelmap;\r\n\r\nconst commandsModule = ({ commandsManager, servicesManager }: withAppTypes) => {\r\n  const services = servicesManager.services;\r\n  const { displaySetService, viewportGridService, segmentationService } = services;\r\n\r\n  const actions = {\r\n    ...importedActions,\r\n    getDynamic4DDisplaySet: () => {\r\n      const displaySets = displaySetService.getActiveDisplaySets();\r\n\r\n      const dynamic4DDisplaySet = displaySets.find(displaySet => {\r\n        const anInstance = displaySet.instances?.[0];\r\n\r\n        if (anInstance) {\r\n          return (\r\n            anInstance.FrameReferenceTime !== undefined ||\r\n            anInstance.NumberOfTimeSlices !== undefined ||\r\n            anInstance.TemporalPositionIdentifier !== undefined\r\n          );\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      return dynamic4DDisplaySet;\r\n    },\r\n    getComputedDisplaySets: () => {\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySets = [...displaySetCache.values()];\r\n      const computedDisplaySets = cachedDisplaySets.filter(displaySet => {\r\n        return displaySet.isDerived;\r\n      });\r\n      return computedDisplaySets;\r\n    },\r\n    exportTimeReportCSV: ({ segmentations, config, options, summaryStats }) => {\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const volumeId = dynamic4DDisplaySet?.displaySetInstanceUID;\r\n\r\n      // cache._volumeCache is a map that has a key that includes the volumeId\r\n      // it is not exactly the volumeId, but it is the key that includes the volumeId\r\n      // so we can't do cache._volumeCache.get(volumeId) we should iterate\r\n      // over the keys and find the one that includes the volumeId\r\n      let volumeCacheKey: string | undefined;\r\n\r\n      for (const [key] of cache._volumeCache) {\r\n        if (key.includes(volumeId)) {\r\n          volumeCacheKey = key;\r\n          break;\r\n        }\r\n      }\r\n\r\n      let dynamicVolume;\r\n      if (volumeCacheKey) {\r\n        dynamicVolume = cache.getVolume(volumeCacheKey);\r\n      }\r\n\r\n      const instance = dynamic4DDisplaySet.instances[0];\r\n\r\n      const csv = [];\r\n\r\n      // CSV header information with placeholder empty values for the metadata lines\r\n      csv.push(`Patient ID,${instance.PatientID},`);\r\n      csv.push(`Study Date,${instance.StudyDate},`);\r\n      csv.push(`StudyInstanceUID,${instance.StudyInstanceUID},`);\r\n      csv.push(`StudyDescription,${instance.StudyDescription},`);\r\n      csv.push(`SeriesInstanceUID,${instance.SeriesInstanceUID},`);\r\n\r\n      // empty line\r\n      csv.push('');\r\n      csv.push('');\r\n\r\n      // Helper function to calculate standard deviation\r\n      function calculateStandardDeviation(data) {\r\n        const n = data.length;\r\n        const mean = data.reduce((acc, value) => acc + value, 0) / n;\r\n        const squaredDifferences = data.map(value => (value - mean) ** 2);\r\n        const variance = squaredDifferences.reduce((acc, value) => acc + value, 0) / n;\r\n        const stdDeviation = Math.sqrt(variance);\r\n        return stdDeviation;\r\n      }\r\n\r\n      // Iterate through each segmentation to get the timeData and ijkCoords\r\n      segmentations.forEach((segmentation, segmentationIndex) => {\r\n        const [timeData, ijkCoords] = utilities.dynamicVolume.getDataInTime(dynamicVolume, {\r\n          maskVolumeId: segmentation.id,\r\n        }) as number[][];\r\n\r\n        if (summaryStats) {\r\n          // Adding column headers for pixel identifier and segmentation label ids\r\n          let headers = 'Operation,Segmentation Label ID';\r\n          const maxLength = dynamicVolume.numTimePoints;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            headers += `,Time Point ${t}`;\r\n          }\r\n          csv.push(headers);\r\n          // // perform summary statistics on the timeData including for each time point, mean, median, min, max, and standard deviation for\r\n          // // all the voxels in the ROI\r\n          const mean = [];\r\n          const min = [];\r\n          const minIJK = [];\r\n          const max = [];\r\n          const maxIJK = [];\r\n          const std = [];\r\n\r\n          const numVoxels = timeData.length;\r\n          // Helper function to calculate standard deviation\r\n          for (let timeIndex = 0; timeIndex < maxLength; timeIndex++) {\r\n            // for each voxel in the ROI, get the value at the current time point\r\n            const voxelValues = [];\r\n            for (let voxelIndex = 0; voxelIndex < numVoxels; voxelIndex++) {\r\n              voxelValues.push(timeData[voxelIndex][timeIndex]);\r\n            }\r\n\r\n            mean.push(voxelValues.reduce((acc, value) => acc + value, 0) / numVoxels);\r\n            const minimum = Math.min(...voxelValues);\r\n            min.push(minimum);\r\n            minIJK.push(ijkCoords[voxelValues.indexOf(minimum)]);\r\n            const maximum = Math.max(...voxelValues);\r\n            max.push(maximum);\r\n            maxIJK.push(ijkCoords[voxelValues.indexOf(maximum)]);\r\n            std.push(calculateStandardDeviation(voxelValues));\r\n          }\r\n\r\n          let row = `Mean,${segmentation.label}`;\r\n          // Generate separate rows for each statistic\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${mean[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Standard Deviation,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${std[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Min,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${min[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Max,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${max[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n        } else {\r\n          // Adding column headers for pixel identifier and segmentation label ids\r\n          let headers = 'Pixel Identifier (IJK),Segmentation Label ID';\r\n          const maxLength = dynamicVolume.numTimePoints;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            headers += `,Time Point ${t}`;\r\n          }\r\n          csv.push(headers);\r\n          // Assuming timeData and ijkCoords are of the same length\r\n          for (let i = 0; i < timeData.length; i++) {\r\n            // Generate the pixel identifier\r\n            const pixelIdentifier = `${ijkCoords[i][0]}_${ijkCoords[i][1]}_${ijkCoords[i][2]}`;\r\n\r\n            // Start a new row for the current pixel\r\n            let row = `${pixelIdentifier},${segmentation.label}`;\r\n\r\n            // Add time data points for this pixel\r\n            for (let t = 0; t < timeData[i].length; t++) {\r\n              row += `,${timeData[i][t]}`;\r\n            }\r\n\r\n            // Append the row to the CSV array\r\n            csv.push(row);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Convert to CSV string\r\n      const csvContent = csv.join('\\n');\r\n\r\n      // Generate filename and trigger download\r\n      const filename = `${instance.PatientID}.csv`;\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', filename);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    },\r\n    swapDynamicWithComputedDisplaySet: ({ displaySet }) => {\r\n      const computedDisplaySet = displaySet;\r\n\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySetKeys = [displaySetCache.keys()];\r\n      const { displaySetInstanceUID } = computedDisplaySet;\r\n      // Check to see if computed display set is already in cache\r\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\r\n        displaySetCache.set(displaySetInstanceUID, computedDisplaySet);\r\n      }\r\n\r\n      // Get all viewports and their corresponding indices\r\n      const { viewports } = viewportGridService.getState();\r\n\r\n      // get the viewports in the grid\r\n      // iterate over them and find the ones that are showing a dynamic\r\n      // volume (displaySet), and replace that exact displaySet with the\r\n      // computed displaySet\r\n\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const viewportsToUpdate = [];\r\n\r\n      for (const [key, value] of viewports) {\r\n        const viewport = value;\r\n        const viewportOptions = viewport.viewportOptions;\r\n        const { displaySetInstanceUIDs } = viewport;\r\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\r\n          dynamic4DDisplaySet.displaySetInstanceUID\r\n        );\r\n        if (displaySetInstanceUIDIndex !== -1) {\r\n          const newViewport = {\r\n            viewportId: viewport.viewportId,\r\n            // merge the other displaySetInstanceUIDs with the new one\r\n            displaySetInstanceUIDs: [\r\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\r\n              displaySetInstanceUID,\r\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\r\n            ],\r\n            viewportOptions: {\r\n              initialImageOptions: viewportOptions.initialImageOptions,\r\n              viewportType: 'volume',\r\n              orientation: viewportOptions.orientation,\r\n              background: viewportOptions.background,\r\n            },\r\n          };\r\n          viewportsToUpdate.push(newViewport);\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewports(viewportsToUpdate);\r\n    },\r\n    swapComputedWithDynamicDisplaySet: () => {\r\n      // Todo: this assumes there is only one dynamic display set in the viewer\r\n      const dynamicDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySetKeys = [...displaySetCache.keys()]; // Fix: Spread to get the array\r\n      const { displaySetInstanceUID } = dynamicDisplaySet;\r\n\r\n      // Check to see if dynamic display set is already in cache\r\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\r\n        displaySetCache.set(displaySetInstanceUID, dynamicDisplaySet);\r\n      }\r\n\r\n      // Get all viewports and their corresponding indices\r\n      const { viewports } = viewportGridService.getState();\r\n\r\n      // Get the computed 4D display set\r\n      const computed4DDisplaySet = actions.getComputedDisplaySets()[0];\r\n\r\n      const viewportsToUpdate = [];\r\n\r\n      for (const [key, value] of viewports) {\r\n        const viewport = value;\r\n        const viewportOptions = viewport.viewportOptions;\r\n        const { displaySetInstanceUIDs } = viewport;\r\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\r\n          computed4DDisplaySet.displaySetInstanceUID\r\n        );\r\n        if (displaySetInstanceUIDIndex !== -1) {\r\n          const newViewport = {\r\n            viewportId: viewport.viewportId,\r\n            // merge the other displaySetInstanceUIDs with the new one\r\n            displaySetInstanceUIDs: [\r\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\r\n              displaySetInstanceUID,\r\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\r\n            ],\r\n            viewportOptions: {\r\n              initialImageOptions: viewportOptions.initialImageOptions,\r\n              viewportType: 'volume',\r\n              orientation: viewportOptions.orientation,\r\n              background: viewportOptions.background,\r\n            },\r\n          };\r\n          viewportsToUpdate.push(newViewport);\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewports(viewportsToUpdate);\r\n    },\r\n    createNewLabelMapForDynamicVolume: async ({ label }) => {\r\n      const { viewports, activeViewportId } = viewportGridService.getState();\r\n\r\n      // get the dynamic 4D display set\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n      const dynamic4DDisplaySetInstanceUID = dynamic4DDisplaySet.displaySetInstanceUID;\r\n\r\n      // check if the dynamic 4D display set is in the display, if not we might have\r\n      // the computed volumes and we should choose them for the segmentation\r\n      // creation\r\n\r\n      let referenceDisplaySet;\r\n\r\n      const activeViewport = viewports.get(activeViewportId);\r\n      const activeDisplaySetInstanceUIDs = activeViewport.displaySetInstanceUIDs;\r\n      const dynamicIsInActiveViewport = activeDisplaySetInstanceUIDs.includes(\r\n        dynamic4DDisplaySetInstanceUID\r\n      );\r\n\r\n      if (dynamicIsInActiveViewport) {\r\n        referenceDisplaySet = dynamic4DDisplaySet;\r\n      }\r\n\r\n      if (!referenceDisplaySet) {\r\n        // try to see if there is any derived displaySet in the active viewport\r\n        // which is referencing the dynamic 4D display set\r\n\r\n        // Todo: this is wrong but I don't have time to fix it now\r\n        const cachedDisplaySets = displaySetService.getDisplaySetCache();\r\n        for (const [key, displaySet] of cachedDisplaySets) {\r\n          if (displaySet.referenceDisplaySetUID === dynamic4DDisplaySetInstanceUID) {\r\n            referenceDisplaySet = displaySet;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!referenceDisplaySet) {\r\n        throw new Error('No reference display set found based on the dynamic data');\r\n      }\r\n\r\n      const segmentationId = await segmentationService.createSegmentationForDisplaySet(\r\n        referenceDisplaySet.displaySetInstanceUID,\r\n        { label }\r\n      );\r\n\r\n      // Add Segmentation to all toolGroupIds in the viewer\r\n      const toolGroupIds = Array.from(\r\n        viewports.values(),\r\n        viewport => viewport.viewportOptions.toolGroupId\r\n      );\r\n\r\n      const representationType = LABELMAP;\r\n\r\n      for (const toolGroupId of toolGroupIds) {\r\n        const hydrateSegmentation = true;\r\n        await segmentationService.addSegmentationRepresentationToToolGroup(\r\n          toolGroupId,\r\n          segmentationId,\r\n          hydrateSegmentation,\r\n          representationType\r\n        );\r\n\r\n        segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\r\n      }\r\n\r\n      return segmentationId;\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    updateSegmentationsChartDisplaySet: {\r\n      commandFn: actions.updateSegmentationsChartDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    exportTimeReportCSV: {\r\n      commandFn: actions.exportTimeReportCSV,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    swapDynamicWithComputedDisplaySet: {\r\n      commandFn: actions.swapDynamicWithComputedDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    createNewLabelMapForDynamicVolume: {\r\n      commandFn: actions.createNewLabelMapForDynamicVolume,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    swapComputedWithDynamicDisplaySet: {\r\n      commandFn: actions.swapComputedWithDynamicDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'DYNAMIC-VOLUME:CORNERSTONE',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  InputDoubleRange,\r\n  Button,\r\n  PanelSection,\r\n  ButtonGroup,\r\n  IconButton,\r\n  InputNumber,\r\n  Icon,\r\n  Tooltip,\r\n} from '@ohif/ui';\r\n\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\nconst controlClassNames = {\r\n  sizeClassName: 'w-[58px] h-[28px]',\r\n  arrowsDirection: 'horizontal',\r\n  labelPosition: 'bottom',\r\n};\r\n\r\nconst Header = ({ title, tooltip }) => (\r\n  <div className=\"flex items-center space-x-1\">\r\n    <Tooltip\r\n      content={<div className=\"text-white\">{tooltip}</div>}\r\n      position=\"bottom-left\"\r\n      tight={true}\r\n      tooltipBoxClassName=\"max-w-xs p-2\"\r\n    >\r\n      <Icon\r\n        name=\"info-link\"\r\n        className=\"text-primary-active h-[14px] w-[14px]\"\r\n      />\r\n    </Tooltip>\r\n    <span className=\"text-aqua-pale text-[11px] uppercase\">{title}</span>\r\n  </div>\r\n);\r\n\r\nconst DynamicVolumeControls = ({\r\n  isPlaying,\r\n  onPlayPauseChange,\r\n  // fps\r\n  fps,\r\n  onFpsChange,\r\n  minFps,\r\n  maxFps,\r\n  // Frames\r\n  currentFrameIndex,\r\n  onFrameChange,\r\n  framesLength,\r\n  onGenerate,\r\n  onDoubleRangeChange,\r\n  onDynamicClick,\r\n}) => {\r\n  const [computedView, setComputedView] = useState(false);\r\n\r\n  const [computeViewMode, setComputeViewMode] = useState(Enums.DynamicOperatorType.SUM);\r\n\r\n  const [sliderRangeValues, setSliderRangeValues] = useState([framesLength / 4, framesLength / 2]);\r\n\r\n  useEffect(() => {\r\n    setSliderRangeValues([framesLength / 4, framesLength / 2]);\r\n  }, [framesLength]);\r\n\r\n  const handleSliderChange = newValues => {\r\n    onDoubleRangeChange(newValues);\r\n\r\n    if (newValues[0] === sliderRangeValues[0] && newValues[1] === sliderRangeValues[1]) {\r\n      return;\r\n    }\r\n    setSliderRangeValues(newValues);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex select-none flex-col\">\r\n      <PanelSection\r\n        title=\"Controls\"\r\n        childrenClassName=\"space-y-4 pb-5 px-5\"\r\n      >\r\n        <div className=\"mt-2\">\r\n          <Header\r\n            title=\"View\"\r\n            tooltip={\r\n              'Select the view mode, 4D to view the dynamic volume or Computed to view the computed volume'\r\n            }\r\n          />\r\n          <ButtonGroup className=\"mt-2 w-full\">\r\n            <button\r\n              className=\"w-1/2\"\r\n              onClick={() => {\r\n                setComputedView(false);\r\n                onDynamicClick?.();\r\n              }}\r\n            >\r\n              4D\r\n            </button>\r\n            <button\r\n              className=\"w-1/2\"\r\n              onClick={() => {\r\n                setComputedView(true);\r\n              }}\r\n            >\r\n              Computed\r\n            </button>\r\n          </ButtonGroup>\r\n        </div>\r\n        <div>\r\n          <FrameControls\r\n            onPlayPauseChange={onPlayPauseChange}\r\n            isPlaying={isPlaying}\r\n            computedView={computedView}\r\n            // fps\r\n            fps={fps}\r\n            onFpsChange={onFpsChange}\r\n            minFps={minFps}\r\n            maxFps={maxFps}\r\n            //\r\n            framesLength={framesLength}\r\n            onFrameChange={onFrameChange}\r\n            currentFrameIndex={currentFrameIndex}\r\n          />\r\n        </div>\r\n        <div className={`mt-6 flex flex-col ${computedView ? '' : 'ohif-disabled'}`}>\r\n          <Header\r\n            title=\"Computed Operation\"\r\n            tooltip={\r\n              <div>\r\n                Operation Buttons (SUM, AVERAGE, SUBTRACT): Select the mathematical operation to be\r\n                applied to the data set.\r\n                <br></br> Range Slider: Choose the numeric range within which the operation will be\r\n                performed.\r\n                <br></br>Generate Button: Execute the chosen operation on the specified range of\r\n                data.{' '}\r\n              </div>\r\n            }\r\n          />\r\n          <ButtonGroup\r\n            className={`mt-2 w-full `}\r\n            separated={true}\r\n          >\r\n            <button\r\n              className=\"w-1/2\"\r\n              onClick={() => setComputeViewMode(Enums.DynamicOperatorType.SUM)}\r\n            >\r\n              {Enums.DynamicOperatorType.SUM.toString().toUpperCase()}\r\n            </button>\r\n            <button\r\n              className=\"w-1/2\"\r\n              onClick={() => setComputeViewMode(Enums.DynamicOperatorType.AVERAGE)}\r\n            >\r\n              {Enums.DynamicOperatorType.AVERAGE.toString().toUpperCase()}\r\n            </button>\r\n            <button\r\n              className=\"w-1/2\"\r\n              onClick={() => setComputeViewMode(Enums.DynamicOperatorType.SUBTRACT)}\r\n            >\r\n              {Enums.DynamicOperatorType.SUBTRACT.toString().toUpperCase()}\r\n            </button>\r\n          </ButtonGroup>\r\n          <div className=\"w-ful mt-2\">\r\n            <InputDoubleRange\r\n              values={sliderRangeValues}\r\n              onChange={handleSliderChange}\r\n              minValue={0}\r\n              showLabel={true}\r\n              allowNumberEdit={true}\r\n              maxValue={framesLength}\r\n              step={1}\r\n            />\r\n          </div>\r\n          <Button\r\n            className=\"mt-2 !h-[26px] !w-[115px] self-start !p-0\"\r\n            onClick={() => {\r\n              onGenerate(computeViewMode);\r\n            }}\r\n          >\r\n            Generate\r\n          </Button>\r\n        </div>\r\n      </PanelSection>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicVolumeControls;\r\n\r\nfunction FrameControls({\r\n  isPlaying,\r\n  onPlayPauseChange,\r\n  fps,\r\n  minFps,\r\n  maxFps,\r\n  onFpsChange,\r\n  framesLength,\r\n  onFrameChange,\r\n  currentFrameIndex,\r\n  computedView,\r\n}) {\r\n  const getPlayPauseIconName = () => (isPlaying ? 'icon-pause' : 'icon-play');\r\n\r\n  return (\r\n    <div className={computedView && 'ohif-disabled'}>\r\n      <Header\r\n        title=\"4D Controls\"\r\n        tooltip={\r\n          <div>\r\n            Play/Pause Button: Begin or pause the animation of the 4D visualization. <br></br> Frame\r\n            Selector: Navigate through individual frames of the 4D data. <br></br> FPS (Frames Per\r\n            Second) Selector: Adjust the playback speed of the animation.\r\n          </div>\r\n        }\r\n      />\r\n      <div className=\"mt-3 flex justify-between\">\r\n        <IconButton\r\n          className=\"bg-customblue-30 h-[26px] w-[58px] rounded-[4px]\"\r\n          onClick={() => onPlayPauseChange(!isPlaying)}\r\n        >\r\n          <Icon\r\n            name={getPlayPauseIconName()}\r\n            className=\" active:text-primary-light hover:bg-customblue-300 h-[24px] w-[24px] cursor-pointer text-white\"\r\n          />\r\n        </IconButton>\r\n        <InputNumber\r\n          value={currentFrameIndex}\r\n          onChange={onFrameChange}\r\n          minValue={0}\r\n          maxValue={framesLength}\r\n          label=\"Frame\"\r\n          {...controlClassNames}\r\n        />\r\n        <InputNumber\r\n          value={fps}\r\n          onChange={onFpsChange}\r\n          minValue={minFps}\r\n          maxValue={maxFps}\r\n          {...controlClassNames}\r\n          label=\"FPS\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useCine, useViewportGrid } from '@ohif/ui';\r\nimport { cache, utilities as csUtils, volumeLoader, eventTarget } from '@cornerstonejs/core';\r\nimport { Enums } from '@cornerstonejs/streaming-image-volume-loader';\r\nimport { utilities as cstUtils } from '@cornerstonejs/tools';\r\nimport DynamicVolumeControls from './DynamicVolumeControls';\r\n\r\nconst SOPClassHandlerId = '@ohif/extension-default.sopClassHandlerModule.stack';\r\n\r\nexport default function PanelGenerateImage({ servicesManager, commandsManager }: withAppTypes) {\r\n  const { cornerstoneViewportService, viewportGridService, displaySetService } =\r\n    servicesManager.services;\r\n\r\n  const [{ isCineEnabled }, cineService] = useCine();\r\n  const [{ activeViewportId }] = useViewportGrid();\r\n\r\n  //\r\n  const [timePointsRange, setTimePointsRange] = useState([]);\r\n  const [timePointsRangeToUseForGenerate, setTimePointsRangeToUseForGenerate] = useState([]);\r\n  const [computedDisplaySet, setComputedDisplaySet] = useState(null);\r\n  const [dynamicVolume, setDynamicVolume] = useState(null);\r\n  const [frameRate, setFrameRate] = useState(20);\r\n  const [isPlaying, setIsPlaying] = useState(isCineEnabled);\r\n  const [timePointRendered, setTimePointRendered] = useState(null);\r\n  const [displayingComputed, setDisplayingComputed] = useState(false);\r\n\r\n  //\r\n  const uuidComputedVolume = useRef(csUtils.uuidv4());\r\n  const uuidDynamicVolume = useRef(null);\r\n  const computedVolumeId = `cornerstoneStreamingImageVolume:${uuidComputedVolume.current}`;\r\n\r\n  useEffect(() => {\r\n    const evt = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\r\n\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(evt, evtDetails => {\r\n      evtDetails.viewportData.data.forEach(volumeData => {\r\n        if (volumeData.volume.isDynamicVolume()) {\r\n          setDynamicVolume(volumeData.volume);\r\n          uuidDynamicVolume.current = volumeData.displaySetInstanceUID;\r\n          setTimePointsRange([1, volumeData.volume.numTimePoints]);\r\n        }\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [cornerstoneViewportService]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = servicesManager.services.cineService.subscribe(\r\n      servicesManager.services.cineService.EVENTS.CINE_STATE_CHANGED,\r\n      evt => {\r\n        setIsPlaying(evt.isPlaying);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [cineService]);\r\n\r\n  useEffect(() => {\r\n    const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\r\n\r\n    if (!displaySetUIDs || displaySetUIDs.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const displaySets = displaySetUIDs.map(displaySetUID =>\r\n      displaySetService.getDisplaySetByUID(displaySetUID)\r\n    );\r\n\r\n    const dynamicVolumeDisplaySet = displaySets.find(displaySet => displaySet.isDynamicVolume);\r\n\r\n    if (!dynamicVolumeDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const dynamicVolume = cache\r\n      .getVolumes()\r\n      .find(volume => volume.volumeId.includes(dynamicVolumeDisplaySet.displaySetInstanceUID));\r\n\r\n    if (!dynamicVolume) {\r\n      return;\r\n    }\r\n\r\n    setDynamicVolume(dynamicVolume);\r\n    uuidDynamicVolume.current = dynamicVolumeDisplaySet.displaySetInstanceUID;\r\n    setTimePointsRange([1, dynamicVolume.numTimePoints]);\r\n  }, [activeViewportId, cornerstoneViewportService]);\r\n\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const evt = Enums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED;\r\n\r\n    const callback = evt => {\r\n      setTimePointRendered(evt.detail.timePointIndex);\r\n    };\r\n\r\n    eventTarget.addEventListener(evt, callback);\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(evt, callback);\r\n    };\r\n  }, [cornerstoneViewportService]);\r\n\r\n  function renderGeneratedImage(displaySet) {\r\n    commandsManager.runCommand('swapDynamicWithComputedDisplaySet', {\r\n      displaySet,\r\n    });\r\n\r\n    setDisplayingComputed(true);\r\n  }\r\n\r\n  function renderDynamicImage(displaySet) {\r\n    commandsManager.runCommand('swapComputedWithDynamicDisplaySet');\r\n  }\r\n\r\n  // Get computed volume from cache, calculate the data across the time frames,\r\n  // set the scalar data to the computedVolume, and create displaySet\r\n  async function onGenerateImage(operationName) {\r\n    const dynamicVolumeId = dynamicVolume.volumeId;\r\n\r\n    if (!dynamicVolumeId) {\r\n      return;\r\n    }\r\n\r\n    let computedVolume = cache.getVolume(computedVolumeId);\r\n\r\n    if (!computedVolume) {\r\n      await createComputedVolume(dynamicVolumeId, computedVolumeId);\r\n      computedVolume = cache.getVolume(computedVolumeId);\r\n    }\r\n\r\n    const vals = timePointsRangeToUseForGenerate;\r\n\r\n    const targets = Array.from({ length: vals[1] - vals[0] + 1 }, (_, i) => i + vals[0]);\r\n\r\n    const dataInTime = cstUtils.dynamicVolume.generateImageFromTimeData(\r\n      dynamicVolume,\r\n      operationName,\r\n      operationName === 'SUBTRACT' ? vals : targets\r\n    );\r\n\r\n    // Add loadStatus.loaded to computed volume and set to true\r\n    computedVolume.loadStatus = {};\r\n    computedVolume.loadStatus.loaded = true;\r\n    // Set computed scalar data to volume\r\n    const scalarData = computedVolume.getScalarData();\r\n    scalarData.set(dataInTime);\r\n\r\n    // If computed display set does not exist, create an object to be used as\r\n    // the displaySet. If it does exist, update the image data and vtkTexture\r\n    if (!computedDisplaySet) {\r\n      const displaySet = {\r\n        volumeLoaderSchema: computedVolume.volumeId.split(':')[0],\r\n        displaySetInstanceUID: uuidComputedVolume.current,\r\n        SOPClassHandlerId: SOPClassHandlerId,\r\n        Modality: dynamicVolume.metadata.Modality,\r\n        isMultiFrame: false,\r\n        numImageFrames: 1,\r\n        uid: uuidComputedVolume.current,\r\n        referenceDisplaySetUID: dynamicVolume.volumeId.split(':')[1],\r\n        madeInClient: true,\r\n        FrameOfReferenceUID: dynamicVolume.metadata.FrameOfReferenceUID,\r\n        isDerived: true,\r\n      };\r\n      setComputedDisplaySet(displaySet);\r\n      renderGeneratedImage(displaySet);\r\n    } else {\r\n      commandsManager.runCommand('updateVolumeData', {\r\n        volume: computedVolume,\r\n      });\r\n      // Check if viewport is currently displaying the computed volume, if so,\r\n      // call render on the viewports to update the image, if not, call\r\n      // renderGeneratedImage\r\n      // if (!cache.getVolume(dynamicVolumeId)) {\r\n      //   for (const viewportId of viewports.keys()) {\r\n      //     const viewportForRendering =\r\n      //       cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      //     viewportForRendering.render();\r\n      //   }\r\n      // } else {\r\n      cornerstoneViewportService.getRenderingEngine().render();\r\n      renderGeneratedImage(computedDisplaySet);\r\n      // }\r\n    }\r\n  }\r\n\r\n  const onPlayPauseChange = isPlaying => {\r\n    isPlaying ? handlePlay() : handleStop();\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    setIsPlaying(true);\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(activeViewportId);\r\n\r\n    if (!viewportInfo) {\r\n      return;\r\n    }\r\n\r\n    const { element } = viewportInfo;\r\n    cineService.playClip(element, { framesPerSecond: frameRate, viewportId: activeViewportId });\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setIsPlaying(false);\r\n    const { element } = cornerstoneViewportService.getViewportInfo(activeViewportId);\r\n    cineService.stopClip(element);\r\n  };\r\n\r\n  const handleSetFrameRate = newFrameRate => {\r\n    setFrameRate(newFrameRate);\r\n    handleStop();\r\n    handlePlay();\r\n  };\r\n\r\n  function handleSliderChange(newValues) {\r\n    if (\r\n      newValues[0] === timePointsRangeToUseForGenerate[0] &&\r\n      newValues[1] === timePointsRangeToUseForGenerate[1]\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setTimePointsRangeToUseForGenerate(newValues);\r\n  }\r\n\r\n  if (!dynamicVolume || timePointsRange.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <DynamicVolumeControls\r\n      fps={frameRate}\r\n      isPlaying={isPlaying}\r\n      onPlayPauseChange={onPlayPauseChange}\r\n      minFps={1}\r\n      maxFps={50}\r\n      currentFrameIndex={timePointRendered}\r\n      onFpsChange={handleSetFrameRate}\r\n      framesLength={timePointsRange[1]}\r\n      onFrameChange={timePointIndex => {\r\n        dynamicVolume.timePointIndex = timePointIndex;\r\n      }}\r\n      onGenerate={onGenerateImage}\r\n      onDynamicClick={displayingComputed ? () => renderDynamicImage(computedDisplaySet) : null}\r\n      onDoubleRangeChange={handleSliderChange}\r\n    />\r\n  );\r\n}\r\n\r\nasync function createComputedVolume(dynamicVolumeId, computedVolumeId) {\r\n  if (!cache.getVolume(computedVolumeId)) {\r\n    const computedVolume = await volumeLoader.createAndCacheDerivedVolume(dynamicVolumeId, {\r\n      volumeId: computedVolumeId,\r\n    });\r\n    return computedVolume;\r\n  }\r\n}\r\n\r\nPanelGenerateImage.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import React from 'react';\r\nimport PanelGenerateImage from './PanelGenerateImage';\r\n\r\nfunction DynamicDataPanel({ servicesManager, commandsManager }) {\r\n  return (\r\n    <div\r\n      className=\"flex flex-col text-white\"\r\n      data-cy={'dynamic-volume-panel'}\r\n    >\r\n      <PanelGenerateImage\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n      ></PanelGenerateImage>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicDataPanel;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ActionButtons } from '@ohif/ui';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nfunction DynamicExport({ commandsManager, servicesManager, extensionManager }: withAppTypes) {\r\n  const { segmentationService } = servicesManager.services;\r\n  const { t } = useTranslation('dynamicExport');\r\n\r\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\r\n\r\n  const actions = [\r\n    {\r\n      label: 'Export Time Data',\r\n      onClick: () => {\r\n        commandsManager.runCommand('exportTimeReportCSV', {\r\n          segmentations,\r\n          options: {\r\n            filename: 'TimeData.csv',\r\n          },\r\n        });\r\n      },\r\n      disabled: !segmentations?.length,\r\n    },\r\n    {\r\n      label: 'Export ROI Stats',\r\n      onClick: () => {\r\n        commandsManager.runCommand('exportTimeReportCSV', {\r\n          segmentations,\r\n          summaryStats: true,\r\n          options: {\r\n            filename: 'ROIStats.csv',\r\n          },\r\n        });\r\n      },\r\n      disabled: !segmentations?.length,\r\n    },\r\n  ];\r\n\r\n  /**\r\n   * Update UI based on segmentation changes (added, removed, updated)\r\n   */\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n    const subscriptions = [];\r\n\r\n    [added, updated, removed].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        const segmentations = segmentationService.getSegmentations();\r\n        setSegmentations(segmentations);\r\n      });\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mt-3 flex justify-center px-2\">\r\n        <ActionButtons\r\n          actions={actions}\r\n          t={t}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicExport;\r\n","import React from 'react';\r\nimport { DynamicDataPanel } from './panels';\r\nimport { Toolbox } from '@ohif/ui';\r\nimport DynamicExport from './panels/DynamicExport';\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\r\n  const wrappedDynamicDataPanel = () => {\r\n    return (\r\n      <DynamicDataPanel\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedDynamicToolbox = () => {\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          buttonSectionId=\"dynamic-toolbox\"\r\n          title=\"Threshold Tools\"\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const wrappedDynamicExport = () => {\r\n    return (\r\n      <>\r\n        <DynamicExport\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dynamic-volume',\r\n      iconName: 'tab-4d',\r\n      iconLabel: '4D Workflow',\r\n      label: '4D Workflow',\r\n      component: wrappedDynamicDataPanel,\r\n    },\r\n    {\r\n      name: 'dynamic-toolbox',\r\n      iconName: 'tab-4d',\r\n      iconLabel: '4D Workflow',\r\n      label: 'Dynamic Toolbox',\r\n      component: wrappedDynamicToolbox,\r\n    },\r\n    {\r\n      name: 'dynamic-export',\r\n      iconName: 'tab-4d',\r\n      iconLabel: '4D Workflow',\r\n      label: '4D Workflow',\r\n      component: wrappedDynamicExport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","const DEFAULT_COLORMAP = '2hot';\r\nconst toolGroupIds = {\r\n  pt: 'dynamic4D-pt',\r\n  fusion: 'dynamic4D-fusion',\r\n  ct: 'dynamic4D-ct',\r\n};\r\n\r\nfunction getPTOptions({\r\n  colormap,\r\n  voiInverted,\r\n}: {\r\n  colormap?: {\r\n    name: string;\r\n    opacity:\r\n      | number\r\n      | {\r\n          value: number;\r\n          opacity: number;\r\n        }[];\r\n  };\r\n  voiInverted?: boolean;\r\n} = {}) {\r\n  return {\r\n    blendMode: 'MIP',\r\n    colormap,\r\n    voi: {\r\n      windowWidth: 5,\r\n      windowCenter: 2.5,\r\n    },\r\n    voiInverted,\r\n  };\r\n}\r\n\r\nfunction getPTViewports() {\r\n  const ptOptionsParams = {\r\n    colormap: {\r\n      name: DEFAULT_COLORMAP,\r\n      opacity: [\r\n        { value: 0, opacity: 0 },\r\n        { value: 0.1, opacity: 1 },\r\n        { value: 1, opacity: 1 },\r\n      ],\r\n    },\r\n    voiInverted: false,\r\n  };\r\n\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nfunction getFusionViewports() {\r\n  const ptOptionsParams = {\r\n    colormap: {\r\n      name: DEFAULT_COLORMAP,\r\n      opacity: [\r\n        { value: 0, opacity: 0 },\r\n        { value: 0.1, opacity: 0.3 },\r\n        { value: 1, opacity: 0.3 },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nfunction getSeriesChartViewport() {\r\n  return {\r\n    viewportOptions: {\r\n      viewportId: 'seriesChart',\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'chartDisplaySet',\r\n        options: {\r\n          // This dataset does not require the download of any instance since it is pre-computed locally,\r\n          // but interleaveTopToBottom.ts was not loading any series because it consider that all viewports\r\n          // are a Cornerstone viewport which is not true in this case and it waits for all viewports to\r\n          // have called interleaveTopToBottom(...).\r\n          skipLoading: true,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction getCTViewports() {\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle',\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle',\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nconst defaultProtocol = {\r\n  id: 'default4D',\r\n  locked: true,\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  hasUpdatedPriorsInformation: false,\r\n  name: 'Default',\r\n  createdDate: '2023-01-01T00:00:00.000Z',\r\n  modifiedDate: '2023-01-01T00:00:00.000Z',\r\n  availableTo: {},\r\n  editableBy: {},\r\n  imageLoadStrategy: 'default', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\r\n  protocolMatchingRules: [\r\n    {\r\n      attribute: 'ModalitiesInStudy',\r\n      constraint: {\r\n        contains: ['CT', 'PT'],\r\n      },\r\n    },\r\n  ],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: -1,\r\n  displaySetSelectors: {\r\n    defaultDisplaySetId: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        // Try to match series with images by default, to prevent weird display\r\n        // on SEG/SR containing studies\r\n        {\r\n          attribute: 'numImageFrames',\r\n          constraint: {\r\n            greaterThan: { value: 0 },\r\n          },\r\n        },\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    ctDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    ptDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'PT',\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'Corrected',\r\n          },\r\n        },\r\n        {\r\n          weight: 2,\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            doesNotContain: {\r\n              value: 'Uncorrected',\r\n            },\r\n          },\r\n        },\r\n\r\n        // Should we check if CorrectedImage contains ATTN?\r\n        // (0028,0051) (CorrectedImage): NORM\\DTIM\\ATTN\\SCAT\\RADL\\DECY\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    chartDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CHT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      id: 'dataPreparation',\r\n      name: 'Data Preparation',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getPTViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'registration',\r\n      name: 'Registration',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 3,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports(), ...getCTViewports(), ...getPTViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'roiQuantification',\r\n      name: 'ROI Quantification',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'kineticAnalysis',\r\n      name: 'Kinetic Analysis',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 2,\r\n          columns: 3,\r\n          layoutOptions: [\r\n            {\r\n              x: 0,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 1 / 3,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 2 / 3,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 0,\r\n              y: 1 / 2,\r\n              width: 1,\r\n              height: 1 / 2,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports(), getSeriesChartViewport()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n  ],\r\n};\r\n\r\n/**\r\n * HangingProtocolModule should provide a list of hanging protocols that will be\r\n * available in OHIF for Modes to use to decide on the structure of the viewports\r\n * and also the series that hung in the viewports. Each hanging protocol is defined by\r\n * { name, protocols}. Examples include the default hanging protocol provided by\r\n * the default extension that shows 2x2 viewports.\r\n */\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: defaultProtocol.id,\r\n      protocol: defaultProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\n","import { id } from './id';\r\nimport commandsModule from './commandsModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport { cache } from '@cornerstonejs/core';\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst dynamicVolumeExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   * Perform any pre-registration tasks here. This is called before the extension\r\n   * is registered. Usually we run tasks such as: configuring the libraries\r\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\r\n   * this extension is providing.\r\n   */\r\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {\r\n    // TODO: look for the right fix\r\n    cache.setMaxCacheSize(5 * 1024 * 1024 * 1024);\r\n  },\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule,\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getHangingProtocolModule,\r\n  /**\r\n   * CommandsModule should provide a list of commands that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each command is defined by\r\n   * an object of { actions, definitions, defaultContext } where actions is an\r\n   * object of functions, definitions is an object of available commands, their\r\n   * options, and defaultContext is the default context for the command to run against.\r\n   */\r\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {\r\n    return commandsModule({\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    });\r\n  },\r\n};\r\n\r\nexport { dynamicVolumeExtension as default };\r\n"],"names":["id","packageJson","CHART_MODALITY","SEG_CHART_INSTANCE_UID","utils","guid","ChartDataSOPClassUid","utilities","csToolsUtils","csTools","_getTimePointsDataByTagName","volume","timePointsTag","uniqueTimePoints","imageIds","reduce","timePoints","imageId","timePointValue","DicomMetadataStore","getInstanceByImageId","undefined","add","Set","Array","from","sort","a","b","_getSegmentationData","segmentation","volumesTimePointsCache","displaySetService","volumeCacheKey","volumeId","getActiveDisplaySets","find","displaySet","anInstance","instances","FrameReferenceTime","NumberOfTimeSlices","displaySetInstanceUID","key","cs","_volumeCache","includes","referencedDynamicVolume","getVolume","StudyInstanceUID","StudyDescription","timeData","_","dynamicVolume","getDataInTime","maskVolumeId","pixelCount","length","segmentationRepresentationUID","toolGroupId","color","hexColor","timePointsData","get","timePointsTags","unit","timePointsTagNames","Object","keys","timePointsUnit","i","tagName","curTimePoints","concatTagNames","join","Error","convertedTimePoints","validUnits","divisors","currentUnitIndex","indexOf","divisor","newDivisor","filter","timePoint","map","_convertTimePointsUnit","_getTimePointsData","set","timepointsCount","chartSeriesData","average","acc","cur","chartData","series","label","points","axis","x","y","_getInstanceFromSegmentations","segmentations","WeakMap","segmentationsData","date","seriesDate","time","seriesTime","now","Date","getFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_getDateTimeStr","allSeries","curSegData","instance","SOPClassUID","Modality","SOPInstanceUID","SeriesDate","SeriesTime","SeriesInstanceUID","SeriesNumber","SeriesDescription","seriesMetadata","updateSegmentationsChartDisplaySet","servicesManager","segmentationService","services","getSegmentations","addSeriesMetadata","addInstances","LABELMAP","Enums","Labelmap","commandsModule","commandsManager","viewportGridService","actions","importedActions","getDynamic4DDisplaySet","TemporalPositionIdentifier","getComputedDisplaySets","getDisplaySetCache","values","isDerived","exportTimeReportCSV","config","options","summaryStats","dynamic4DDisplaySet","cache","csv","calculateStandardDeviation","data","n","mean","value","variance","Math","sqrt","push","PatientID","StudyDate","forEach","segmentationIndex","ijkCoords","headers","maxLength","numTimePoints","t","min","minIJK","max","maxIJK","std","numVoxels","timeIndex","voxelValues","voxelIndex","minimum","maximum","row","csvContent","filename","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","swapDynamicWithComputedDisplaySet","computedDisplaySet","displaySetCache","cachedDisplaySetKeys","viewports","getState","viewportsToUpdate","viewport","viewportOptions","displaySetInstanceUIDs","displaySetInstanceUIDIndex","newViewport","viewportId","initialImageOptions","viewportType","orientation","background","setDisplaySetsForViewports","swapComputedWithDynamicDisplaySet","dynamicDisplaySet","computed4DDisplaySet","createNewLabelMapForDynamicVolume","async","activeViewportId","dynamic4DDisplaySetInstanceUID","referenceDisplaySet","cachedDisplaySets","referenceDisplaySetUID","segmentationId","createSegmentationForDisplaySet","toolGroupIds","representationType","hydrateSegmentation","addSegmentationRepresentationToToolGroup","setActiveSegmentationForToolGroup","definitions","commandFn","storeContexts","defaultContext","controlClassNames","sizeClassName","arrowsDirection","labelPosition","Header","title","tooltip","React","className","Tooltip","content","position","tight","tooltipBoxClassName","Icon","name","DynamicVolumeControls","isPlaying","onPlayPauseChange","fps","onFpsChange","minFps","maxFps","currentFrameIndex","onFrameChange","framesLength","onGenerate","onDoubleRangeChange","onDynamicClick","computedView","setComputedView","useState","computeViewMode","setComputeViewMode","SUM","sliderRangeValues","setSliderRangeValues","useEffect","PanelSection","childrenClassName","ButtonGroup","onClick","FrameControls","separated","toString","toUpperCase","AVERAGE","SUBTRACT","InputDoubleRange","onChange","newValues","minValue","showLabel","allowNumberEdit","maxValue","step","Button","IconButton","InputNumber","_extends","SOPClassHandlerId","PanelGenerateImage","cornerstoneViewportService","isCineEnabled","cineService","useCine","useViewportGrid","timePointsRange","setTimePointsRange","timePointsRangeToUseForGenerate","setTimePointsRangeToUseForGenerate","setComputedDisplaySet","setDynamicVolume","frameRate","setFrameRate","setIsPlaying","timePointRendered","setTimePointRendered","displayingComputed","setDisplayingComputed","uuidComputedVolume","useRef","csUtils","uuidDynamicVolume","computedVolumeId","current","renderGeneratedImage","runCommand","evt","EVENTS","VIEWPORT_DATA_CHANGED","unsubscribe","subscribe","evtDetails","viewportData","volumeData","isDynamicVolume","CINE_STATE_CHANGED","displaySetUIDs","getDisplaySetsUIDsForViewport","dynamicVolumeDisplaySet","displaySetUID","getDisplaySetByUID","getVolumes","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","callback","detail","timePointIndex","eventTarget","addEventListener","removeEventListener","handlePlay","viewportInfo","getViewportInfo","element","playClip","framesPerSecond","handleStop","stopClip","newFrameRate","operationName","dynamicVolumeId","computedVolume","volumeLoader","createComputedVolume","vals","targets","dataInTime","cstUtils","loadStatus","loaded","getScalarData","getRenderingEngine","render","volumeLoaderSchema","split","metadata","isMultiFrame","numImageFrames","uid","madeInClient","FrameOfReferenceUID","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","extensionManager","useTranslation","setSegmentations","disabled","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsub","ActionButtons","iconName","iconLabel","component","wrappedDynamicDataPanel","DynamicDataPanel","wrappedDynamicToolbox","Toolbox","buttonSectionId","wrappedDynamicExport","DynamicExport","DEFAULT_COLORMAP","getPTOptions","colormap","voiInverted","blendMode","voi","windowWidth","windowCenter","getPTViewports","ptOptionsParams","opacity","preset","syncGroups","source","target","displaySets","getFusionViewports","syncInvertState","defaultProtocol","locked","hasUpdatedPriorsInformation","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","numberOfPriorsReferenced","displaySetSelectors","defaultDisplaySetId","imageMatchingRules","seriesMatchingRules","greaterThan","ctDisplaySet","equals","required","ptDisplaySet","weight","doesNotContain","chartDisplaySet","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","width","height","skipLoading","dynamicVolumeExtension","preRegistration","configuration","setMaxCacheSize","getPanelModule","getHangingProtocolModule","protocol","getCommandsModule"],"sourceRoot":""}