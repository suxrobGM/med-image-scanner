{"version":3,"file":"8315.bundle.bd4bfe824e654b167425.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\r\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nexport default createSEGToolGroupAndAddTools;\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  HYDRATE_SEG: 5,\r\n};\r\n\r\nfunction promptHydrateSEG({\r\n  servicesManager,\r\n  segDisplaySet,\r\n  viewportId,\r\n  preHydrateCallbacks,\r\n  hydrateSEGDisplaySet,\r\n}: withAppTypes) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const extensionManager = servicesManager._extensionManager;\r\n  const appConfig = extensionManager._appConfig;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const promptResult = appConfig?.disableConfirmationPrompts\r\n      ? RESPONSE.HYDRATE_SEG\r\n      : await _askHydrate(uiViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\r\n      preHydrateCallbacks?.forEach(callback => {\r\n        callback();\r\n      });\r\n\r\n      window.setTimeout(async () => {\r\n        const isHydrated = await hydrateSEGDisplaySet({\r\n          segDisplaySet,\r\n          viewportId,\r\n        });\r\n\r\n        resolve(isHydrated);\r\n      }, 0);\r\n    }\r\n  });\r\n}\r\n\r\nfunction _askHydrate(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to open this Segmentation?';\r\n    const actions = [\r\n      {\r\n        id: 'no-hydrate',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'yes-hydrate',\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_SEG,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          onSubmit(RESPONSE.HYDRATE_SEG);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateSEG;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Icon, Tooltip } from '@ohif/ui';\r\n\r\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  switch (isHydrated) {\r\n    case true:\r\n      StatusIcon = () => <Icon name=\"status-alert\" />;\r\n\r\n      ToolTipMessage = () => <div>This Segmentation is loaded in the segmentation panel</div>;\r\n      break;\r\n    case false:\r\n      StatusIcon = () => (\r\n        <Icon\r\n          className=\"text-aqua-pale\"\r\n          name=\"status-untracked\"\r\n        />\r\n      );\r\n\r\n      ToolTipMessage = () => <div>Click LOAD to load segmentation.</div>;\r\n  }\r\n\r\n  const StatusArea = () => {\r\n    const { t } = useTranslation('Common');\r\n    const loadStr = t('LOAD');\r\n\r\n    return (\r\n      <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\r\n        <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\r\n          <StatusIcon />\r\n          <span className=\"ml-1\">SEG</span>\r\n        </div>\r\n        {!isHydrated && (\r\n          <div\r\n            className=\"bg-primary-main hover:bg-primary-light ml-1 cursor-pointer rounded px-1.5 hover:text-black\"\r\n            // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\r\n            onMouseUp={onStatusClick}\r\n          >\r\n            {loadStr}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip\r\n          content={<ToolTipMessage />}\r\n          position=\"bottom-left\"\r\n        >\r\n          <StatusArea />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusArea />}\r\n    </>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LoadingIndicatorTotalPercent, useViewportGrid, ViewportActionArrows } from '@ohif/ui';\r\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\r\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\r\nimport _getStatusComponent from './_getStatusComponent';\r\n\r\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\r\n\r\nfunction OHIFCornerstoneSEGViewport(props: withAppTypes) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportOptions,\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('SEGViewport');\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const {\r\n    displaySetService,\r\n    toolGroupService,\r\n    segmentationService,\r\n    customizationService,\r\n    viewportActionCornersService,\r\n  } = servicesManager.services;\r\n\r\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportId}`;\r\n\r\n  // SEG viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SEG viewport should only have a single display set');\r\n  }\r\n\r\n  const segDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n\r\n  // States\r\n  const [selectedSegment, setSelectedSegment] = useState(1);\r\n\r\n  // Hydration means that the SEG is opened and segments are loaded into the\r\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\r\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\r\n  // loading basically means SEG loading over network and bit unpacking of the\r\n  // SEG data.\r\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\r\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\r\n  const [element, setElement] = useState(null);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    percentComplete: null,\r\n    totalSegments: null,\r\n  });\r\n\r\n  // refs\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const { viewports, activeViewportId } = viewportGrid;\r\n\r\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet,\r\n    segDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const onElementDisabled = () => {\r\n    setElement(null);\r\n  };\r\n\r\n  const storePresentationState = useCallback(() => {\r\n    viewportGrid?.viewports.forEach(({ viewportId }) => {\r\n      commandsManager.runCommand('storePresentation', {\r\n        viewportId,\r\n      });\r\n    });\r\n  }, [viewportGrid]);\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\r\n\r\n    // Todo: jump to the center of the first segment\r\n    return (\r\n      <Component\r\n        {...props}\r\n        displaySets={[referencedDisplaySet, segDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: 'volume',\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n        }}\r\n        onElementEnabled={evt => {\r\n          props.onElementEnabled?.(evt);\r\n          onElementEnabled(evt);\r\n        }}\r\n        onElementDisabled={onElementDisabled}\r\n      ></Component>\r\n    );\r\n  }, [viewportId, segDisplaySet, toolGroupId]);\r\n\r\n  const onSegmentChange = useCallback(\r\n    direction => {\r\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      const { segments } = segmentation;\r\n\r\n      const numberOfSegments = Object.keys(segments).length;\r\n\r\n      let newSelectedSegmentIndex = selectedSegment + direction;\r\n\r\n      // Segment 0 is always background\r\n\r\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\r\n        newSelectedSegmentIndex = 1;\r\n      } else if (newSelectedSegmentIndex === 0) {\r\n        newSelectedSegmentIndex = numberOfSegments - 1;\r\n      }\r\n\r\n      segmentationService.jumpToSegmentCenter(segmentationId, newSelectedSegmentIndex, toolGroupId);\r\n      setSelectedSegment(newSelectedSegmentIndex);\r\n    },\r\n    [selectedSegment]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (segIsLoading) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateSEG({\r\n      servicesManager,\r\n      viewportId,\r\n      segDisplaySet,\r\n      preHydrateCallbacks: [storePresentationState],\r\n      hydrateSEGDisplaySet,\r\n    }).then(isHydrated => {\r\n      if (isHydrated) {\r\n        setIsHydrated(true);\r\n      }\r\n    });\r\n  }, [servicesManager, viewportId, segDisplaySet, segIsLoading]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (evt.segDisplaySet.displaySetInstanceUID === segDisplaySet.displaySetInstanceUID) {\r\n          setSegIsLoading(false);\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\r\n      ({ percentComplete, numSegments }) => {\r\n        setProcessingProgress({\r\n          percentComplete,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  /**\r\n   Cleanup the SEG viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    // This creates a custom tool group which has the lifetime of this view\r\n    // only, and does NOT interfere with currently displayed segmentations.\r\n    toolGroup = createSEGToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\r\n\r\n      // Only destroy the viewport specific implementation\r\n      toolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(segDisplaySet.isHydrated);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\r\n      referencedDisplaySetRef.current = null;\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  const hydrateSEGDisplaySet = useCallback(\r\n    ({ segDisplaySet, viewportId }) => {\r\n      commandsManager.runCommand('loadSegmentationDisplaySetsForViewport', {\r\n        displaySets: [segDisplaySet],\r\n        viewportId,\r\n      });\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const onStatusClick = useCallback(async () => {\r\n    // Before hydrating a SEG and make it added to all viewports in the grid\r\n    // that share the same frameOfReferenceUID, we need to store the viewport grid\r\n    // presentation state, so that we can restore it after hydrating the SEG. This is\r\n    // required if the user has changed the viewport (other viewport than SEG viewport)\r\n    // presentation state (w/l and invert) and then opens the SEG. If we don't store\r\n    // the presentation state, the viewport will be reset to the default presentation\r\n    storePresentationState();\r\n    const isHydrated = await hydrateSEGDisplaySet({\r\n      segDisplaySet,\r\n      viewportId,\r\n    });\r\n\r\n    setIsHydrated(isHydrated);\r\n  }, [hydrateSEGDisplaySet, segDisplaySet, storePresentationState, viewportId]);\r\n\r\n  useEffect(() => {\r\n    viewportActionCornersService.setComponents([\r\n      {\r\n        viewportId,\r\n        id: 'viewportStatusComponent',\r\n        component: _getStatusComponent({\r\n          isHydrated,\r\n          onStatusClick,\r\n        }),\r\n        indexPriority: -100,\r\n        location: viewportActionCornersService.LOCATIONS.topLeft,\r\n      },\r\n      {\r\n        viewportId,\r\n        id: 'viewportActionArrowsComponent',\r\n        component: (\r\n          <ViewportActionArrows\r\n            key=\"actionArrows\"\r\n            onArrowsClick={onSegmentChange}\r\n            className={\r\n              viewportId === activeViewportId ? 'visible' : 'invisible group-hover:visible'\r\n            }\r\n          ></ViewportActionArrows>\r\n        ),\r\n        indexPriority: 0,\r\n        location: viewportActionCornersService.LOCATIONS.topRight,\r\n      },\r\n    ]);\r\n  }, [\r\n    activeViewportId,\r\n    isHydrated,\r\n    onSegmentChange,\r\n    onStatusClick,\r\n    viewportActionCornersService,\r\n    viewportId,\r\n  ]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportId,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SpacingBetweenSlices,\r\n  } = referencedDisplaySetRef.current.metadata;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {segIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"h-full w-full\"\r\n            totalNumbers={processingProgress.totalSegments}\r\n            percentComplete={processingProgress.percentComplete}\r\n            loadingText=\"Loading SEG...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneSEGViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\r\n  const { SharedFunctionalGroupsSequence } = segDisplaySet.instance;\r\n\r\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\r\n    ? SharedFunctionalGroupsSequence[0]\r\n    : SharedFunctionalGroupsSequence;\r\n\r\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\r\n\r\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\r\n    ? PixelMeasuresSequence[0]\r\n    : PixelMeasuresSequence;\r\n\r\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness || SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneSEGViewport;\r\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","servicesManager","segDisplaySet","viewportId","preHydrateCallbacks","hydrateSEGDisplaySet","uiViewportDialogService","services","appConfig","_extensionManager","_appConfig","Promise","async","resolve","reject","promptResult","disableConfirmationPrompts","message","actions","id","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","event","key","_askHydrate","forEach","callback","window","setTimeout","isHydrated","_getStatusComponent","onStatusClick","ToolTipMessage","StatusIcon","React","Icon","name","className","StatusArea","t","useTranslation","loadStr","onMouseUp","Tooltip","content","position","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportOptions","extensionManager","commandsManager","displaySetService","toolGroupService","segmentationService","viewportActionCornersService","length","Error","viewportGrid","viewportGridService","useViewportGrid","selectedSegment","setSelectedSegment","useState","setIsHydrated","segIsLoading","setSegIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementDisabled","storePresentationState","useCallback","runCommand","getCornerstoneViewport","component","Component","getModuleEntry","_extends","viewportType","orientation","onElementEnabled","evt","detail","onSegmentChange","direction","segmentationId","displaySetInstanceUID","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","setComponents","indexPriority","location","LOCATIONS","topLeft","ViewportActionArrows","onArrowsClick","topRight","childrenWithProps","map","child","index","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource"],"sourceRoot":""}